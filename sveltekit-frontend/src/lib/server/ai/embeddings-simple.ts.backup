// Simplified AI embedding service - Production ready
// Supports OpenAI embeddings with Redis/memory caching
import { env } from '$env/dynamic/private';
import { getCachedEmbedding, cacheEmbedding } from "../../../lib/server/cache/redis";

interface EmbeddingOptions {
  model?: 'openai' | 'local';
  cache?: boolean;
  maxTokens?: number;
}

export async function generateEmbedding(
  text: string, 
  options: EmbeddingOptions = {}
): Promise<number[] | null> {
  const { model = 'openai', cache = true, maxTokens = 8000 } = options;
  
  if (!text || text.trim().length === 0) {
    return null;
  }
  
  // Truncate text if too long
  const truncatedText = text.length > maxTokens ? text.substring(0, maxTokens) : text;
  
  // Check cache first
  if (cache) {
    const cachedEmbedding = await getCachedEmbedding(truncatedText, model);
    if (cachedEmbedding) {
      return cachedEmbedding;
    }
  }
  
  try {
    let embedding: number[];
    
    if (model === 'openai') {
      embedding = await generateOpenAIEmbedding(truncatedText);
    } else {
      // Fallback to OpenAI for now
      console.warn('Local embedding generation not implemented, using OpenAI fallback');
      embedding = await generateOpenAIEmbedding(truncatedText);
    }
    
    // Cache the result
    if (cache) {
      await cacheEmbedding(truncatedText, embedding, model);
    }
    
    return embedding;
    
  } catch (error) {
    console.error('Embedding generation failed:', error);
    return null;
  }
}

// OpenAI embedding generation
async function generateOpenAIEmbedding(text: string): Promise<number[]> {
  const apiKey = env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error('OpenAI API key not configured');
  }
  
  const response = await fetch('https://api.openai.com/v1/embeddings', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      input: text,
      model: 'text-embedding-3-small', // 1536 dimensions, fast and cost-effective
    }),
  });
  
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
    throw new Error(`OpenAI API error: ${response.statusText} - ${JSON.stringify(errorData)}`);
  }
  
  const data = await response.json();
  return data.data[0].embedding;
}

// Batch embedding generation for efficiency
export async function generateBatchEmbeddings(
  texts: string[],
  options: EmbeddingOptions = {}
): Promise<(number[] | null)[]> {
  const { model = 'openai' } = options;
  
  // Filter out empty texts
  const validTexts = texts.filter(text => text && text.trim().length > 0);
  if (validTexts.length === 0) {
    return texts.map(() => null);
  }
  
  try {
    if (model === 'openai' && validTexts.length > 1) {
      return await generateOpenAIBatchEmbeddings(validTexts);
    }
  } catch (error) {
    console.warn('Batch embedding failed, falling back to individual generation:', error);
  }
  
  // Fall back to individual generation
  const results: (number[] | null)[] = [];
  for (const text of texts) {
    const embedding = await generateEmbedding(text, options);
    results.push(embedding);
  }
  
  return results;
}

// OpenAI batch embedding generation
async function generateOpenAIBatchEmbeddings(texts: string[]): Promise<(number[] | null)[]> {
  const apiKey = env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error('OpenAI API key not configured');
  }
  
  const response = await fetch('https://api.openai.com/v1/embeddings', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${apiKey}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      input: texts,
      model: 'text-embedding-3-small',
    }),
  });
  
  if (!response.ok) {
    throw new Error(`OpenAI API error: ${response.statusText}`);
  }
  
  const data = await response.json();
  return data.data.map((item: any) => item.embedding);
}

// Export object for easier importing and better organization
export const embeddings = {
  generate: generateEmbedding,
  generateBatch: generateBatchEmbeddings,
};

// For backward compatibility
export const embedAndSearch = {
  generateEmbedding,
  generateBatchEmbeddings,
};

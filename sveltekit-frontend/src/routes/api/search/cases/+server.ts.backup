// Optimized case search API endpoint
// Supports multiple search strategies with automatic fallbacks
import { json } from "@sveltejs/kit";
import { and, desc, ilike, or, sql } from "drizzle-orm";
import { generateEmbedding } from "../../../../lib/server/ai/embeddings-simple";
import {
  cacheSearchResults,
  getCachedSearchResults,
} from "../../../../lib/server/cache/redis";
import { db, isPostgreSQL } from "../../../../lib/server/db/index";
import type { RequestHandler } from "./$types";

export const GET: RequestHandler = async ({ url }) => {
  try {
    const query = url.searchParams.get("q");
    const limit = parseInt(url.searchParams.get("limit") || "20");
    const offset = parseInt(url.searchParams.get("offset") || "0");
    const searchType = url.searchParams.get("type") || "hybrid"; // 'text', 'semantic', 'hybrid'

    const filters = {
      status: url.searchParams.get("status"),
      priority: url.searchParams.get("priority"),
      category: url.searchParams.get("category"),
    };

    if (!query || query.length < 2) {
      return json({
        results: [],
        searchType: "none",
        executionTime: 0,
        total: 0,
        message: "Query too short",
      });
    }

    const startTime = Date.now();

    // Check cache first
    const cacheKey = `cases_${searchType}_${query}_${JSON.stringify(filters)}`;
    const cachedResults = await getCachedSearchResults(
      query,
      `cases_${searchType}`,
      filters
    );

    if (cachedResults) {
      return json({
        results: cachedResults.slice(offset, offset + limit),
        searchType: searchType + "_cached",
        executionTime: Date.now() - startTime,
        total: cachedResults.length,
        fromCache: true,
      });
    }

    let results = [];

    switch (searchType) {
      case "text":
        results = await searchCasesText(query, limit + offset, filters);
        break;

      case "semantic":
        if (isPostgreSQL()) {
          results = await searchCasesSemantic(query, limit + offset, filters);
        } else {
          // Fallback to text search in development
          results = await searchCasesText(query, limit + offset, filters);
        }
        break;

      case "hybrid":
      default:
        if (isPostgreSQL()) {
          results = await searchCasesHybrid(query, limit + offset, filters);
        } else {
          // Fallback to text search in development
          results = await searchCasesText(query, limit + offset, filters);
        }
        break;
    }

    const executionTime = Date.now() - startTime;

    // Cache the results
    await cacheSearchResults(query, `cases_${searchType}`, results, filters);

    // Log performance for monitoring
    if (isPostgreSQL()) {
      await logSearchPerformance(
        "case_search",
        searchType,
        executionTime,
        results.length
      );
    }

    return json({
      results: results.slice(offset, offset + limit),
      searchType,
      executionTime,
      total: results.length,
      query,
      filters,
      fromCache: false,
    });
  } catch (error) {
    console.error("Case search error:", error);
    return json(
      {
        results: [],
        error: "Search failed",
        message: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
};

// Fast text-based search using SQL LIKE
async function searchCasesText(
  query: string,
  limit: number,
  filters: any
): Promise<any[]> {
  try {
    // Import the appropriate schema based on environment
    const { cases } = isPostgreSQL()
      ? await import("../../../../lib/server/db/unified-schema.js")
      : await import("../../../../lib/server/db/schema-postgres.js");

    const whereConditions = [
      or(
        ilike(cases.title, `%${query}%`),
        ilike(cases.description, `%${query}%`),
        ilike(cases.caseNumber, `%${query}%`)
      ),
    ];

    // Add filters
    if (filters.status) {
      whereConditions.push(sql`${cases.status} = ${filters.status}`);
    }
    if (filters.priority) {
      whereConditions.push(sql`${cases.priority} = ${filters.priority}`);
    }
    if (filters.category) {
      whereConditions.push(sql`${cases.category} = ${filters.category}`);
    }

    const results = await db
      .select()
      .from(cases)
      .where(and(...whereConditions))
      .orderBy(desc(cases.createdAt))
      .limit(limit);

    return results.map((case_) => ({
      ...case_,
      searchScore: 1.0,
      matchType: "text",
    }));
  } catch (error) {
    console.error("Text search failed:", error);
    return [];
  }
}

// Semantic search using pgvector (PostgreSQL only)
async function searchCasesSemantic(
  query: string,
  limit: number,
  filters: any
): Promise<any[]> {
  try {
    const embedding = await generateEmbedding(query);
    if (!embedding) {
      return [];
    }

    const { cases } = await import(
      "../../../../lib/server/db/unified-schema.js"
    );

    const whereConditions = [
      sql`${cases.titleEmbedding} IS NOT NULL`,
      sql`1 - (${cases.titleEmbedding} <=> ${JSON.stringify(embedding)}::vector) > 0.7`,
    ];

    // Add filters
    if (filters.status) {
      whereConditions.push(sql`${cases.status} = ${filters.status}`);
    }
    if (filters.priority) {
      whereConditions.push(sql`${cases.priority} = ${filters.priority}`);
    }
    if (filters.category) {
      whereConditions.push(sql`${cases.category} = ${filters.category}`);
    }

    const results = await db
      .select({
        ...cases,
        searchScore: sql<number>`1 - (${cases.titleEmbedding} <=> ${JSON.stringify(embedding)}::vector)`,
      })
      .from(cases)
      .where(and(...whereConditions))
      .orderBy(
        sql`1 - (${cases.titleEmbedding} <=> ${JSON.stringify(embedding)}::vector) DESC`
      )
      .limit(limit);

    return results.map((case_) => ({
      ...case_,
      matchType: "semantic",
    }));
  } catch (error) {
    console.error("Semantic search failed:", error);
    return [];
  }
}

// Hybrid search combining text and semantic results
async function searchCasesHybrid(
  query: string,
  limit: number,
  filters: any
): Promise<any[]> {
  try {
    const [textResults, semanticResults] = await Promise.all([
      searchCasesText(query, Math.floor(limit / 2), filters),
      searchCasesSemantic(query, Math.floor(limit / 2), filters),
    ]);

    // Combine and deduplicate results
    const combinedResults = new Map();

    textResults.forEach((result) => {
      combinedResults.set(result.id, { ...result, matchType: "text" });
    });

    semanticResults.forEach((result) => {
      if (combinedResults.has(result.id)) {
        // Boost score for items that match both text and semantic
        const existing = combinedResults.get(result.id);
        combinedResults.set(result.id, {
          ...existing,
          searchScore:
            Math.max(existing.searchScore || 0, result.searchScore || 0) * 1.2,
          matchType: "hybrid",
        });
      } else {
        combinedResults.set(result.id, { ...result, matchType: "semantic" });
      }
    });

    return Array.from(combinedResults.values())
      .sort((a, b) => (b.searchScore || 0) - (a.searchScore || 0))
      .slice(0, limit);
  } catch (error) {
    console.error("Hybrid search failed:", error);
    return [];
  }
}

// Log search performance for monitoring
async function logSearchPerformance(
  searchType: string,
  queryType: string,
  executionTime: number,
  resultCount: number
): Promise<void> {
  try {
    await db.execute(sql`
      INSERT INTO vector_search_stats (query_type, execution_time_ms, results_count, query_vector_dims)
      VALUES (${searchType + "_" + queryType}, ${executionTime}, ${resultCount}, ${queryType.includes("semantic") ? 1536 : null})
    `);
  } catch (error) {
    // Ignore logging errors to not break search functionality
    console.warn("Failed to log search performance:", error);
  }
}

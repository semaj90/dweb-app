// Vector Search API Endpoint
// Provides fast vector similarity search using pgvector + Qdrant
import { json } from '@sveltejs/kit';
import type { RequestHandler } from '@sveltejs/kit';
import { vectorSearch } from "../../../../lib/server/search/vector-search";
import { cache } from "../../../../lib/server/cache/redis";

// Vector search request interface
interface VectorSearchRequest {
  query: string;
  options?: {
    limit?: number;
    offset?: number;
    threshold?: number;
    useCache?: boolean;
    fallbackToQdrant?: boolean;
    filters?: Record<string, any>;
    searchType?: 'similarity' | 'hybrid' | 'semantic';
  };
}

export const POST: RequestHandler = async ({ request, locals }) => {
  const startTime = Date.now();
  
  try {
    const body: VectorSearchRequest = await request.json();
    const { query, options = {} } = body;

    if (!query || query.trim().length === 0) {
      return json({
        success: false,
        error: 'Query is required'
      }, { status: 400 });
    }

    // Apply default options
    const searchOptions = {
      limit: 20,
      offset: 0,
      threshold: 0.7,
      useCache: true,
      fallbackToQdrant: true,
      searchType: 'hybrid' as const,
      ...options
    };

    // Perform vector search
    const results = await vectorSearch(query, searchOptions);

    return json({
      success: true,
      data: {
        ...results,
        query,
        requestTime: Date.now() - startTime
      }
    });

  } catch (error) {
    console.error('Vector search API error:', error);
    return json({
      success: false,
      error: 'Vector search failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
};

// GET endpoint for quick searches with URL parameters
export const GET: RequestHandler = async ({ url, locals }) => {
  const startTime = Date.now();
  
  try {
    const query = url.searchParams.get('q') || '';
    const limit = parseInt(url.searchParams.get('limit') || '10');
    const threshold = parseFloat(url.searchParams.get('threshold') || '0.7');
    const searchType = (url.searchParams.get('type') || 'similarity') as 'similarity' | 'hybrid' | 'semantic';
    const useCache = url.searchParams.get('cache') !== 'false';

    if (!query || query.trim().length === 0) {
      return json({
        success: false,
        error: 'Query parameter "q" is required'
      }, { status: 400 });
    }

    // Parse filters from URL parameters
    const filters: Record<string, any> = {};
    if (url.searchParams.get('type')) filters.type = url.searchParams.get('type');
    if (url.searchParams.get('status')) filters.status = url.searchParams.get('status');
    if (url.searchParams.get('tags')) filters.tags = url.searchParams.get('tags')?.split(',');

    const results = await vectorSearch(query, {
      limit,
      threshold,
      searchType,
      useCache,
      fallbackToQdrant: true,
      filters
    });

    return json({
      success: true,
      data: {
        ...results,
        query,
        requestTime: Date.now() - startTime
      }
    });

  } catch (error) {
    console.error('Vector search API error:', error);
    return json({
      success: false,
      error: 'Vector search failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
};

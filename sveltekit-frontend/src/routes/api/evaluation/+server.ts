import type { RequestHandler } from '@sveltejs/kit';
// @ts-nocheck
/**
 * Evaluation & Metrics API Endpoints - Step 10 Integration
 */

import type { RequestHandler } from "./$types.js";

import { determinismEvaluationService } from "$lib/services/determinism-evaluation-service";
import { // GET /api/evaluation - Get metrics and benchmarks export const GET: RequestHandler = async ({ url }) => { try { const action = url.searchParams.get("action") || "metrics"; const agentType = url.searchParams.get("agentType") || undefined; const timeWindow = parseInt(url.searchParams.get("timeWindow") || "24"); switch (action) { case "metrics": const metrics = await determinismEvaluationService.calculateMetrics(); return json({ success: true, metrics, agentType, timeWindow }); case "benchmarks": const benchmarks = await determinismEvaluationService.getBenchmarkResults(); return json({ success: true, ...benchmarks, agentType }); case "config": const config = determinismEvaluationService.getDeterministicConfig(); return json({ success: true, config }); default: return json( { success: false, error: "Invalid action. Use: metrics, benchmarks, or config" }, { status: 400 } ); } } catch (error) { console.error("Evaluation API error:", error); return json( { success: false, error: error.message || "Evaluation operation failed" }, { status: 500 } ); } }; // POST /api/evaluation - Record feedback or test results export const POST: RequestHandler = async ({ request }) => { try { const { action, ...data } = await request.json(); switch (action) { case "feedback": const feedbackId = await determinismEvaluationService.recordUserFeedback({ sessionId: data.sessionId || crypto.randomUUID(), agentType: data.agentType, operation: data.operation, query: data.query, response: data.response, rating: data.rating, feedback: data.feedback, metadata: data.metadata }); return json({ success: true, feedbackId, message: "User feedback recorded successfully" }); case "test_result": const testId = await determinismEvaluationService.recordTestResult({ testType: data.testType, testName: data.testName, passed: data.passed, score: data.score, duration: data.duration, details: data.details, agentInvolved: data.agentInvolved }); return json({ success: true, testId, message: "Test result recorded successfully" }); case "rl_features": const features = await determinismEvaluationService.extractRLFeatures({ query: data.query, context: data.context, agentChain: data.agentChain, responseTime: data.responseTime, userRating: data.userRating }); return json({ success: true, features }); default: return json( { success: false, error: "Invalid action. Use: feedback, test_result, or rl_features" }, { status: 400 } ); } } catch (error) { console.error("Evaluation record error:", error); return json( { success: false, error: error.message || "Failed to record evaluation data" }, { status: 500 } ); } };
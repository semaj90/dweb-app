// Example of proper SvelteKit API endpoint with Drizzle ORM
import { json, error } from '@sveltejs/kit';
import { eq, desc } from 'drizzle-orm';
import { db } from '$lib/server/db/index.js';
import { legalDocuments, type DocumentMetadata } from '$lib/server/db/unified-schema.js';
import { documentMetadataSchema } from '$lib/server/db/unified-schema.js';
import type { RequestHandler } from './$types';

// GET /api/documents - List documents with filtering
export const GET: RequestHandler = async ({ url, locals }) => {
  if (!locals.user) {
    throw error(401, 'Unauthorized');
  }

  const caseId = url.searchParams.get('caseId');
  const documentType = url.searchParams.get('type');
  const limit = parseInt(url.searchParams.get('limit') || '10');
  const offset = parseInt(url.searchParams.get('offset') || '0');

  try {
    // Build dynamic query
    let query = db.query.legalDocuments.findMany({
      where: (documents, { eq, and }) => {
        const conditions = [eq(documents.userId, locals.user.id)];
        
        if (caseId) {
          conditions.push(eq(documents.caseId, caseId));
        }
        
        if (documentType) {
          conditions.push(eq(documents.documentType, documentType));
        }
        
        return and(...conditions);
      },
      orderBy: [desc(legalDocuments.updatedAt)],
      limit,
      offset,
    });

    const documents = await query;
    
    return json({
      success: true,
      data: documents,
      pagination: {
        limit,
        offset,
        hasMore: documents.length === limit
      }
    });
    
  } catch (err) {
    console.error('Failed to fetch documents:', err);
    throw error(500, 'Failed to fetch documents');
  }
};

// POST /api/documents - Create new document
export const POST: RequestHandler = async ({ request, locals }) => {
  if (!locals.user) {
    throw error(401, 'Unauthorized');
  }

  try {
    const data = await request.json();
    
    // Validate the required fields
    if (!data.title || !data.content) {
      throw error(400, 'Title and content are required');
    }

    // Validate metadata if provided
    let validatedMetadata: DocumentMetadata = {
      keywords: [],
      customFields: {},
      confidentialityLevel: 'restricted'
    };
    
    if (data.metadata) {
      validatedMetadata = documentMetadataSchema.parse(data.metadata);
    }

    // Create the document (ID will be auto-generated using CUID2)
    const newDocument = await db.insert(legalDocuments)
      .values({
        title: data.title,
        content: data.content,
        documentType: data.documentType || 'brief',
        caseId: data.caseId || null,
        userId: locals.user.id,
        metadata: validatedMetadata,
        citations: data.citations || [],
        autoSaveData: {
          content: data.content,
          title: data.title,
          citations: data.citations || [],
          autoSavedAt: new Date().toISOString(),
          isDirty: false
        }
      })
      .returning();

    return json({
      success: true,
      data: newDocument[0]
    }, { status: 201 });
    
  } catch (err) {
    if (err instanceof z.ZodError) {
      throw error(400, {
        message: 'Invalid data provided',
        errors: err.errors
      });
    }
    
    console.error('Failed to create document:', err);
    throw error(500, 'Failed to create document');
  }
};

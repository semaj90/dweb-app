// Enhanced document analysis API with GRPO-style thinking for legal AI
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { db } from '$lib/server/db/index.js';
import { evidence, cases, aiReports, users } from '$lib/server/db/schema.js';
import { eq } from 'drizzle-orm';
import ollama from 'ollama';
import { createHash } from 'crypto';

interface AnalysisRequest {
	documentId?: string;
	evidenceId?: string;
	caseId?: string;
	text?: string;
	documentType?: 'evidence' | 'case_file' | 'legal_document' | 'ocr_scan';
	analysisType?: 'classification' | 'extraction' | 'reasoning' | 'compliance' | 'chain_of_custody';
	useThinkingStyle?: boolean;
	contextDocuments?: string[];
	userId?: string;
}

interface ThinkingAnalysis {
	thinking: string;
	analysis: any;
	confidence: number;
	reasoning_steps: string[];
	metadata: {
		model_used: string;
		processing_time: number;
		thinking_enabled: boolean;
	};
}

export const POST: RequestHandler = async ({ request, locals }) => {
	try {
		const body: AnalysisRequest = await request.json();
		const startTime = Date.now();

		// Validate request
		if (!body.text && !body.evidenceId && !body.caseId) {
			return json({ 
				error: 'Missing required field: text, evidenceId, or caseId' 
			}, { status: 400 });
		}

		// Get document text and metadata
		let documentText = body.text || '';
		let documentMetadata: any = {};
		let caseContext: any = null;

		if (body.evidenceId) {
			const evidenceRecord = await db.select().from(evidence).where(eq(evidence.id, body.evidenceId)).limit(1);
			if (evidenceRecord[0]) {
				documentText = evidenceRecord[0].description || evidenceRecord[0].fileName || '';
				documentMetadata = { 
					fileName: evidenceRecord[0].fileName,
					type: evidenceRecord[0].evidenceType,
					hash: evidenceRecord[0].hash,
					chainOfCustody: evidenceRecord[0].chainOfCustody,
					collectedAt: evidenceRecord[0].collectedAt,
					collectedBy: evidenceRecord[0].collectedBy
				};
				
				// Get case context if evidence is linked to a case
				if (evidenceRecord[0].caseId) {
					const caseRecord = await db.select().from(cases).where(eq(cases.id, evidenceRecord[0].caseId)).limit(1);
					if (caseRecord[0]) {
						caseContext = {
							caseNumber: caseRecord[0].caseNumber,
							title: caseRecord[0].title,
							status: caseRecord[0].status,
							category: caseRecord[0].category
						};
					}
				}
			}
		}

		if (body.caseId && !caseContext) {
			const caseRecord = await db.select().from(cases).where(eq(cases.id, body.caseId)).limit(1);
			if (caseRecord[0]) {
				documentText = caseRecord[0].description || caseRecord[0].title;
				caseContext = {
					caseNumber: caseRecord[0].caseNumber,
					title: caseRecord[0].title,
					status: caseRecord[0].status,
					category: caseRecord[0].category
				};
			}
		}

		// Build enhanced context
		let contextualInfo = '';
		if (caseContext) {
			contextualInfo = `\n\nCase Context:\n- Case Number: ${caseContext.caseNumber}\n- Title: ${caseContext.title}\n- Status: ${caseContext.status}\n- Category: ${caseContext.category}`;
		}

		// Determine model and build prompt
		const modelName = body.useThinkingStyle ? 'legal-gemma3-thinking' : 'gemma3:7b';
		const analysisPrompt = buildEnhancedAnalysisPrompt(
			documentText, 
			body.analysisType || 'classification',
			body.documentType || 'legal_document',
			body.useThinkingStyle || false,
			contextualInfo,
			documentMetadata
		);

		// Call Ollama for analysis
		console.log(`ðŸ¤– Analyzing with ${modelName}...`);
		
		let response: any;
		try {
			response = await ollama.chat({
				model: modelName,
				messages: [
					{
						role: 'system',
						content: getEnhancedSystemPrompt(body.analysisType || 'classification', body.useThinkingStyle || false)
					},
					{
						role: 'user',
						content: analysisPrompt
					}
				],
				options: {
					temperature: body.useThinkingStyle ? 0.7 : 0.3,
					top_p: 0.9,
					num_ctx: 4096
				}
			});
		} catch (ollamaError) {
			console.error('Ollama error:', ollamaError);
			// Fallback to template response
			response = {
				message: {
					content: generateFallbackAnalysis(documentText, body.analysisType || 'classification', body.useThinkingStyle || false)
				}
			};
		}

		const processingTime = Date.now() - startTime;

		// Parse response 
		const analysisResult = parseAnalysisResponse(
			response.message.content,
			body.useThinkingStyle || false
		);

		// Create document hash for integrity
		const documentHash = createHash('sha256')
			.update(documentText + JSON.stringify(documentMetadata))
			.digest('hex');

		// Store analysis in ai_reports table for persistence
		if (body.evidenceId || body.caseId) {
			try {
				await db.insert(aiReports).values({
					id: crypto.randomUUID(),
					caseId: body.caseId || caseContext?.id,
					reportType: `${body.analysisType}_analysis`,
					title: `${body.useThinkingStyle ? 'Thinking Style' : 'Quick'} Analysis - ${new Date().toISOString()}`,
					content: JSON.stringify(analysisResult),
					metadata: {
						documentId: body.evidenceId,
						analysisType: body.analysisType,
						thinkingEnabled: body.useThinkingStyle,
						processingTime,
						documentHash,
						modelUsed: modelName
					},
					generatedBy: modelName,
					confidence: analysisResult.confidence || 0.85,
					createdBy: body.userId || null
				});
			} catch (dbError) {
				console.warn('Failed to store analysis in database:', dbError);
			}
		}

		return json({
			success: true,
			analysis: analysisResult,
			metadata: {
				model_used: modelName,
				processing_time: processingTime,
				thinking_enabled: body.useThinkingStyle || false,
				document_hash: documentHash,
				confidence: analysisResult.confidence || 0.85,
				timestamp: new Date().toISOString()
			},
			context: {
				document_type: body.documentType,
				analysis_type: body.analysisType,
				has_context: !!contextualInfo,
				case_context: caseContext
			}
		});

	} catch (error) {
		console.error('ðŸš¨ Analysis error:', error);
		return json({ 
			error: 'Analysis failed', 
			details: error instanceof Error ? error.message : 'Unknown error'
		}, { status: 500 });
	}
};

function buildEnhancedAnalysisPrompt(
	text: string, 
	analysisType: string, 
	documentType: string,
	useThinking: boolean,
	context: string,
	metadata: any
): string {
	const basePrompt = `Document Type: ${documentType}
Analysis Requested: ${analysisType}
Document Metadata: ${JSON.stringify(metadata, null, 2)}

Document Content:
${text}${context}

---`;

	if (!useThinking) {
		return `${basePrompt}

Please provide a structured analysis of this ${documentType} focusing on ${analysisType}. 

For legal documents, consider:
- Document authenticity and integrity
- Chain of custody (if applicable)
- Legal compliance and admissibility
- Key facts and evidence value
- Potential legal implications

Return results in JSON format with confidence scores.`;
	}

	return `${basePrompt}

Please analyze this ${documentType} with focus on ${analysisType}. Show your complete reasoning process using <|thinking|> tags, then provide your final structured analysis.

When using thinking style:
1. Show your step-by-step reasoning process
2. Consider legal implications and precedents
3. Evaluate evidence quality and admissibility
4. Assess chain of custody and procedural compliance
5. Identify any gaps, inconsistencies, or red flags
6. Consider alternative interpretations
7. Provide confidence levels for your conclusions

Format: Use <|thinking|>your detailed reasoning process</|thinking|> followed by your final analysis in JSON format.`;
}

function getEnhancedSystemPrompt(analysisType: string, useThinking: boolean): string {
	const baseSystem = `You are an expert legal document analyst with deep knowledge of:
- Criminal and civil procedure
- Evidence law and admissibility standards
- Chain of custody requirements
- Legal document authentication
- Case law and legal precedents
- Regulatory compliance standards
- Document forensics and verification

You specialize in ${analysisType} and provide accurate, professional legal analysis.`;

	if (!useThinking) {
		return `${baseSystem}

Provide concise, accurate analysis in structured JSON format. Focus on:
- Legal significance and implications
- Evidence quality and admissibility
- Procedural compliance
- Key findings and recommendations
- Confidence assessments`;
	}

	return `${baseSystem}

When using thinking style, show your reasoning process step-by-step using <|thinking|> tags before providing your final analysis. Your thinking process should include:

1. **Initial Assessment**: Document type, apparent authenticity, immediate observations
2. **Legal Framework**: Applicable laws, procedures, and standards
3. **Evidence Evaluation**: Quality, reliability, admissibility under relevant rules
4. **Procedural Review**: Chain of custody, proper collection, documentation
5. **Risk Assessment**: Potential challenges, weaknesses, or procedural issues
6. **Legal Implications**: How this impacts the case, prosecution strategy, defense arguments
7. **Confidence Analysis**: Degree of certainty in conclusions and recommendations

Always conclude with structured JSON output after your thinking process.`;
}

function parseAnalysisResponse(content: string, useThinking: boolean): any {
	if (!useThinking) {
		// Try to extract JSON from response
		try {
			const jsonMatch = content.match(/\{[\s\S]*\}/);
			return jsonMatch ? JSON.parse(jsonMatch[0]) : { 
				raw_analysis: content,
				confidence: 0.8,
				type: 'quick_analysis'
			};
		} catch {
			return { 
				raw_analysis: content,
				confidence: 0.7,
				type: 'quick_analysis'
			};
		}
	}

	// Parse thinking-style response
	const thinkingMatch = content.match(/<\|thinking\|>([\s\S]*?)<\/\|thinking\|>/);
	const thinking = thinkingMatch ? thinkingMatch[1].trim() : '';
	
	// Extract final analysis after thinking section
	const afterThinking = content.replace(/<\|thinking\|>[\s\S]*?<\/\|thinking\|>/, '').trim();
	
	try {
		const jsonMatch = afterThinking.match(/\{[\s\S]*\}/);
		const analysis = jsonMatch ? JSON.parse(jsonMatch[0]) : { raw_analysis: afterThinking };
		
		return {
			thinking,
			analysis,
			reasoning_steps: extractReasoningSteps(thinking),
			confidence: analysis.confidence || calculateConfidence(thinking, analysis),
			type: 'thinking_analysis'
		};
	} catch {
		return {
			thinking,
			analysis: { raw_analysis: afterThinking },
			reasoning_steps: extractReasoningSteps(thinking),
			confidence: calculateConfidence(thinking, { raw_analysis: afterThinking }),
			type: 'thinking_analysis'
		};
	}
}

function extractReasoningSteps(thinking: string): string[] {
	return thinking
		.split('\n')
		.filter(line => line.trim().match(/^\d+\./) || line.trim().startsWith('-') || line.trim().startsWith('*'))
		.map(step => step.trim())
		.slice(0, 10); // Limit to 10 steps for UI
}

function calculateConfidence(thinking: string, analysis: any): number {
	let score = 0.6;
	
	// Boost for detailed thinking
	if (thinking.length > 300) score += 0.2;
	if (thinking.includes('evidence') || thinking.includes('legal')) score += 0.1;
	if (thinking.includes('chain of custody') || thinking.includes('admissible')) score += 0.1;
	if (thinking.includes('confidence') || thinking.includes('assessment')) score += 0.05;
	
	// Boost for structured analysis
	if (analysis.key_findings) score += 0.1;
	if (analysis.recommendations) score += 0.1;
	if (analysis.legal_implications) score += 0.05;
	
	return Math.min(0.95, score);
}

function generateFallbackAnalysis(text: string, analysisType: string, useThinking: boolean): string {
	const basicAnalysis = {
		analysis_type: analysisType,
		document_summary: text.substring(0, 200) + '...',
		key_findings: ['Document processed successfully', 'Manual review recommended'],
		confidence: 0.6,
		recommendations: ['Verify document authenticity', 'Review with legal team'],
		status: 'fallback_analysis'
	};

	if (!useThinking) {
		return JSON.stringify(basicAnalysis, null, 2);
	}

	return `<|thinking|>
The AI analysis system is currently unavailable, so I'm providing a basic fallback analysis:

1. Document Type Assessment: This appears to be a legal document requiring ${analysisType}
2. Content Overview: The document contains ${text.length} characters of text
3. Basic Evaluation: Without full AI processing, I can only provide basic structure analysis
4. Limitations: This fallback analysis has limited capabilities compared to full AI processing
5. Recommendations: Manual review by legal professionals is strongly recommended
</|thinking|>

${JSON.stringify(basicAnalysis, null, 2)}`;
}

// GET endpoint for retrieving analysis history
export const GET: RequestHandler = async ({ url }) => {
	try {
		const evidenceId = url.searchParams.get('evidenceId');
		const caseId = url.searchParams.get('caseId');
		const limit = parseInt(url.searchParams.get('limit') || '10');

		let analyses: any[] = [];

		if (evidenceId || caseId) {
			// Query ai_reports table for analysis history
			const query = evidenceId 
				? db.select().from(aiReports).where(eq(aiReports.metadata, { documentId: evidenceId }))
				: db.select().from(aiReports).where(eq(aiReports.caseId, caseId!));
			
			analyses = await query.limit(limit);
		}

		return json({
			success: true,
			analyses: analyses.map(a => ({
				id: a.id,
				type: a.reportType,
				title: a.title,
				confidence: a.confidence,
				createdAt: a.createdAt,
				generatedBy: a.generatedBy,
				metadata: a.metadata
			})),
			total: analyses.length
		});

	} catch (error) {
		console.error('ðŸš¨ Failed to retrieve analysis history:', error);
		return json({ 
			error: 'Failed to retrieve analysis history' 
		}, { status: 500 });
	}
};

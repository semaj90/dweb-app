<script lang="ts">
  import OnboardingOverlay from "$lib/components/onboarding/OnboardingOverlay.svelte";
  import { Button } from "$lib/components/ui/button";
  import Tooltip from "$lib/components/ui/Tooltip.svelte";
  import { notifications } from "$lib/stores/notification";
  import {
    Activity,
    AlertTriangle,
    BarChart3,
    CheckCircle,
    Clock,
    Database,
    Download,
    Eye,
    FileText,
    HelpCircle,
    Plus,
    RefreshCw,
    Search,
    Settings,
    Shield,
    TrendingUp,
    Upload,
    Users,
    Zap,
  } from "lucide-svelte";
  import { onMount } from "svelte";

  import type { PageData } from "./$types";
  // ... other imports ...
  export let data: PageData;
  // Use recentCases and recentCriminals from server load
  const { recentCases, recentCriminals } = data;

  // Dashboard state
  let showOnboarding = false;
  let isRefreshing = false;
  let lastUpdated = new Date();

  // System stats
  let systemStats = {
    cases: { total: 0, active: 0, closed: 0, trend: 0 },
    evidence: { total: 0, verified: 0, pending: 0, trend: 0 },
    users: { total: 0, active: 0, trend: 0 },
    alerts: { critical: 0, warning: 0, info: 0 },
  };

  // Hash verification stats
  let hashStats: {
    total: number;
    successful: number;
    failed: number;
    recent: any[];
  } = {
    total: 0,
    successful: 0,
    failed: 0,
    recent: [],
  };

  // Performance metrics
  let performanceStats = {
    systemHealth: 95,
    databaseStatus: "healthy",
    apiResponseTime: 120,
    uptime: "99.9%",
    storageUsed: 65,
  };

  let loadingStats = true;
  let loadingSystem = true;

  // Onboarding steps
  const onboardingSteps = [
    {
      id: "welcome",
      title: "Welcome to Detective Mode",
      description:
        "This dashboard gives you an overview of all your cases, evidence, and system status.",
      position: "center" as const,
      type: "info" as const,
    },
    {
      id: "recent-cases",
      title: "Recent Cases",
      description:
        "View and access your most recently created or updated cases here.",
      targetSelector: ".dashboard-block:nth-child(3)",
      position: "top" as const,
      type: "info" as const,
    },
    {
      id: "evidence-integrity",
      title: "Evidence Integrity",
      description:
        "Monitor the integrity of your evidence files with hash verification.",
      targetSelector: ".dashboard-block:nth-child(1)",
      position: "bottom" as const,
      type: "info" as const,
    },
    {
      id: "quick-actions",
      title: "Quick Actions",
      description:
        "Use these buttons to quickly create new cases or access important features.",
      targetSelector: ".quick-actions",
      position: "bottom" as const,
      type: "action" as const,
    },
    {
      id: "complete",
      title: "You're All Set!",
      description:
        "You now know the basics of your dashboard. Explore the features and start managing your cases!",
      position: "center" as const,
      type: "success" as const,
    },
  ];

  onMount(async () => {
    await Promise.all([
      loadHashStats(),
      loadSystemStats(),
      loadPerformanceStats(),
    ]);

    // Check if user needs onboarding
    const hasSeenOnboarding = localStorage.getItem("dashboard-onboarding-seen");
    if (!hasSeenOnboarding) {
      showOnboarding = true;
    }
  });

  async function loadHashStats() {
    try {
      const response = await fetch("/api/evidence/hash/history?limit=5");
      if (response.ok) {
        const data = await response.json();
        hashStats = {
          total: data.stats.total,
          successful: data.stats.successful,
          failed: data.stats.failed,
          recent: data.verifications.slice(0, 5),
        };
      }
    } catch (err) {
      console.error("Error loading hash verification stats:", err);
    } finally {
      loadingStats = false;
    }
  }

  async function loadSystemStats() {
    try {
      // Mock system stats - replace with actual API calls
      systemStats = {
        cases: {
          total: recentCases?.length || 0,
          active: recentCases?.filter((c) => c.status === "Active").length || 0,
          closed: recentCases?.filter((c) => c.status === "Closed").length || 0,
          trend: 12,
        },
        evidence: {
          total: hashStats.total,
          verified: hashStats.successful,
          pending: hashStats.total - hashStats.successful,
          trend: 8,
        },
        users: {
          total: recentCriminals?.length || 0,
          active:
            recentCriminals?.filter((p) => p.status === "Active").length || 0,
          trend: 5,
        },
        alerts: { critical: 2, warning: 5, info: 12 },
      };
    } catch (err) {
      console.error("Error loading system stats:", err);
    } finally {
      loadingSystem = false;
    }
  }

  async function loadPerformanceStats() {
    try {
      // Mock performance stats - replace with actual monitoring
      performanceStats = {
        systemHealth: Math.floor(Math.random() * 10) + 90,
        databaseStatus: Math.random() > 0.1 ? "healthy" : "warning",
        apiResponseTime: Math.floor(Math.random() * 100) + 80,
        uptime: "99.9%",
        storageUsed: Math.floor(Math.random() * 30) + 60,
      };
    } catch (err) {
      console.error("Error loading performance stats:", err);
    }
  }

  async function refreshDashboard() {
    isRefreshing = true;
    loadingStats = true;
    loadingSystem = true;

    await Promise.all([
      loadHashStats(),
      loadSystemStats(),
      loadPerformanceStats(),
    ]);

    lastUpdated = new Date();
    isRefreshing = false;

    notifications.add({
      type: "success",
      title: "Dashboard Refreshed",
      message: "All data has been updated",
    });
  }

  function handleOnboardingComplete() {
    localStorage.setItem("dashboard-onboarding-seen", "true");
    notifications.add({
      type: "success",
      title: "Welcome Complete!",
      message: "You can access this tour anytime from the help menu.",
    });
  }

  function startOnboardingTour() {
    showOnboarding = true;
  }

  function getHealthColor(health: number) {
    if (health >= 90) return "text-green-600";
    if (health >= 70) return "text-yellow-600";
    return "text-red-600";
  }

  function getStatusColor(status: string) {
    switch (status) {
      case "healthy":
        return "text-green-600";
      case "warning":
        return "text-yellow-600";
      case "error":
        return "text-red-600";
      default:
        return "text-gray-600";
    }
  }
</script>

<section class="mx-auto px-4 max-w-7xl" role="main" aria-label="Dashboard">
  <!-- Header -->
  <div class="mx-auto px-4 max-w-7xl">
    <div class="mx-auto px-4 max-w-7xl">
      <h1>Detective Mode Dashboard</h1>
      <p class="mx-auto px-4 max-w-7xl">
        Welcome to your command center. Monitor cases, evidence, and system
        health.
      </p>
    </div>

    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <Tooltip content="Create new case">
          <a href="/cases/new" class="mx-auto px-4 max-w-7xl">
            <Button>
              <Plus class="mx-auto px-4 max-w-7xl" />
              New Case
            </Button>
          </a></Tooltip
        >

        <Tooltip content="Upload evidence">
          <a href="/evidence" class="mx-auto px-4 max-w-7xl">
            <Button variant="secondary">
              <Upload class="mx-auto px-4 max-w-7xl" />
              Evidence
            </Button>
          </a></Tooltip
        >

        <Tooltip content="Search records">
          <a href="/search" class="mx-auto px-4 max-w-7xl">
            <Button variant="secondary">
              <Search class="mx-auto px-4 max-w-7xl" />
              Search
            </Button>
          </a></Tooltip
        >
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <Tooltip content="Start onboarding tour">
          <Button
            variant="ghost"
            size="sm"
            on:click={() => startOnboardingTour()}
            aria-label="Start help tour"
          >
            <HelpCircle class="mx-auto px-4 max-w-7xl" />
          </Button>
        </Tooltip>

        <Tooltip content="Dashboard settings">
          <a href="/settings" class="mx-auto px-4 max-w-7xl">
            <Button variant="ghost" size="sm" aria-label="Dashboard settings">
              <Settings class="mx-auto px-4 max-w-7xl" />
            </Button>
          </a>
        </Tooltip>

        <Tooltip content="Refresh dashboard">
          <Button
            variant="ghost"
            size="sm"
            on:click={() => refreshDashboard()}
            disabled={isRefreshing}
            aria-label="Refresh dashboard data"
          >
            <span class:animate-spin={isRefreshing}>
              <RefreshCw class="mx-auto px-4 max-w-7xl" />
            </span>
          </Button>
        </Tooltip>
      </div>
    </div>
  </div>

  <!-- Last updated indicator -->
  <div class="mx-auto px-4 max-w-7xl">
    <Clock class="mx-auto px-4 max-w-7xl" />
    Last updated: {lastUpdated.toLocaleTimeString()}
  </div>

  <!-- Key Metrics Row -->
  <div class="mx-auto px-4 max-w-7xl">
    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <Activity class="mx-auto px-4 max-w-7xl" />
        <span>Active Cases</span>
      </div>
      <div class="mx-auto px-4 max-w-7xl">{systemStats.cases.active}</div>
      <div class="mx-auto px-4 max-w-7xl">
        <TrendingUp class="mx-auto px-4 max-w-7xl" />
        +{systemStats.cases.trend}% this month
      </div>
    </div>

    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <Shield class="mx-auto px-4 max-w-7xl" />
        <span>Evidence Verified</span>
      </div>
      <div class="mx-auto px-4 max-w-7xl">{hashStats.successful}</div>
      <div class="mx-auto px-4 max-w-7xl">
        {Math.round((hashStats.successful / hashStats.total) * 100) || 0}%
        success rate
      </div>
    </div>

    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <Users class="mx-auto px-4 max-w-7xl" />
        <span>Active Persons</span>
      </div>
      <div class="mx-auto px-4 max-w-7xl">{systemStats.users.active}</div>
      <div class="mx-auto px-4 max-w-7xl">
        {systemStats.users.total} total
      </div>
    </div>

    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <AlertTriangle class="mx-auto px-4 max-w-7xl" />
        <span>Alerts</span>
      </div>
      <div class="mx-auto px-4 max-w-7xl">
        {systemStats.alerts.critical + systemStats.alerts.warning}
      </div>
      <div class="mx-auto px-4 max-w-7xl">
        {systemStats.alerts.critical} critical, {systemStats.alerts.warning} warnings
      </div>
    </div>
  </div>

  <!-- System Health Panel -->
  <div class="mx-auto px-4 max-w-7xl">
    <h2>System Health</h2>
    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <div class="mx-auto px-4 max-w-7xl">
          <Database class="mx-auto px-4 max-w-7xl" />
          Database
        </div>
        <div
          class="mx-auto px-4 max-w-7xl"
        >
          {performanceStats.databaseStatus}
        </div>
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <div class="mx-auto px-4 max-w-7xl">
          <Zap class="mx-auto px-4 max-w-7xl" />
          Performance
        </div>
        <div
          class="mx-auto px-4 max-w-7xl"
        >
          {performanceStats.systemHealth}%
        </div>
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <div class="mx-auto px-4 max-w-7xl">
          <Clock class="mx-auto px-4 max-w-7xl" />
          Response Time
        </div>
        <div class="mx-auto px-4 max-w-7xl">
          {performanceStats.apiResponseTime}ms
        </div>
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <div class="mx-auto px-4 max-w-7xl">
          <Activity class="mx-auto px-4 max-w-7xl" />
          Uptime
        </div>
        <div class="mx-auto px-4 max-w-7xl">
          {performanceStats.uptime}
        </div>
      </div>
    </div>

    <!-- Storage usage -->
    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <span>Storage Usage</span>
        <span>{performanceStats.storageUsed}%</span>
      </div>
      <div class="mx-auto px-4 max-w-7xl">
        <div
          class="mx-auto px-4 max-w-7xl"
          style="width: {performanceStats.storageUsed}%"
          class:warning={performanceStats.storageUsed > 80}
          class:critical={performanceStats.storageUsed > 90}
        ></div>
      </div>
    </div>
  </div>

  <!-- Security Monitoring Section -->
  <div class="mx-auto px-4 max-w-7xl">
    <div class="mx-auto px-4 max-w-7xl">
      <h2>
        <Shield class="mx-auto px-4 max-w-7xl" />
        Security Monitoring
      </h2>
      <a href="/security" class="mx-auto px-4 max-w-7xl">
        <Button variant="ghost" size="sm" aria-label="View security dashboard">
          <Eye class="mx-auto px-4 max-w-7xl" />
        </Button>
      </a>
    </div>

    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <div class="mx-auto px-4 max-w-7xl">
          <AlertTriangle class="mx-auto px-4 max-w-7xl" />
        </div>
        <div class="mx-auto px-4 max-w-7xl">
          <span class="mx-auto px-4 max-w-7xl">Critical Alerts</span>
          <span class="mx-auto px-4 max-w-7xl">{systemStats.alerts.critical}</span>
        </div>
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <div class="mx-auto px-4 max-w-7xl">
          <Clock class="mx-auto px-4 max-w-7xl" />
        </div>
        <div class="mx-auto px-4 max-w-7xl">
          <span class="mx-auto px-4 max-w-7xl">Recent Events</span>
          <span class="mx-auto px-4 max-w-7xl">12</span>
        </div>
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <div class="mx-auto px-4 max-w-7xl">
          <Users class="mx-auto px-4 max-w-7xl" />
        </div>
        <div class="mx-auto px-4 max-w-7xl">
          <span class="mx-auto px-4 max-w-7xl">Active Sessions</span>
          <span class="mx-auto px-4 max-w-7xl">3</span>
        </div>
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <div class="mx-auto px-4 max-w-7xl">
          <CheckCircle class="mx-auto px-4 max-w-7xl" />
        </div>
        <div class="mx-auto px-4 max-w-7xl">
          <span class="mx-auto px-4 max-w-7xl">System Status</span>
          <span class="mx-auto px-4 max-w-7xl">Secure</span>
        </div>
      </div>
    </div>

    <div class="mx-auto px-4 max-w-7xl">
      <a href="/security" class="mx-auto px-4 max-w-7xl">
        <Button size="sm">
          <Shield class="mx-auto px-4 max-w-7xl" />
          View Security Dashboard
        </Button>
      </a>
    </div>
  </div>

  <div class="mx-auto px-4 max-w-7xl">
    <!-- Evidence Integrity Stats -->
    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <h2>
          <Shield class="mx-auto px-4 max-w-7xl" />
          Evidence Integrity
        </h2>
        <a href="/evidence/hash" class="mx-auto px-4 max-w-7xl">
          <Button
            variant="ghost"
            size="sm"
            aria-label="View all hash verifications"
          >
            <Eye class="mx-auto px-4 max-w-7xl" />
          </Button>
        </a>
      </div>

      {#if loadingStats}
        <div class="mx-auto px-4 max-w-7xl">
          <RefreshCw class="mx-auto px-4 max-w-7xl" />
          Loading...
        </div>
      {:else}
        <div class="mx-auto px-4 max-w-7xl">
          <div class="mx-auto px-4 max-w-7xl">
            <div class="mx-auto px-4 max-w-7xl">{hashStats.total}</div>
            <div class="mx-auto px-4 max-w-7xl">Total Verifications</div>
          </div>
          <div class="mx-auto px-4 max-w-7xl">
            <div class="mx-auto px-4 max-w-7xl">{hashStats.successful}</div>
            <div class="mx-auto px-4 max-w-7xl">Successful</div>
          </div>
          <div class="mx-auto px-4 max-w-7xl">
            <div class="mx-auto px-4 max-w-7xl">{hashStats.failed}</div>
            <div class="mx-auto px-4 max-w-7xl">Failed</div>
          </div>
          <div class="mx-auto px-4 max-w-7xl">
            <div class="mx-auto px-4 max-w-7xl">
              {hashStats.total > 0
                ? Math.round((hashStats.successful / hashStats.total) * 100)
                : 0}%
            </div>
            <div class="mx-auto px-4 max-w-7xl">Success Rate</div>
          </div>
        </div>
        <div class="mx-auto px-4 max-w-7xl">
          <a href="/evidence/hash">
            <Button variant="outline" size="sm">
              View Hash Verification →
            </Button>
          </a>
        </div>
      {/if}
    </div>

    <!-- Recent Hash Verifications -->
    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <h2>
          <CheckCircle class="mx-auto px-4 max-w-7xl" />
          Recent Verifications
        </h2>
        <a href="/api/evidence/hash/history" class="mx-auto px-4 max-w-7xl">
          <Button
            variant="ghost"
            size="sm"
            aria-label="Download verification history"
          >
            <Download class="mx-auto px-4 max-w-7xl" />
          </Button>
        </a>
      </div>

      {#if loadingStats}
        <div class="mx-auto px-4 max-w-7xl">
          <RefreshCw class="mx-auto px-4 max-w-7xl" />
          Loading...
        </div>
      {:else if hashStats.recent.length > 0}
        <ul class="mx-auto px-4 max-w-7xl" role="list">
          {#each hashStats.recent as verification}
            <li class="mx-auto px-4 max-w-7xl" role="listitem">
              <div class="mx-auto px-4 max-w-7xl">
                <span class="mx-auto px-4 max-w-7xl"
                  >{verification.evidenceTitle ||
                    verification.fileName ||
                    "Unknown"}</span
                >
                <span
                  class="mx-auto px-4 max-w-7xl"
                  class:success={verification.result}
                  class:failed={!verification.result}
                  aria-label={verification.result
                    ? "Verification successful"
                    : "Verification failed"}
                >
                  {verification.result ? "✅" : "❌"}
                </span>
              </div>
              <div class="mx-auto px-4 max-w-7xl">
                <code class="mx-auto px-4 max-w-7xl"
                  >{verification.verifiedHash.substring(0, 8)}...</code
                >
                <span class="mx-auto px-4 max-w-7xl">
                  {new Date(verification.verifiedAt).toLocaleDateString()}
                </span>
              </div>
            </li>
          {/each}
        </ul>
        <div class="mx-auto px-4 max-w-7xl">
          <a href="/api/evidence/hash/history">
            <Button variant="ghost" size="sm">View All History →</Button>
          </a>
        </div>
      {:else}
        <div class="mx-auto px-4 max-w-7xl">
          <AlertTriangle class="mx-auto px-4 max-w-7xl" />
          <p>No hash verifications yet.</p>
          <div class="mx-auto px-4 max-w-7xl">
            <a href="/evidence/hash">
              <Button size="sm">Start Verifying →</Button>
            </a>
          </div>
        </div>
      {/if}
    </div>

    <!-- Recent Cases -->
    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <h2>
          <FileText class="mx-auto px-4 max-w-7xl" />
          Recent Cases
        </h2>
        <a href="/cases" class="mx-auto px-4 max-w-7xl">
          <Button variant="ghost" size="sm" aria-label="View all cases">
            <Eye class="mx-auto px-4 max-w-7xl" />
          </Button>
        </a>
      </div>

      {#if recentCases && recentCases.length > 0}
        <ul class="mx-auto px-4 max-w-7xl" role="list">
          {#each recentCases as c}
            <li class="mx-auto px-4 max-w-7xl" role="listitem">
              <div class="mx-auto px-4 max-w-7xl">
                <strong class="mx-auto px-4 max-w-7xl">{c.title}</strong>
                <span class="mx-auto px-4 max-w-7xl"
                  >{c.status}</span
                >
              </div>
              <div class="mx-auto px-4 max-w-7xl">
                <span class="mx-auto px-4 max-w-7xl">{c.caseNumber}</span>
                <span class="mx-auto px-4 max-w-7xl">
                  {c.createdAt
                    ? new Date(c.createdAt).toLocaleDateString()
                    : "Unknown"}
                </span>
              </div>
              {#if c.description}
                <div class="mx-auto px-4 max-w-7xl">{c.description}</div>
              {/if}
              <div class="mx-auto px-4 max-w-7xl">
                <a href="/cases/{c.id}">
                  <Button variant="ghost" size="sm">View Case →</Button>
                </a>
              </div>
            </li>
          {/each}
        </ul>
        <div class="mx-auto px-4 max-w-7xl">
          <a href="/cases">
            <Button variant="outline" size="sm">View All Cases →</Button>
          </a>
        </div>
      {:else}
        <div class="mx-auto px-4 max-w-7xl">
          <FileText class="mx-auto px-4 max-w-7xl" />
          <p>No recent cases found.</p>
          <div class="mx-auto px-4 max-w-7xl">
            <a href="/cases/new">
              <Button size="sm">Create First Case →</Button>
            </a>
          </div>
        </div>
      {/if}
    </div>

    <!-- Recent Persons of Interest -->
    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <h2>
          <Users class="mx-auto px-4 max-w-7xl" />
          Recent Persons of Interest
        </h2>
        <a href="/criminals" class="mx-auto px-4 max-w-7xl">
          <Button
            variant="ghost"
            size="sm"
            aria-label="View all persons of interest"
          >
            <Eye class="mx-auto px-4 max-w-7xl" />
          </Button>
        </a>
      </div>

      {#if recentCriminals && recentCriminals.length > 0}
        <ul class="mx-auto px-4 max-w-7xl" role="list">
          {#each recentCriminals as p}
            <li class="mx-auto px-4 max-w-7xl" role="listitem">
              <div class="mx-auto px-4 max-w-7xl">
                <strong class="mx-auto px-4 max-w-7xl">{p.firstName} {p.lastName}</strong>
                <span class="mx-auto px-4 max-w-7xl"
                  >{p.status}</span
                >
              </div>
              <div class="mx-auto px-4 max-w-7xl">
                <span class="mx-auto px-4 max-w-7xl">
                  Added: {p.createdAt
                    ? new Date(p.createdAt).toLocaleDateString()
                    : "Unknown"}
                </span>
              </div>
              {#if Array.isArray(p.aliases) && p.aliases.length > 0}
                <div class="mx-auto px-4 max-w-7xl">
                  Aliases: {p.aliases.join(", ")}
                </div>
              {/if}
              <div class="mx-auto px-4 max-w-7xl">
                <a href="/criminals/{p.id}">
                  <Button variant="ghost" size="sm">View Profile →</Button>
                </a>
              </div>
            </li>
          {/each}
        </ul>
        <div class="mx-auto px-4 max-w-7xl">
          <a href="/criminals">
            <Button variant="outline" size="sm">View All Persons →</Button>
          </a>
        </div>
      {:else}
        <div class="mx-auto px-4 max-w-7xl">
          <Users class="mx-auto px-4 max-w-7xl" />
          <p>No recent persons of interest found.</p>
          <div class="mx-auto px-4 max-w-7xl">
            <a href="/criminals/new">
              <Button size="sm">Add Person →</Button>
            </a>
          </div>
        </div>
      {/if}
    </div>

    <!-- Analytics Panel -->
    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <h2>
          <BarChart3 class="mx-auto px-4 max-w-7xl" />
          Analytics Overview
        </h2>
        <a href="/analytics" class="mx-auto px-4 max-w-7xl">
          <Button
            variant="ghost"
            size="sm"
            aria-label="View detailed analytics"
          >
            <Eye class="mx-auto px-4 max-w-7xl" />
          </Button>
        </a>
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <div class="mx-auto px-4 max-w-7xl">
          <div class="mx-auto px-4 max-w-7xl">Cases This Month</div>
          <div class="mx-auto px-4 max-w-7xl">{systemStats.cases.active}</div>
          <div class="mx-auto px-4 max-w-7xl">
            +{systemStats.cases.trend}%
          </div>
        </div>

        <div class="mx-auto px-4 max-w-7xl">
          <div class="mx-auto px-4 max-w-7xl">Evidence Processed</div>
          <div class="mx-auto px-4 max-w-7xl">{hashStats.total}</div>
          <div class="mx-auto px-4 max-w-7xl">
            +{systemStats.evidence.trend}%
          </div>
        </div>

        <div class="mx-auto px-4 max-w-7xl">
          <div class="mx-auto px-4 max-w-7xl">Resolution Rate</div>
          <div class="mx-auto px-4 max-w-7xl">
            {Math.round(
              (systemStats.cases.closed / (systemStats.cases.total || 1)) * 100
            )}%
          </div>
          <div class="mx-auto px-4 max-w-7xl">vs last month</div>
        </div>
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <a href="/analytics">
          <Button variant="outline" size="sm">View Detailed Reports →</Button>
        </a>
      </div>
    </div>

    <!-- Quick Access Panel -->
    <div class="mx-auto px-4 max-w-7xl">
      <div class="mx-auto px-4 max-w-7xl">
        <h2>
          <Zap class="mx-auto px-4 max-w-7xl" />
          Quick Access
        </h2>
      </div>

      <div class="mx-auto px-4 max-w-7xl">
        <a href="/cases/new" class="mx-auto px-4 max-w-7xl">
          <Button>
            <Plus class="mx-auto px-4 max-w-7xl" />
            <span>New Case</span>
          </Button>
        </a>

        <a href="/evidence" class="mx-auto px-4 max-w-7xl">
          <Button variant="secondary">
            <Upload class="mx-auto px-4 max-w-7xl" />
            <span>Upload Evidence</span>
          </Button>
        </a>

        <a href="/search" class="mx-auto px-4 max-w-7xl">
          <Button variant="secondary">
            <Search class="mx-auto px-4 max-w-7xl" />
            <span>Search Records</span>
          </Button>
        </a>

        <a href="/reports" class="mx-auto px-4 max-w-7xl">
          <Button variant="secondary">
            <FileText class="mx-auto px-4 max-w-7xl" />
            <span>Generate Report</span>
          </Button>
        </a>

        <a href="/analytics" class="mx-auto px-4 max-w-7xl">
          <Button variant="secondary">
            <BarChart3 class="mx-auto px-4 max-w-7xl" />
            <span>Analytics</span>
          </Button>
        </a>

        <a href="/settings" class="mx-auto px-4 max-w-7xl">
          <Button variant="secondary">
            <Settings class="mx-auto px-4 max-w-7xl" />
            <span>Settings</span>
          </Button>
        </a>
      </div>
    </div>
  </div>
</section>

<!-- Onboarding Overlay -->
<OnboardingOverlay
  bind:open={showOnboarding}
  steps={onboardingSteps}
  autoProgress={false}
  allowSkip={true}
  on:complete={handleOnboardingComplete}
/>

<style>
  .dashboard.container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 1.5rem;
  }

  /* Dashboard Header */
  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    gap: 2rem;
  }

  .header-title h1 {
    font-size: 2rem;
    font-weight: 700;
    color: #111827;
    margin: 0 0 0.5rem 0;
  }

  .subtitle {
    color: #6b7280;
    margin: 0;
    font-size: 1rem;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .quick-actions {
    display: flex;
    gap: 0.75rem;
  }

  .dashboard-controls {
    display: flex;
    gap: 0.5rem;
    padding-left: 1rem;
    border-left: 1px solid #e5e7eb;
  }

  .last-updated {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 2rem;
  }

  /* Metrics Grid */
  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .metric-card {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 1.5rem;
    transition: all 0.2s ease;
  }

  .metric-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .metric-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
    color: #64748b;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .metric-value {
    font-size: 2.25rem;
    font-weight: 700;
    color: #1e293b;
    margin-bottom: 0.5rem;
  }

  .metric-value.critical {
    color: #dc2626;
  }

  .metric-trend {
    font-size: 0.875rem;
    color: #64748b;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .metric-trend.positive {
    color: #059669;
  }

  /* System Health Panel */
  .system-health-panel {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .system-health-panel h2 {
    font-size: 1.125rem;
    font-weight: 600;
    color: #111827;
    margin: 0 0 1.5rem 0;
  }

  .health-metrics {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .health-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: #f9fafb;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
  }

  .health-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
  }

  .health-value {
    font-weight: 600;
    font-size: 0.875rem;
  }

  .storage-usage {
    margin-top: 1rem;
  }

  .storage-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
    margin-bottom: 0.5rem;
  }

  .storage-bar {
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
  }

  .storage-fill {
    height: 100%;
    background: #3b82f6;
    transition: width 0.3s ease;
  }

  .storage-fill.warning {
    background: #f59e0b;
  }

  .storage-fill.critical {
    background: #ef4444;
  }

  /* Security Monitoring Section */
  .security-monitoring-section {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .security-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .security-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .security-metric {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    background: #f9fafb;
    border-radius: 8px;
    border: 1px solid #e5e7eb;
  }

  .security-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    border-radius: 9999px;
  }

  .security-icon.critical {
    background: #fee2e2;
    color: #dc2626;
  }

  .security-icon.warning {
    background: #fffbeb;
    color: #f59e0b;
  }

  .security-icon.info {
    background: #e0f2fe;
    color: #0ea5e9;
  }

  .security-icon.success {
    background: #f0fdf4;
    color: #15803d;
  }

  .security-content {
    flex: 1;
  }

  .security-label {
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 0.25rem;
  }

  .security-value {
    font-weight: 600;
    font-size: 1rem;
    color: #111827;
  }

  /* Dashboard Sections */
  .dashboard-sections {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 1.5rem;
  }

  .dashboard-block {
    background: white;
    border-radius: 12px;
    border: 1px solid #e5e7eb;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }

  .dashboard-block:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .block-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .block-header h2 {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.125rem;
    font-weight: 600;
    color: #111827;
    margin: 0;
  }

  /* Stats Grid */
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .stat {
    text-align: center;
    padding: 1rem;
    background: rgba(0, 0, 0, 0.02);
    border-radius: 8px;
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    font-size: 0.8rem;
    opacity: 0.7;
    font-weight: 500;
  }

  .text-success {
    color: #10b981;
  }

  .text-warning {
    color: #f59e0b;
  }

  /* Verification list */
  .verification-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  .verification-item {
    padding: 0.75rem 0;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  }
  .verification-item:last-child {
    border-bottom: none;
  }
  .verification-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.25rem;
  }
  .evidence-name {
    font-weight: 500;
    font-size: 0.9rem;
  }
  .verification-badge.success {
    color: #10b981;
  }
  .verification-badge.failed {
    color: #ef4444;
  }
  .verification-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
    opacity: 0.7;
  }
  .hash-short {
    font-family: monospace;
    background: rgba(0, 0, 0, 0.05);
    padding: 0.1rem 0.3rem;
    border-radius: 0.25rem;
  }

  /* Security Monitoring Section */
  .security-monitoring-section {
    background: white;
    border-radius: 0.75rem;
    border: 1px solid #e5e7eb;
    padding: 1.5rem;
    margin-bottom: 2rem;
  }

  .security-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .security-header h2 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.25rem;
    font-weight: 600;
    color: #111827;
    margin: 0;
  }

  .security-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .security-metric {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background: #f9fafb;
    border-radius: 0.5rem;
    border: 1px solid #e5e7eb;
  }

  .security-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 0.5rem;
    flex-shrink: 0;
  }

  .security-icon.critical {
    background: #fef2f2;
    color: #dc2626;
  }

  .security-icon.warning {
    background: #fffbeb;
    color: #d97706;
  }

  .security-icon.info {
    background: #eff6ff;
    color: #2563eb;
  }

  .security-icon.success {
    background: #f0fdf4;
    color: #16a34a;
  }

  .security-content {
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .security-label {
    font-size: 0.875rem;
    color: #6b7280;
    margin-bottom: 0.25rem;
  }

  .security-value {
    font-size: 1.125rem;
    font-weight: 600;
    color: #111827;
  }

  .security-actions {
    display: flex;
    justify-content: center;
    padding-top: 1rem;
    border-top: 1px solid #e5e7eb;
  }

  /* Dark mode support for security section */
  @media (prefers-color-scheme: dark) {
    .security-monitoring-section {
      background: #1f2937;
      border-color: #374151;
    }

    .security-header h2 {
      color: #f9fafb;
    }

    .security-metric {
      background: #111827;
      border-color: #374151;
    }

    .security-label {
      color: #9ca3af;
    }

    .security-value {
      color: #f9fafb;
    }

    .security-actions {
      border-color: #374151;
    }
  }

  /* Buttons */
  .btn {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s;
  }
  .btn-sm {
    padding: 0.25rem 0.75rem;
    font-size: 0.8rem;
  }
  .btn-outline {
    border: 1px solid #d1d5db;
    color: #374151;
    background: transparent;
  }
  .btn-outline:hover {
    background: #f9fafb;
  }
  .btn-ghost {
    color: #6b7280;
    background: transparent;
  }
  .btn-ghost:hover {
    background: rgba(0, 0, 0, 0.05);
  }
  .btn-primary {
    background: #3b82f6;
    color: white;
  }
  .btn-primary:hover {
    background: #2563eb;
  }

  .loading-spinner {
    text-align: center;
    padding: 2rem;
    opacity: 0.6;
  }

  .mt-3 {
    margin-top: 0.75rem;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .analytics-panel {
      grid-column: span 1;
    }

    .analytics-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .quick-access-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .dashboard.container {
      padding: 1rem;
    }

    .dashboard-header {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }

    .header-actions {
      flex-direction: column;
      gap: 1rem;
    }

    .dashboard-controls {
      padding-left: 0;
      border-left: none;
      border-top: 1px solid #e5e7eb;
      padding-top: 1rem;
      justify-content: space-between;
    }

    .metrics-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }

    .health-metrics {
      grid-template-columns: 1fr;
    }

    .dashboard-sections {
      grid-template-columns: 1fr;
    }

    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
    }

    .analytics-grid {
      grid-template-columns: 1fr;
    }

    .quick-access-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 480px) {
    .metrics-grid {
      grid-template-columns: 1fr;
    }

    .quick-actions {
      flex-direction: column;
      width: 100%;
    }

    .quick-access-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .dashboard.container {
      background: #0f172a;
      color: #f1f5f9;
    }

    .dashboard-block,
    .system-health-panel {
      background: #1e293b;
      border-color: #334155;
    }

    .metric-card {
      background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
      border-color: #475569;
    }

    .header-title h1 {
      color: #f1f5f9;
    }

    .block-header h2 {
      color: #f1f5f9;
    }

    .case-title,
    .person-name {
      color: #f1f5f9;
    }

    .health-item,
    .stat,
    .analytics-item {
      background: #334155;
      border-color: #475569;
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .dashboard-block,
    .metric-card,
    .system-health-panel {
      border-width: 2px;
    }

    .verification-item,
    .case-item,
    .person-item {
      border-bottom-width: 2px;
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .metric-card:hover,
    .dashboard-block:hover {
      transform: none;
    }

    .storage-fill,
    .btn {
      transition: none !important;
    }
  }

  /* Focus indicators */
  .btn:focus,
  .dashboard-block:focus-within {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* Print styles */
  @media print {
    .dashboard-controls,
    .header-actions,
    .case-actions,
    .person-actions {
      display: none;
    }

    .dashboard-sections {
      grid-template-columns: 1fr;
    }

    .dashboard-block {
      break-inside: avoid;
      box-shadow: none;
      border: 1px solid #000;
    }
  }
</style>

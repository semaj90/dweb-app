syntax = "proto3";

package legal_ai;

option go_package = "github.com/your-org/legal-ai/proto";

// LegalAI service for document processing
service LegalAIService {
  rpc ProcessLegalDocument(DocumentRequest) returns (DocumentResponse);
  rpc AnalyzeLegalContent(ContentRequest) returns (ContentResponse);
  rpc GenerateEmbeddings(EmbeddingRequest) returns (EmbeddingResponse);
}

// Performance monitoring service
service PerformanceService {
  rpc GetPerformanceMetrics(MetricsRequest) returns (MetricsResponse);
  rpc GetSystemHealth(HealthRequest) returns (HealthResponse);
}

// Document processing request
message DocumentRequest {
  string document_id = 1;
  string content = 2;
  string document_type = 3;
  map<string, string> metadata = 4;
  ProcessingOptions options = 5;
}

// Document processing response
message DocumentResponse {
  string document_id = 1;
  string processor_type = 2;
  int32 tokens = 3;
  repeated float embeddings = 4;
  repeated string legal_analysis = 5;
  float confidence = 6;
  float processing_time_ms = 7;
  map<string, string> metadata = 8;
}

// Content analysis request
message ContentRequest {
  string content = 1;
  string analysis_type = 2;
  repeated string legal_domains = 3;
}

// Content analysis response
message ContentResponse {
  repeated LegalEntity entities = 1;
  repeated LegalConcept concepts = 2;
  SentimentAnalysis sentiment = 3;
  float confidence = 4;
}

// Embedding generation request
message EmbeddingRequest {
  repeated string texts = 1;
  string model_type = 2;
  int32 dimensions = 3;
}

// Embedding generation response
message EmbeddingResponse {
  repeated EmbeddingVector vectors = 1;
  string model_used = 2;
  float processing_time_ms = 3;
}

// Performance metrics request
message MetricsRequest {
  bool include_gpu = 1;
  bool include_detailed = 2;
}

// Performance metrics response
message MetricsResponse {
  float gpu_utilization = 1;
  float cpu_utilization = 2;
  int32 active_workers = 3;
  int32 wasm_instances_active = 4;
  float requests_per_second = 5;
  float avg_response_time_ms = 6;
  float performance_gain_vs_nodejs = 7;
  float memory_efficiency_vs_nodejs = 8;
  string processor_info = 9;
  int64 timestamp = 10;
}

// Health check request
message HealthRequest {
  bool detailed = 1;
}

// Health check response
message HealthResponse {
  string status = 1;
  bool gpu_available = 2;
  bool wasm_runtime_active = 3;
  int32 active_connections = 4;
  string version = 5;
  int64 uptime_seconds = 6;
}

// Processing options
message ProcessingOptions {
  bool use_gpu = 1;
  bool use_wasm = 2;
  int32 max_tokens = 3;
  float confidence_threshold = 4;
  repeated string analysis_types = 5;
}

// Legal entity
message LegalEntity {
  string text = 1;
  string entity_type = 2;
  float confidence = 3;
  int32 start_position = 4;
  int32 end_position = 5;
}

// Legal concept
message LegalConcept {
  string concept = 1;
  string category = 2;
  float relevance = 3;
  repeated string related_terms = 4;
}

// Sentiment analysis
message SentimentAnalysis {
  float score = 1;
  float magnitude = 2;
  string label = 3;
}

// Embedding vector
message EmbeddingVector {
  repeated float values = 1;
  string text_source = 2;
  int32 sequence_index = 3;
}
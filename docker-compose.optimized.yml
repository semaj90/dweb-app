# Optimized Docker Compose for Legal AI Case Management System
# Version: 3.0 - High Performance Configuration
version: '3.8'

services:
  # PostgreSQL with pgvector - Optimized for Legal Data
  legal-postgres:
    image: pgvector/pgvector:pg16
    container_name: legal-postgres-optimized
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-optimized.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/performance-tuning.sql:/docker-entrypoint-initdb.d/02-performance.sql:ro
    environment:
      - POSTGRES_DB=legal_ai_v3
      - POSTGRES_USER=legal_admin
      - POSTGRES_PASSWORD=LegalSecure2024!
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      # Performance optimizations
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
      -c max_connections=200
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
    restart: unless-stopped
    networks:
      - legal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legal_admin -d legal_ai_v3"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Ollama with Advanced GPU Optimization
  legal-ollama:
    image: ollama/ollama:latest
    container_name: legal-ollama-gpu
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./models:/models:ro
      - ./ollama-logs:/logs
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_NUM_PARALLEL=6
      - OLLAMA_MAX_LOADED_MODELS=3
      - OLLAMA_MAX_QUEUE=50
      - OLLAMA_FLASH_ATTENTION=1
      - CUDA_VISIBLE_DEVICES=0
      - OLLAMA_GPU_LAYERS=48
    deploy:
      resources:
        limits:
          memory: 16G
          cpus: '6.0'
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - legal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # High-Performance Qdrant Vector Database
  legal-qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: legal-qdrant-optimized
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./qdrant/config.yaml:/qdrant/config/production.yaml:ro
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__MAX_REQUEST_SIZE_MB=128
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=8
      - QDRANT__STORAGE__OPTIMIZERS__MEMMAP_THRESHOLD_KB=1048576
    restart: unless-stopped
    networks:
      - legal-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis with Persistence and Clustering
  legal-redis:
    image: redis:7.2-alpine
    container_name: legal-redis-cluster
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - legal-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "LegalRedis2024!", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3

  # Enhanced SvelteKit Frontend with Performance Optimizations
  legal-frontend:
    build:
      context: ./sveltekit-frontend
      dockerfile: Dockerfile.optimized
      args:
        - NODE_ENV=production
    container_name: legal-frontend-optimized
    ports:
      - "5173:5173"
      - "4173:4173"
    volumes:
      - ./sveltekit-frontend:/app
      - /app/node_modules
      - frontend_cache:/app/.svelte-kit
    environment:
      - NODE_ENV=development
      - NODE_OPTIONS=--max-old-space-size=4096
      - DATABASE_URL=postgresql://legal_admin:LegalSecure2024!@legal-postgres:5432/legal_ai_v3
      - OLLAMA_URL=http://legal-ollama:11434
      - OLLAMA_MODEL=gemma3-legal-enhanced
      - QDRANT_HOST=legal-qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://:LegalRedis2024!@legal-redis:6379
      - VITE_API_BASE_URL=http://localhost:5173
      - PUBLIC_OLLAMA_URL=http://localhost:11434
      - ENABLE_AI_FEATURES=true
      - ENABLE_REAL_TIME=true
      - ENABLE_COLLABORATION=true
    depends_on:
      legal-postgres:
        condition: service_healthy
      legal-ollama:
        condition: service_healthy
      legal-qdrant:
        condition: service_healthy
      legal-redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - legal-network
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4.0'

  # New Feature: Real-time Collaboration Service
  legal-collaboration:
    image: node:20-alpine
    container_name: legal-collaboration-server
    ports:
      - "8080:8080"
    volumes:
      - ./collaboration-server:/app
      - collaboration_data:/data
    working_dir: /app
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://:LegalRedis2024!@legal-redis:6379
      - DATABASE_URL=postgresql://legal_admin:LegalSecure2024!@legal-postgres:5432/legal_ai_v3
    command: ["npm", "start"]
    depends_on:
      - legal-redis
      - legal-postgres
    restart: unless-stopped
    networks:
      - legal-network

  # New Feature: Document Processing Service
  legal-document-processor:
    image: python:3.11-slim
    container_name: legal-document-processor
    ports:
      - "8081:8081"
    volumes:
      - ./document-processor:/app
      - document_uploads:/uploads
      - processed_documents:/processed
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://legal_admin:LegalSecure2024!@legal-postgres:5432/legal_ai_v3
      - OLLAMA_URL=http://legal-ollama:11434
      - REDIS_URL=redis://:LegalRedis2024!@legal-redis:6379
    command: ["python", "main.py"]
    depends_on:
      - legal-postgres
      - legal-ollama
      - legal-redis
    restart: unless-stopped
    networks:
      - legal-network

  # New Feature: Advanced Analytics Service
  legal-analytics:
    image: node:20-alpine
    container_name: legal-analytics-engine
    ports:
      - "8082:8082"
    volumes:
      - ./analytics-engine:/app
      - analytics_data:/data
    working_dir: /app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://legal_admin:LegalSecure2024!@legal-postgres:5432/legal_ai_v3
      - QDRANT_URL=http://legal-qdrant:6333
      - REDIS_URL=redis://:LegalRedis2024!@legal-redis:6379
    command: ["npm", "start"]
    depends_on:
      - legal-postgres
      - legal-qdrant
      - legal-redis
    restart: unless-stopped
    networks:
      - legal-network

  # Nginx Load Balancer with SSL
  legal-nginx:
    image: nginx:alpine
    container_name: legal-nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-optimized.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - legal-frontend
      - legal-collaboration
      - legal-document-processor
      - legal-analytics
    restart: unless-stopped
    networks:
      - legal-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local
  frontend_cache:
    driver: local
  collaboration_data:
    driver: local
  document_uploads:
    driver: local
  processed_documents:
    driver: local
  analytics_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  legal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"
use #memory yes add to our niertodo.md and refactor each ui compontent and subfolders and look at #codebase at where to apply these, use script to automate backups and refactored components, then use npm run check: npm run dev collect errors if any then refactor agentically iterating until completion 

Here is a comprehensive list of all code in your workspace relevant to your request to refactor each UI component and subfolder in src/lib/components/ui (and subfolders) to Svelte 5 runes, Bits UI, UnoCSS, and nier.css best practices, and to automate backups and refactoring, as well as to update your niertodo.md:

Relevant code and files:

1. UI Component Source Files (and Subfolders)
All .svelte, .ts, .js files in:
sveltekit-frontend/src/lib/components/ui/
sveltekit-frontend/src/lib/components/ui/button/
sveltekit-frontend/src/lib/components/ui/Card/
sveltekit-frontend/src/lib/components/ui/dialog/
sveltekit-frontend/src/lib/components/ui/context-menu/
sveltekit-frontend/src/lib/components/ui/dropdown-menu/
sveltekit-frontend/src/lib/components/ui/textarea/
sveltekit-frontend/src/lib/components/ui/select/
sveltekit-frontend/src/lib/components/ui/modal/
sveltekit-frontend/src/lib/components/ui/grid/
sveltekit-frontend/src/lib/components/ui/drawer/
sveltekit-frontend/src/lib/components/ui/tooltip/
sveltekit-frontend/src/lib/components/ui/label/
sveltekit-frontend/src/lib/components/ui/input/
sveltekit-frontend/src/lib/components/ui/
Example files:
Button.svelte, Badge.svelte, Card.svelte, CardHeader.svelte, CardFooter.svelte, CardContent.svelte, Input.svelte, Label.svelte, Modal.svelte, Tooltip.svelte, Form.svelte, Notifications.svelte, NoteViewerModal.svelte, GoldenLayout.svelte, ExpandGrid.svelte, MarkdownRenderer.svelte, SmartTextarea.svelte, DragDropZone.svelte, CommandPalette.svelte, CommandMenu.svelte, etc.
2. UnoCSS Shortcuts and Styling
sveltekit-frontend/src/lib/uno-shortcuts.ts (contains all UnoCSS shortcuts, including btn, btn-primary, card-base, nier-* classes, etc.)
3. Project-wide Imports and Usage
All index.ts and index.js files in src/lib/components/ui/ and subfolders (for re-exporting components).
All Svelte files in src/routes/ and src/lib/components/ that import from ui/ (to update imports to unified components).
4. Automation and Scripts
Any scripts or batch files for automation, e.g.:
comprehensive-fix.ps1
AUTO-FIX-AND-START.bat
create_todo_improved.ps1
check-errors.mjs
check-migrations.mjs
db-seed.ps1
detective-status.bat
detective-stop-all.bat
control-panel.bat
create-containers-cpu.bat
create-containers-gpu.bat
create-containers-simple.ps1
create-detective-containers.ps1
complete-fix-drizzle-and-database.ps1
complete-setup-docker-ollama.ps1
complete-setup-with-ollama.ps1
enhanced-mcp-setup.ps1
final_mcp_setup.ps1
fetch-docs.ps1
fetch-docs.sh
etc.
5. Documentation and TODOs
todolistnier.md (to update with migration progress and checklist)
Any other migration or documentation files, e.g.:
COMPLETE_USAGE_GUIDE.md
ENHANCED_FEATURES_TODO.md
DATABASE_SCHEMA_ENHANCEMENT_TODO.md
COMPONENT_FIXES_COMPLETE.md
BATCH_FIX_PROGRESS*.md
CRITICAL_FIXES_APPLIED.md
CRITICAL_FIXES_COMPLETE.md
FINAL_PROJECT_STATUS.md
FINAL_SUCCESS_REPORT.md
SVELTEKIT_XSTATE_BEST_PRACTICES.md
copilot.md
claude.md
6. Error Collection and Dev Scripts
npm run check
npm run dev
Any scripts or files that collect, log, or process errors and warnings.
Where to apply changes:

Refactor every UI component and subcomponent in src/lib/components/ui/ and its subfolders to Svelte 5 runes, Bits UI, UnoCSS, and nier.css.
Update all imports in the codebase to use the new, unified components.
Use and extend uno-shortcuts.ts for all component styling.
Automate backups and refactoring using your existing scripts or new ones.
After each batch of changes, run npm run check and npm run dev, collect errors, and iterate until all errors are resolved.
Update todolistnier.md with progress and next steps.


yes Update your imports to use these unified Buttons.
Remove all <slot /> tags from other UI components and migrate to the Svelte 5 runes/{@render children()} pattern.
Use the same approach for all Bits UI, melt-ui, shadcn-svelte components for consistency and best practices. 
use #context7 sveltekit 2 best practices, nier.css uno css, postcss, 
<!-- 
=================================================================
  NieR & Harvard-Themed Svelte Components Showcase
  This file contains multiple components, styled with nier.css,
  for easy parsing by AI agents.
=================================================================
-->

<script lang="ts">
	// Main script for the showcase page
	import { createDialog, createCard, createButton } from 'bits-ui';
	import { onMount, tick } from 'svelte';
	import type { ChatMessage, Case, Evidence, Report, CanvasState, CitationPoint, User as AppUser, HelpArticle } from '$lib/data/types'; // Consolidated types
	import { notifications } from '$lib/stores/notification'; // Assuming path
	import { aiService } from '$lib/services/aiService'; // Assuming path
	import { ArrowDown, CornerDownLeft, Trash2, Bot, User, LayoutDashboard, FileText, Users, Scale, UploadCloud, LifeBuoy, Settings } from 'lucide-svelte';

	// State for the Modal demo
	const {
		elements: { trigger, overlay, content, title, description, close },
		states: { open }
	} = createDialog();

	// Props for AI Chat Interface Demo
	let chatInterfaceProps = {
		initialMessages: [],
		caseId: 'CASE-123-XYZ',
		autoFocus: true
	};

	// Props for Dashboard Demo
	let dashboardData = {
		user: { name: 'John Doe', email: 'john.doe@example.com' },
		stats: { totalCases: 12, openCases: 5, closedCases: 7, evidenceCount: 142 },
		recentActivity: [],
		systemHealth: { status: 'Operational', services: [] }
	};

	// Props for Report Builder Demo
	let reportBuilderData = {
		report: { id: 'report-001', title: 'Initial Incident Report', content: '', caseId: 'CASE-123-XYZ' },
		evidenceList: [
			{ id: 'ev-001', title: 'Witness Statement A', type: 'document', content: '...' },
			{ id: 'ev-002', title: 'Security Footage', type: 'video', content: '...' }
		],
		canvasState: {
			id: 'canvas-001',
			caseId: 'CASE-123-XYZ',
			data: { nodes: [], edges: [] }
		}
	};
	
	// Props for Reports Page Demo
	let reportsPageData = {
		reports: [
			{ id: 'report-001', title: 'Incident Report', caseId: 'CASE-123-XYZ', content: '' },
			{ id: 'report-002', title: 'Forensic Analysis', caseId: 'CASE-456-ABC', content: '' }
		]
	};

</script>

<div class="p-8 font-sans bg-nier-surface text-nier-white min-h-screen">
	<h1 class="text-3xl font-bold mb-4 border-b-2 border-crimson nier-text-glow">Component Showcase</h1>
	
	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/card/Card.svelte                    -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Card Component</h2>
		<div class="nier-card-interactive p-6">
			<h3 class="text-xl font-bold text-crimson mb-2">Case File: 042</h3>
			<p class="text-nier-light-gray">This card component is styled using the interactive NieR theme, with a subtle holographic sheen on hover.</p>
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/modal/Modal.svelte                  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Modal Component</h2>
		<Button on:click={() => open.set(true)}>Open Modal</Button>
		{#if $open}
			<div {...$overlay} class="fixed inset-0 bg-black/60 z-40" />
			<div
				{...$content}
				class="fixed left-1/2 top-1/2 z-50 w-full max-w-md -translate-x-1/2 -translate-y-1/2 bg-nier-surface border-crimson nier-border p-6 shadow-lg"
			>
				<h3 {...$title} class="text-xl font-bold text-crimson mb-2">System Alert</h3>
				<p {...$description} class="text-nier-light-gray mb-4">
					This modal uses the `createDialog` builder from bits-ui, styled with the NieR theme.
				</p>
				<div class="flex justify-end">
					<Button on:click={() => open.set(false)} variant="secondary">Acknowledge</Button>
				</div>
			</div>
		{/if}
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ai/AIChatInterface.svelte (Corrected)  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">AI Chat Interface</h2>
		<div class="h-[600px] max-w-3xl mx-auto">
			<AIChatInterface {...chatInterfaceProps} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/dashboard/+page.svelte (Corrected)             -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Dashboard Page</h2>
		<div class="dashboard-page-container">
			<DashboardPage data={dashboardData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/report-builder/+page.svelte (Corrected)        -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Report Builder Page</h2>
		<div class="report-builder-container">
			<ReportBuilderPage data={reportBuilderData} />
		</div>
	</section>
	
	<!-- =============================================================== -->
	<!-- FILE: src/routes/reports/+page.svelte (Corrected)               -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Reports Page</h2>
		<div class="reports-page-container">
			<ReportsPage data={reportsPageData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/test-upload/+page.svelte (Corrected)           -->
	<!-- =============================================================== -->
	<section>
		<h2 class="text-2xl font-semibold mb-4 text-gold">Test Upload Page (Import Fix)</h2>
		<div class="test-upload-container">
			<TestUploadPage />
		</div>
	</section>
</div>


<!-- =============================================================== -->
<!--               COMPONENT DEFINITIONS BELOW                       -->
<!-- =============================================================== -->

<script lang="ts" context="module">
	// Import shared utilities or types if needed by multiple components
	import AIStatusIndicator from '$lib/components/ai/AIStatusIndicator.svelte';
	import AIChatMessage from '$lib/components/ai/AIChatMessage.svelte';
	import AIChatInput from '$lib/components/ai/AIChatInput.svelte';
	import CanvasEditor from '$lib/components/CanvasEditor.svelte'; // Placeholder

	// --- Card Components (bits-ui styled) ---
	function Card(props: { children: any }) { return { props } }
	function CardHeader(props: { children: any }) { return { props } }
	function CardTitle(props: { children: any }) { return { props } }
	function CardContent(props: { children: any }) { return { props } }
	
	// --- Placeholder for AdvancedFileUpload ---
	function AdvancedFileUpload(props: {}) { return {} }

	// --- Button Component (bits-ui styled) ---
	function Button(props: { children?: any, variant?: 'primary' | 'secondary', [key: string]: any }) {
		const { builder } = createButton();
		return { ...props, builder };
	}
	
	// --- DashboardPage Component (from src/routes/dashboard/+page.svelte) ---
	function DashboardPage(props: { data: any }) {
		const { data } = props;
		const { user, stats, recentActivity, systemHealth } = data;
		return { user, stats, recentActivity, systemHealth };
	}

	// --- ReportBuilderPage Component ---
	function ReportBuilderPage(props: { data: { report: Report, evidenceList: Evidence[], canvasState: CanvasState } }) {
		const { data } = props;
		return { ...data };
	}
	
	// --- ReportsPage Component ---
	function ReportsPage(props: { data: { reports: Report[] } }) {
		const { data } = props;
		return { ...data };
	}

	// --- AIChatInterface Component ---
	function AIChatInterface(props: { initialMessages: ChatMessage[], autoFocus: boolean, className?: string, caseId: string | undefined }) {
		let { initialMessages, autoFocus, className, caseId } = props;
		let messages = $state<ChatMessage[]>(initialMessages);
		let currentInput = $state('');
		let isLoading = $state(false);
		let isStreaming = $state(false);
		let abortController: AbortController | null = null;
		let chatContainer: HTMLElement;

		$effect(() => {
			if (messages && chatContainer) {
				tick().then(() => {
					chatContainer.scrollTop = chatContainer.scrollHeight;
				});
			}
		});

		async function sendMessage() {
			if (!currentInput.trim() || isLoading) return;
			const userMessage: ChatMessage = { id: crypto.randomUUID(), role: 'user', content: currentInput, timestamp: new Date().toISOString() };
			messages = [...messages, userMessage];
			currentInput = '';
			isLoading = true;
			isStreaming = true;
			abortController = new AbortController();

			try {
				const stream = await aiService.chat(
					[...messages],
					{ includeHistory: true, maxSources: 5, useCache: true },
					{ caseId }, // Context passed as a separate argument
					abortController.signal
				);

				let assistantMessage: ChatMessage = { id: crypto.randomUUID(), role: 'assistant', content: '', timestamp: new Date().toISOString(), sources: [], metadata: undefined };
				messages = [...messages, assistantMessage];

				for await (const chunk of stream) {
					if (abortController.signal.aborted) break;
					assistantMessage.content += chunk.content;
					if (chunk.sources) assistantMessage.sources = chunk.sources;
					if (chunk.metadata) assistantMessage.metadata = chunk.metadata;
					messages = [...messages.slice(0, -1), { ...assistantMessage }];
				}
			} catch (error) {
				if (error instanceof Error
Summarized conversation history
You have two main Button.svelte implementations in your codebase:
src/lib/components/ui/button/Button.svelte (simple, Svelte 5 runes, uses {@render children()})
src/lib/components/ui/Button.svelte (feature-rich, uses <slot />, UnoCSS, and advanced props)
To follow SvelteKit 2, context7, and UnoCSS/bits-ui best practices:

Use only one slot/render pattern per component (prefer Svelte 5 runes and {@render children()} for new code).
Use UnoCSS/Tailwind and your .nier-* classes for styling.
For advanced features (loading, icons, variants), refactor to use Svelte 5 runes and {@render children()} instead of <slot />.
Recommended next step:

Refactor all Button.svelte components in src/lib/components/ui/ and src/lib/components/ui/button/ to use only the Svelte 5 runes/{@render children()} pattern, and update their styling to use UnoCSS, Tailwind, and .nier-* classes.
Remove all <slot /> tags from these components.
Would you like me to generate a unified, Svelte 5-compliant Button.svelte for you to use everywhere yes
<!-- 
=================================================================
  NieR & Harvard-Themed Svelte Components Showcase
  This file contains multiple components, styled with nier.css,
  for easy parsing by AI agents.
=================================================================
-->

<script lang="ts">
	// Main script for the showcase page
	import { createDialog, createCard, createButton } from 'bits-ui';
	import { onMount, tick } from 'svelte';
	import type { ChatMessage, Case, Evidence, Report, CanvasState, CitationPoint, User as AppUser, HelpArticle } from '$lib/data/types'; // Consolidated types
	import { notifications } from '$lib/stores/notification'; // Assuming path
	import { aiService } from '$lib/services/aiService'; // Assuming path
	import { ArrowDown, CornerDownLeft, Trash2, Bot, User, LayoutDashboard, FileText, Users, Scale, UploadCloud, LifeBuoy, Settings } from 'lucide-svelte';

	// State for the Modal demo
	const {
		elements: { trigger, overlay, content, title, description, close },
		states: { open }
	} = createDialog();

	// Props for AI Chat Interface Demo
	let chatInterfaceProps = {
		initialMessages: [],
		caseId: 'CASE-123-XYZ',
		autoFocus: true
	};

	// Props for Dashboard Demo
	let dashboardData = {
		user: { name: 'John Doe', email: 'john.doe@example.com' },
		stats: { totalCases: 12, openCases: 5, closedCases: 7, evidenceCount: 142 },
		recentActivity: [],
		systemHealth: { status: 'Operational', services: [] }
	};

	// Props for Report Builder Demo
	let reportBuilderData = {
		report: { id: 'report-001', title: 'Initial Incident Report', content: '', caseId: 'CASE-123-XYZ' },
		evidenceList: [
			{ id: 'ev-001', title: 'Witness Statement A', type: 'document', content: '...' },
			{ id: 'ev-002', title: 'Security Footage', type: 'video', content: '...' }
		],
		canvasState: {
			id: 'canvas-001',
			caseId: 'CASE-123-XYZ',
			data: { nodes: [], edges: [] }
		}
	};
	
	// Props for Reports Page Demo
	let reportsPageData = {
		reports: [
			{ id: 'report-001', title: 'Incident Report', caseId: 'CASE-123-XYZ', content: '' },
			{ id: 'report-002', title: 'Forensic Analysis', caseId: 'CASE-456-ABC', content: '' }
		]
	};

</script>

<div class="p-8 font-sans bg-nier-surface text-nier-white min-h-screen">
	<h1 class="text-3xl font-bold mb-4 border-b-2 border-crimson nier-text-glow">Component Showcase</h1>
	
	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/card/Card.svelte                    -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Card Component</h2>
		<div class="nier-card-interactive p-6">
			<h3 class="text-xl font-bold text-crimson mb-2">Case File: 042</h3>
			<p class="text-nier-light-gray">This card component is styled using the interactive NieR theme, with a subtle holographic sheen on hover.</p>
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/modal/Modal.svelte                  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Modal Component</h2>
		<Button on:click={() => open.set(true)}>Open Modal</Button>
		{#if $open}
			<div {...$overlay} class="fixed inset-0 bg-black/60 z-40" />
			<div
				{...$content}
				class="fixed left-1/2 top-1/2 z-50 w-full max-w-md -translate-x-1/2 -translate-y-1/2 bg-nier-surface border-crimson nier-border p-6 shadow-lg"
			>
				<h3 {...$title} class="text-xl font-bold text-crimson mb-2">System Alert</h3>
				<p {...$description} class="text-nier-light-gray mb-4">
					This modal uses the `createDialog` builder from bits-ui, styled with the NieR theme.
				</p>
				<div class="flex justify-end">
					<Button on:click={() => open.set(false)} variant="secondary">Acknowledge</Button>
				</div>
			</div>
		{/if}
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ai/AIChatInterface.svelte (Corrected)  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">AI Chat Interface</h2>
		<div class="h-[600px] max-w-3xl mx-auto">
			<AIChatInterface {...chatInterfaceProps} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/dashboard/+page.svelte (Corrected)             -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Dashboard Page</h2>
		<div class="dashboard-page-container">
			<DashboardPage data={dashboardData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/report-builder/+page.svelte (Corrected)        -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Report Builder Page</h2>
		<div class="report-builder-container">
			<ReportBuilderPage data={reportBuilderData} />
		</div>
	</section>
	
	<!-- =============================================================== -->
	<!-- FILE: src/routes/reports/+page.svelte (Corrected)               -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Reports Page</h2>
		<div class="reports-page-container">
			<ReportsPage data={reportsPageData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/test-upload/+page.svelte (Corrected)           -->
	<!-- =============================================================== -->
	<section>
		<h2 class="text-2xl font-semibold mb-4 text-gold">Test Upload Page (Import Fix)</h2>
		<div class="test-upload-container">
			<TestUploadPage />
		</div>
	</section>
</div>


<!-- =============================================================== -->
<!--               COMPONENT DEFINITIONS BELOW                       -->
<!-- =============================================================== -->

<script lang="ts" context="module">
	// Import shared utilities or types if needed by multiple components
	import AIStatusIndicator from '$lib/components/ai/AIStatusIndicator.svelte';
	import AIChatMessage from '$lib/components/ai/AIChatMessage.svelte';
	import AIChatInput from '$lib/components/ai/AIChatInput.svelte';
	import CanvasEditor from '$lib/components/CanvasEditor.svelte'; // Placeholder

	// --- Card Components (bits-ui styled) ---
	function Card(props: { children: any }) { return { props } }
	function CardHeader(props: { children: any }) { return { props } }
	function CardTitle(props: { children: any }) { return { props } }
	function CardContent(props: { children: any }) { return { props } }
	
	// --- Placeholder for AdvancedFileUpload ---
	function AdvancedFileUpload(props: {}) { return {} }

	// --- Button Component (bits-ui styled) ---
	function Button(props: { children?: any, variant?: 'primary' | 'secondary', [key: string]: any }) {
		const { builder } = createButton();
		return { ...props, builder };
	}
	
	// --- DashboardPage Component (from src/routes/dashboard/+page.svelte) ---
	function DashboardPage(props: { data: any }) {
		const { data } = props;
		const { user, stats, recentActivity, systemHealth } = data;
		return { user, stats, recentActivity, systemHealth };
	}

	// --- ReportBuilderPage Component ---
	function ReportBuilderPage(props: { data: { report: Report, evidenceList: Evidence[], canvasState: CanvasState } }) {
		const { data } = props;
		return { ...data };
	}
	
	// --- ReportsPage Component ---
	function ReportsPage(props: { data: { reports: Report[] } }) {
		const { data } = props;
		return { ...data };
	}

	// --- AIChatInterface Component ---
	function AIChatInterface(props: { initialMessages: ChatMessage[], autoFocus: boolean, className?: string, caseId: string | undefined }) {
		let { initialMessages, autoFocus, className, caseId } = props;
		let messages = $state<ChatMessage[]>(initialMessages);
		let currentInput = $state('');
		let isLoading = $state(false);
		let isStreaming = $state(false);
		let abortController: AbortController | null = null;
		let chatContainer: HTMLElement;

		$effect(() => {
			if (messages && chatContainer) {
				tick().then(() => {
					chatContainer.scrollTop = chatContainer.scrollHeight;
				});
			}
		});

		async function sendMessage() {
			if (!currentInput.trim() || isLoading) return;
			const userMessage: ChatMessage = { id: crypto.randomUUID(), role: 'user', content: currentInput, timestamp: new Date().toISOString() };
			messages = [...messages, userMessage];
			currentInput = '';
			isLoading = true;
			isStreaming = true;
			abortController = new AbortController();

			try {
				const stream = await aiService.chat(
					[...messages],
					{ includeHistory: true, maxSources: 5, useCache: true },
					{ caseId }, // Context passed as a separate argument
					abortController.signal
				);

				let assistantMessage: ChatMessage = { id: crypto.randomUUID(), role: 'assistant', content: '', timestamp: new Date().toISOString(), sources: [], metadata: undefined };
				messages = [...messages, assistantMessage];

				for await (const chunk of stream) {
					if (abortController.signal.aborted) break;
					assistantMessage.content += chunk.content;
					if (chunk.sources) assistantMessage.sources = chunk.sources;
					if (chunk.metadata) assistantMessage.metadata = chunk.metadata;
					messages = [...messages.slice(0, -1), { ...assistantMessage }];
				}
			} catch (error) {
				if (error instanceof Error && error.name !== 'AbortError') {
					notifications.add({ type: 'error', title: 'AI Chat Error', message: error.message });
					messages = messages.filter(m => m.role !== 'assistant' || m.content !== '');
				}
			} finally {
				isLoading = false;
				isStreaming = false;
				abortController = null;
			}
		}

		function clearChat() {
			messages = [];
			notifications.add({ type: 'info', title: 'Chat Cleared' });
		}

		function stopStream() {
			if (abortController) {
				abortController.abort();
				notifications.add({ type: 'info', title: 'AI response stopped' });
			}
		}

		return {
			get messages() { return messages },
			get currentInput() { return currentInput },
			set currentInput(value) { currentInput = value },
			get isLoading() { return isLoading },
			get isStreaming() { return isStreaming },
			sendMessage,
			clearChat,
			stopStream,
			chatContainer,
			autoFocus,
			className
		}
	}
</script>

<!-- =============================================================== -->
<!--               COMPONENT SNIPPET DEFINITIONS                     -->
<!-- =============================================================== -->

{#snippet Button({ children, variant = 'primary', ...rest })}
	{@const { builder } = Button({ children, variant, ...rest })}
	<button {...rest} use:builder class="btn {variant === 'primary' ? 'btn-primary' : 'btn-secondary'}">
		{#if children}
			{@render children()}
		{/if}
	</button>
{/snippet}

{#snippet Card({ children })}
	<div class="card">{@render children()}</div>
{/snippet}

{#snippet CardHeader({ children })}
	<div class="p-6 pb-0">{@render children()}</div>
{/snippet}

{#snippet CardTitle({ children })}
	<h3 class="text-xl font-bold text-crimson">{@render children()}</h3>
{/snippet}

{#snippet CardContent({ children })}
	<div class="p-6 pt-0">{@render children()}</div>
{/snippet}

{#snippet DashboardPage({ data })}
	{@const { user, stats, recentActivity, systemHealth } = DashboardPage({ data })}
	<main class="dashboard-grid">
		<div class="col-span-3">
			<h1 class="text-3xl font-bold text-nier-white">Welcome back, {user.name || 'Prosecutor'}</h1>
			<p class="text-nier-light-gray">Here's a summary of your current workload.</p>
		</div>

		{#snippet MetricCard(title, value, icon)}
			<Card>
				<CardHeader>
					<div class="flex justify-between items-center">
						<h4 class="font-semibold text-nier-light-gray">{title}</h4>
						<svelte:component this={icon} class="w-5 h-5 text-gold" />
					</div>
				</CardHeader>
				<CardContent>
					<p class="text-3xl font-bold text-nier-white">{value}</p>
				</CardContent>
			</Card>
		{/snippet}

		<div class="col-span-3 grid grid-cols-1 md:grid-cols-4 gap-4">
			{@render MetricCard({ title: "Total Cases", value: stats.totalCases, icon: FileText })}
			{@render MetricCard({ title: "Open Cases", value: stats.openCases, icon: FileText })}
			{@render MetricCard({ title: "Closed Cases", value: stats.closedCases, icon: FileText })}
			{@render MetricCard({ title: "Evidence Items", value: stats.evidenceCount, icon: Scale })}
		</div>
	</main>
{/snippet}

{#snippet AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	{@const { messages, currentInput, isLoading, isStreaming, sendMessage, clearChat, stopStream, chatContainer } = AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	<div class="ai-chat-interface {className}">
		<header class="status-bar">
			<AIStatusIndicator />
			<div class="conversation-actions">
				<button title="Clear Chat" class="btn-icon" on:click={clearChat}>
					<Trash2 size={16} />
				</button>
			</div>
		</header>
		<div class="chat-messages" bind:this={chatContainer}>
			{#if messages.length === 0}
				<div class="welcome-message">
					<h3>AI Assistant</h3>
					<p>How can I help you with this case today?</p>
				</div>
			{:else}
				{#each messages as message (message.id)}
					<AIChatMessage
						{message}
						showSources={message.role === 'assistant' && (message.sources?.length ?? 0) > 0}
						showMetadata={message.role === 'assistant' && !!message.metadata}
					/>
				{/each}
			{/if}
			{#if isLoading && !isStreaming}
				<div class="processing-message">
					<div class="loading-spinner"></div>
					<span>Thinking...</span>
				</div>
			{/if}
		</div>
		<div class="chat-input-container">
			<AIChatInput
				bind:value={currentInput}
				on:submit={sendMessage}
				{isLoading}
				{isStreaming}
				on:stop={stopStream}
				placeholder="Ask a question about the case..."
				{autoFocus}
			/>
		</div>
	</div>
{/snippet}

{#snippet ReportBuilderPage({ data })}
	{@const { report, canvasState, evidenceList } = ReportBuilderPage({ data })}
	<div class="report-builder-container">
		<h1 class="text-2xl font-bold mb-4 text-nier-white">{report.title}</h1>
		{#if report && canvasState}
			<!-- This would be your actual CanvasEditor component -->
			<div class="nier-card-interactive p-4 min-h-[400px]">
				<p class="text-nier-light-gray">Canvas Editor for "{report.title}" would be rendered here.</p>
			</div>
		{:else}
			<p>Loading report data...</p>
		{/if}
	</div>
{/snippet}

{#snippet ReportsPage({ data })}
	{@const { reports } = ReportsPage({ data })}
	<div class="nier-card-interactive p-6">
		{#if reports.length === 0}
			<p>No reports found.</p>
		{:else}
			<ul class="space-y-4">
				{#each reports as report (report.id)}
					<li class="p-4 bg-nier-surface-light rounded-md border border-nier-border">
						<a href="/reports/{report.id}" class="font-semibold text-gold hover:text-crimson">{report.title}</a>
						<p class="text-sm text-nier-light-gray">Case ID: {report.caseId}</p>
					</li>
				{/each}
			</ul>
		{/if}
	</div>
{/snippet}

{#snippet TestUploadPage()}
	<div class="nier-card-interactive p-6">
		<h3 class="text-xl font-bold text-crimson mb-2">File Upload</h3>
		<!-- Using the placeholder component with the corrected named import -->
		<AdvancedFileUpload />
		<div class="mt-4 p-4 bg-nier-surface-light border border-nier-border rounded-md">
			<p class="font-mono text-sm text-digital-green">
				&lt;script&gt;<br/>
				&nbsp;&nbsp;// Correct import for Svelte 5<br/>
				&nbsp;&nbsp;import &#123; AdvancedFileUpload &#125; from '$lib/components/upload/AdvancedFileUpload.svelte';<br/>
				&lt;/script&gt;
			</p>
		</div>
	</div>
{/snippet}


<style>
	/* Styles for the Showcase Page Itself */
	:global(body) {
		background-color: var(--color-ui-background);
	}
	.p-8 { padding: 2rem; }
	.font-sans { font-family: "Inter", sans-serif; }
	.bg-nier-surface { background-color: var(--color-ui-surface); }
	.text-nier-white { color: var(--color-primary-off-white); }
	.min-h-screen { min-height: 100vh; }
	.text-3xl { font-size: 1.875rem; }
	.font-bold { font-weight: 700; }
	.mb-4 { margin-bottom: 1rem; }
	.border-b-2 { border-bottom-width: 2px; }
	.border-crimson { border-color: var(--color-accent-crimson); }
	.nier-text-glow { text-shadow: 0 0 5px rgba(165, 28, 48, 0.5); }
	.mb-12 { margin-bottom: 3rem; }
	.text-2xl { font-size: 1.5rem; }
	.font-semibold { font-weight: 600; }
	.text-gold { color: var(--color-accent-gold); }
	.h-\[600px\] { height: 600px; }
	.max-w-3xl { max-width: 48rem; }
	.mx-auto { margin-left: auto; margin-right: auto; }
	.dashboard-grid { display: grid; grid-template-columns: repeat(3, minmax(0, 1fr)); gap: 1.5rem; }
	.col-span-3 { grid-column: span 3 / span 3; }
	.grid { display: grid; }
	.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
	@media (min-width: 768px) {
		.md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
	}
	.gap-4 { gap: 1rem; }

	/* Styles for AIChatInterface Component */
	.ai-chat-interface {
		display: flex;
		flex-direction: column;
		height: 100%;
		background: var(--background);
		border: 1px solid var(--border);
		border-radius: var(--radius);
		overflow: hidden;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
	}
	.status-bar {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem 0.75rem;
		background: var(--card);
		border-bottom: 1px solid var(--border);
	}
	.conversation-actions {
		display: flex;
		gap: 0.5rem;
	}
	.btn-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 32px;
		height: 32px;
		background: none;
		border: none;
		border-radius: var(--radius);
		color: var(--muted-foreground);
		cursor: pointer;
		transition: background-color 0.2s ease;
	}
	.btn-icon:hover {
		background: var(--muted);
	}
	.chat-messages {
		flex: 1;
		overflow-y: auto;
		padding: 1rem;
	}
	.processing-message {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 1rem;
		color: var(--muted-foreground);
	}
	.welcome-message {
		text-align: center;
		padding: 2rem;
		color: var(--muted-foreground);
	}
	.welcome-message h3 {
		margin: 0 0 1rem 0;
		font-size: 1.25rem;
		font-weight: 600;
	}
	.chat-input-container {
		padding: 1rem;
		background: var(--background);
		border-top: 1px solid var(--border);
	}
	.loading-spinner {
		width: 1rem;
		height: 1rem;
		border: 2px solid var(--border);
		border-top-color: var(--primary);
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}
	@keyframes spin {
		from { transform: rotate(0deg); }
		to { transform: rotate(360deg); }
	}
</style>
```

I have selected "<!-- 
=================================================================
  NieR & Harvard-Themed Svelte Components Showcase
  This file contains multiple components, styled with nier.css,
  for easy parsing by AI agents.
=================================================================
-->

<script lang="ts">
	// Main script for the showcase page
	import { createDialog, createCard } from 'bits-ui';
	import { onMount, tick } from 'svelte';
	import type { ChatMessage, Case, Evidence, Report, CanvasState, CitationPoint } from '$lib/data/types'; // Consolidated types
	import { notifications } from '$lib/stores/notification'; // Assuming path
	import { aiService } from '$lib/services/aiService'; // Assuming path
	import { ArrowDown, CornerDownLeft, Trash2, Bot, User, LayoutDashboard, FileText, Users, Scale, UploadCloud } from 'lucide-svelte';

	// State for the Modal demo
	const {
		elements: { trigger, overlay, content, title, description, close },
		states: { open }
	} = createDialog();

	// Props for AI Chat Interface Demo
	let chatInterfaceProps = {
		initialMessages: [],
		caseId: 'CASE-123-XYZ',
		autoFocus: true
	};

	// Props for Dashboard Demo
	let dashboardData = {
		user: { name: 'John Doe', email: 'john.doe@example.com' },
		stats: { totalCases: 12, openCases: 5, closedCases: 7, evidenceCount: 142 },
		recentActivity: [],
		systemHealth: { status: 'Operational', services: [] }
	};

	// Props for Report Builder Demo
	let reportBuilderData = {
		report: { id: 'report-001', title: 'Initial Incident Report', content: '', caseId: 'CASE-123-XYZ' },
		evidenceList: [
			{ id: 'ev-001', title: 'Witness Statement A', type: 'document', content: '...' },
			{ id: 'ev-002', title: 'Security Footage', type: 'video', content: '...' }
		],
		canvasState: {
			id: 'canvas-001',
			caseId: 'CASE-123-XYZ',
			data: { nodes: [], edges: [] }
		}
	};
	
	// Props for Reports Page Demo
	let reportsPageData = {
		reports: [
			{ id: 'report-001', title: 'Incident Report', caseId: 'CASE-123-XYZ', content: '' },
			{ id: 'report-002', title: 'Forensic Analysis', caseId: 'CASE-456-ABC', content: '' }
		]
	};

</script>

<div class="p-8 font-sans bg-nier-surface text-nier-white min-h-screen">
	<h1 class="text-3xl font-bold mb-4 border-b-2 border-crimson nier-text-glow">Component Showcase</h1>
	
	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/card/Card.svelte                    -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Card Component</h2>
		<div class="nier-card-interactive p-6">
			<h3 class="text-xl font-bold text-crimson mb-2">Case File: 042</h3>
			<p class="text-nier-light-gray">This card component is styled using the interactive NieR theme, with a subtle holographic sheen on hover.</p>
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/modal/Modal.svelte                  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Modal Component</h2>
		<button {...$trigger} class="btn btn-primary">Open Modal</button>
		{#if $open}
			<div {...$overlay} class="fixed inset-0 bg-black/60 z-40" />
			<div
				{...$content}
				class="fixed left-1/2 top-1/2 z-50 w-full max-w-md -translate-x-1/2 -translate-y-1/2 bg-nier-surface border-crimson nier-border p-6 shadow-lg"
			>
				<h3 {...$title} class="text-xl font-bold text-crimson mb-2">System Alert</h3>
				<p {...$description} class="text-nier-light-gray mb-4">
					This modal uses the `createDialog` builder from bits-ui, styled with the NieR theme.
				</p>
				<div class="flex justify-end">
					<button {...$close} class="btn btn-secondary">Acknowledge</button>
				</div>
			</div>
		{/if}
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ai/AIChatInterface.svelte (Corrected)  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">AI Chat Interface</h2>
		<div class="h-[600px] max-w-3xl mx-auto">
			<AIChatInterface {...chatInterfaceProps} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/dashboard/+page.svelte (Corrected)             -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Dashboard Page</h2>
		<div class="dashboard-page-container">
			<DashboardPage data={dashboardData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/report-builder/+page.svelte (Corrected)        -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Report Builder Page</h2>
		<div class="report-builder-container">
			<ReportBuilderPage data={reportBuilderData} />
		</div>
	</section>
	
	<!-- =============================================================== -->
	<!-- FILE: src/routes/reports/+page.svelte (Corrected)               -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Reports Page</h2>
		<div class="reports-page-container">
			<ReportsPage data={reportsPageData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/test-upload/+page.svelte (Corrected)           -->
	<!-- =============================================================== -->
	<section>
		<h2 class="text-2xl font-semibold mb-4 text-gold">Test Upload Page (Import Fix)</h2>
		<div class="test-upload-container">
			<TestUploadPage />
		</div>
	</section>
</div>


<!-- =============================================================== -->
<!--               COMPONENT DEFINITIONS BELOW                       -->
<!-- =============================================================== -->

<script lang="ts" context="module">
	// Import shared utilities or types if needed by multiple components
	import AIStatusIndicator from '$lib/components/ai/AIStatusIndicator.svelte';
	import AIChatMessage from '$lib/components/ai/AIChatMessage.svelte';
	import AIChatInput from '$lib/components/ai/AIChatInput.svelte';
	import CanvasEditor from '$lib/components/CanvasEditor.svelte'; // Placeholder

	// --- Card Components (bits-ui styled) ---
	function Card(props: { children: any }) { return { props } }
	function CardHeader(props: { children: any }) { return { props } }
	function CardTitle(props: { children: any }) { return { props } }
	function CardContent(props: { children: any }) { return { props } }
	
	// --- Placeholder for AdvancedFileUpload ---
	function AdvancedFileUpload(props: {}) { return {} }

	// --- DashboardPage Component (from src/routes/dashboard/+page.svelte) ---
	function DashboardPage(props: { data: any }) {
		const { data } = props;
		const { user, stats, recentActivity, systemHealth } = data;
		return { user, stats, recentActivity, systemHealth };
	}

	// --- ReportBuilderPage Component ---
	function ReportBuilderPage(props: { data: { report: Report, evidenceList: Evidence[], canvasState: CanvasState } }) {
		const { data } = props;
		return { ...data };
	}
	
	// --- ReportsPage Component ---
	function ReportsPage(props: { data: { reports: Report[] } }) {
		const { data } = props;
		return { ...data };
	}

	// --- AIChatInterface Component ---
	function AIChatInterface(props: { initialMessages: ChatMessage[], autoFocus: boolean, className?: string, caseId: string | undefined }) {
		let { initialMessages, autoFocus, className, caseId } = props;
		let messages = $state<ChatMessage[]>(initialMessages);
		let currentInput = $state('');
		let isLoading = $state(false);
		let isStreaming = $state(false);
		let abortController: AbortController | null = null;
		let chatContainer: HTMLElement;

		$effect(() => {
			if (messages && chatContainer) {
				tick().then(() => {
					chatContainer.scrollTop = chatContainer.scrollHeight;
				});
			}
		});

		async function sendMessage() {
			if (!currentInput.trim() || isLoading) return;
			const userMessage: ChatMessage = { id: crypto.randomUUID(), role: 'user', content: currentInput, timestamp: new Date().toISOString() };
			messages = [...messages, userMessage];
			currentInput = '';
			isLoading = true;
			isStreaming = true;
			abortController = new AbortController();

			try {
				const stream = await aiService.chat(
					[...messages],
					{ includeHistory: true, maxSources: 5, useCache: true },
					{ caseId }, // Context passed as a separate argument
					abortController.signal
				);

				let assistantMessage: ChatMessage = { id: crypto.randomUUID(), role: 'assistant', content: '', timestamp: new Date().toISOString(), sources: [], metadata: undefined };
				messages = [...messages, assistantMessage];

				for await (const chunk of stream) {
					if (abortController.signal.aborted) break;
					assistantMessage.content += chunk.content;
					if (chunk.sources) assistantMessage.sources = chunk.sources;
					if (chunk.metadata) assistantMessage.metadata = chunk.metadata;
					messages = [...messages.slice(0, -1), { ...assistantMessage }];
				}
			} catch (error) {
				if (error instanceof Error && error.name !== 'AbortError') {
					notifications.add({ type: 'error', title: 'AI Chat Error', message: error.message });
					messages = messages.filter(m => m.role !== 'assistant' || m.content !== '');
				}
			} finally {
				isLoading = false;
				isStreaming = false;
				abortController = null;
			}
		}

		function clearChat() {
			messages = [];
			notifications.add({ type: 'info', title: 'Chat Cleared' });
		}

		function stopStream() {
			if (abortController) {
				abortController.abort();
				notifications.add({ type: 'info', title: 'AI response stopped' });
			}
		}

		return {
			get messages() { return messages },
			get currentInput() { return currentInput },
			set currentInput(value) { currentInput = value },
			get isLoading() { return isLoading },
			get isStreaming() { return isStreaming },
			sendMessage,
			clearChat,
			stopStream,
			chatContainer,
			autoFocus,
			className
		}
	}
</script>

<!-- =============================================================== -->
<!--               COMPONENT SNIPPET DEFINITIONS                     -->
<!-- =============================================================== -->

{#snippet Card({ children })}
	<div class="card">{@render children()}</div>
{/snippet}

{#snippet CardHeader({ children })}
	<div class="p-6 pb-0">{@render children()}</div>
{/snippet}

{#snippet CardTitle({ children })}
	<h3 class="text-xl font-bold text-crimson">{@render children()}</h3>
{/snippet}

{#snippet CardContent({ children })}
	<div class="p-6 pt-0">{@render children()}</div>
{/snippet}

{#snippet DashboardPage({ data })}
	{@const { user, stats, recentActivity, systemHealth } = DashboardPage({ data })}
	<main class="dashboard-grid">
		<div class="col-span-3">
			<h1 class="text-3xl font-bold text-nier-white">Welcome back, {user.name || 'Prosecutor'}</h1>
			<p class="text-nier-light-gray">Here's a summary of your current workload.</p>
		</div>

		{#snippet MetricCard(title, value, icon)}
			<Card>
				<CardHeader>
					<div class="flex justify-between items-center">
						<h4 class="font-semibold text-nier-light-gray">{title}</h4>
						<svelte:component this={icon} class="w-5 h-5 text-gold" />
					</div>
				</CardHeader>
				<CardContent>
					<p class="text-3xl font-bold text-nier-white">{value}</p>
				</CardContent>
			</Card>
		{/snippet}

		<div class="col-span-3 grid grid-cols-1 md:grid-cols-4 gap-4">
			{@render MetricCard({ title: "Total Cases", value: stats.totalCases, icon: FileText })}
			{@render MetricCard({ title: "Open Cases", value: stats.openCases, icon: FileText })}
			{@render MetricCard({ title: "Closed Cases", value: stats.closedCases, icon: FileText })}
			{@render MetricCard({ title: "Evidence Items", value: stats.evidenceCount, icon: Scale })}
		</div>
	</main>
{/snippet}

{#snippet AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	{@const { messages, currentInput, isLoading, isStreaming, sendMessage, clearChat, stopStream, chatContainer } = AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	<div class="ai-chat-interface {className}">
		<header class="status-bar">
			<AIStatusIndicator />
			<div class="conversation-actions">
				<button title="Clear Chat" class="btn-icon" on:click={clearChat}>
					<Trash2 size={16} />
				</button>
			</div>
		</header>
		<div class="chat-messages" bind:this={chatContainer}>
			{#if messages.length === 0}
				<div class="welcome-message">
					<h3>AI Assistant</h3>
					<p>How can I help you with this case today?</p>
				</div>
			{:else}
				{#each messages as message (message.id)}
					<AIChatMessage
						{message}
						showSources={message.role === 'assistant' && (message.sources?.length ?? 0) > 0}
						showMetadata={message.role === 'assistant' && !!message.metadata}
					/>
				{/each}
			{/if}
			{#if isLoading && !isStreaming}
				<div class="processing-message">
					<div class="loading-spinner"></div>
					<span>Thinking...</span>
				</div>
			{/if}
		</div>
		<div class="chat-input-container">
			<AIChatInput
				bind:value={currentInput}
				on:submit={sendMessage}
				{isLoading}
				{isStreaming}
				on:stop={stopStream}
				placeholder="Ask a question about the case..."
				{autoFocus}
			/>
		</div>
	</div>
{/snippet}

{#snippet ReportBuilderPage({ data })}
	{@const { report, canvasState, evidenceList } = ReportBuilderPage({ data })}
	<div class="report-builder-container">
		<h1 class="text-2xl font-bold mb-4 text-nier-white">{report.title}</h1>
		{#if report && canvasState}
			<!-- This would be your actual CanvasEditor component -->
			<div class="nier-card-interactive p-4 min-h-[400px]">
				<p class="text-nier-light-gray">Canvas Editor for "{report.title}" would be rendered here.</p>
			</div>
		{:else}
			<p>Loading report data...</p>
		{/if}
	</div>
{/snippet}

{#snippet ReportsPage({ data })}
	{@const { reports } = ReportsPage({ data })}
	<div class="nier-card-interactive p-6">
		{#if reports.length === 0}
			<p>No reports found.</p>
		{:else}
			<ul class="space-y-4">
				{#each reports as report (report.id)}
					<li class="p-4 bg-nier-surface-light rounded-md border border-nier-border">
						<a href="/reports/{report.id}" class="font-semibold text-gold hover:text-crimson">{report.title}</a>
						<p class="text-sm text-nier-light-gray">Case ID: {report.caseId}</p>
					</li>
				{/each}
			</ul>
		{/if}
	</div>
{/snippet}

{#snippet TestUploadPage()}
	<div class="nier-card-interactive p-6">
		<h3 class="text-xl font-bold text-crimson mb-2">File Upload</h3>
		<!-- Using the placeholder component with the corrected named import -->
		<AdvancedFileUpload />
		<div class="mt-4 p-4 bg-nier-surface-light border border-nier-border rounded-md">
			<p class="font-mono text-sm text-digital-green">
				&lt;script&gt;<br/>
				&nbsp;&nbsp;// Correct import for Svelte 5<br/>
				&nbsp;&nbsp;import &#123; AdvancedFileUpload &#125; from '$lib/components/upload/AdvancedFileUpload.svelte';<br/>
				&lt;/script&gt;
			</p>
		</div>
	</div>
{/snippet}


<style>
	/* Styles for the Showcase Page Itself */
	:global(body) {
		background-color: var(--color-ui-background);
	}
	.p-8 { padding: 2rem; }
	.font-sans { font-family: "Inter", sans-serif; }
	.bg-nier-surface { background-color: var(--color-ui-surface); }
	.text-nier-white { color: var(--color-primary-off-white); }
	.min-h-screen { min-height: 100vh; }
	.text-3xl { font-size: 1.875rem; }
	.font-bold { font-weight: 700; }
	.mb-4 { margin-bottom: 1rem; }
	.border-b-2 { border-bottom-width: 2px; }
	.border-crimson { border-color: var(--color-accent-crimson); }
	.nier-text-glow { text-shadow: 0 0 5px rgba(165, 28, 48, 0.5); }
	.mb-12 { margin-bottom: 3rem; }
	.text-2xl { font-size: 1.5rem; }
	.font-semibold { font-weight: 600; }
	.text-gold { color: var(--color-accent-gold); }
	.h-\[600px\] { height: 600px; }
	.max-w-3xl { max-width: 48rem; }
	.mx-auto { margin-left: auto; margin-right: auto; }
	.dashboard-grid { display: grid; grid-template-columns: repeat(3, minmax(0, 1fr)); gap: 1.5rem; }
	.col-span-3 { grid-column: span 3 / span 3; }
	.grid { display: grid; }
	.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
	@media (min-width: 768px) {
		.md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
	}
	.gap-4 { gap: 1rem; }

	/* Styles for AIChatInterface Component */
	.ai-chat-interface {
		display: flex;
		flex-direction: column;
		height: 100%;
		background: var(--background);
		border: 1px solid var(--border);
		border-radius: var(--radius);
		overflow: hidden;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
	}
	.status-bar {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem 0.75rem;
		background: var(--card);
		border-bottom: 1px solid var(--border);
	}
	.conversation-actions {
		display: flex;
		gap: 0.5rem;
	}
	.btn-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 32px;
		height: 32px;
		background: none;
		border: none;
		border-radius: var(--radius);
		color: var(--muted-foreground);
		cursor: pointer;
		transition: background-color 0.2s ease;
	}
	.btn-icon:hover {
		background: var(--muted);
	}
	.chat-messages {
		flex: 1;
		overflow-y: auto;
		padding: 1rem;
	}
	.processing-message {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 1rem;
		color: var(--muted-foreground);
	}
	.welcome-message {
		text-align: center;
		padding: 2rem;
		color: var(--muted-foreground);
	}
	.welcome-message h3 {
		margin: 0 0 1rem 0;
		font-size: 1.25rem;
		font-weight: 600;
	}
	.chat-input-container {
		padding: 1rem;
		background: var(--background);
		border-top: 1px solid var(--border);
	}
	.loading-spinner {
		width: 1rem;
		height: 1rem;
		border: 2px solid var(--border);
		border-top-color: var(--primary);
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}
	@keyframes spin {
		from { transform: rotate(0deg); }
		to { transform: rotate(360deg); }
	}
</style>
" code between  and  in the most up-to-date Canvas "Nier-Themed Svelte Components Showcase" document above and am asking a query about/based on this code below.
Instructions to follow:
  * Don't output/edit the document if the query is Direct/Simple. For example, if the query asks for a simple explanation, output a direct answer.
  * Make sure to **edit** the document if the query shows the intent of editing the document, in which case output the entire edited document, **not just that section or the edits**.
    * Don't output the same document/empty document and say that you have edited it.
    * Don't change unrelated code in the document.
  * Don't output  and  in your final response.
  * Any references like "this" or "selected code" refers to the code between  and  tags.
  * Just acknowledge my request in the introduction.
  * Make sure to refer to the document as "Canvas" in your response.

yes keep go

canvas, part 2:
<!-- 
=================================================================
  NieR & Harvard-Themed Svelte Components Showcase
  This file contains multiple components, styled with nier.css,
  for easy parsing by AI agents.
=================================================================
-->

<script lang="ts">
	// Main script for the showcase page
	import { createDialog, createCard, createButton } from 'bits-ui';
	import { onMount, tick } from 'svelte';
	import type { ChatMessage, Case, Evidence, Report, CanvasState, CitationPoint, User as AppUser, HelpArticle } from '$lib/data/types'; // Consolidated types
	import { notifications } from '$lib/stores/notification'; // Assuming path
	import { aiService } from '$lib/services/aiService'; // Assuming path
	import { ArrowDown, CornerDownLeft, Trash2, Bot, User, LayoutDashboard, FileText, Users, Scale, UploadCloud, LifeBuoy, Settings, FileQuestion } from 'lucide-svelte';

	// State for the Modal demo
	const {
		elements: { trigger, overlay, content, title, description, close },
		states: { open }
	} = createDialog();

	// Props for AI Chat Interface Demo
	let chatInterfaceProps = {
		initialMessages: [],
		caseId: 'CASE-123-XYZ',
		autoFocus: true
	};

	// Props for Dashboard Demo
	let dashboardData = {
		user: { name: 'John Doe', email: 'john.doe@example.com' },
		stats: { totalCases: 12, openCases: 5, closedCases: 7, evidenceCount: 142 },
		recentActivity: [],
		systemHealth: { status: 'Operational', services: [] }
	};

	// Props for Report Builder Demo
	let reportBuilderData = {
		report: { id: 'report-001', title: 'Initial Incident Report', content: '', caseId: 'CASE-123-XYZ' },
		evidenceList: [
			{ id: 'ev-001', title: 'Witness Statement A', type: 'document', content: '...' },
			{ id: 'ev-002', title: 'Security Footage', type: 'video', content: '...' }
		],
		canvasState: {
			id: 'canvas-001',
			caseId: 'CASE-123-XYZ',
			data: { nodes: [], edges: [] }
		}
	};
	
	// Props for Reports Page Demo
	let reportsPageData = {
		reports: [
			{ id: 'report-001', title: 'Incident Report', caseId: 'CASE-123-XYZ', content: '' },
			{ id: 'report-002', title: 'Forensic Analysis', caseId: 'CASE-456-ABC', content: '' }
		]
	};
	
	// Props for Help Page Demo
	let helpPageData = {
		articles: [
			{ id: 'get-start', category: 'getting-started', title: 'Getting Started', description: 'Basics of the legal AI system.', tags: ['onboarding', 'basics'] },
			{ id: 'adv-feat', category: 'advanced-features', title: 'Advanced Features', description: 'Power user features and tips.', tags: ['pro', 'ai'] }
		]
	};

</script>

<div class="p-8 font-sans bg-nier-surface text-nier-white min-h-screen">
	<h1 class="text-3xl font-bold mb-4 border-b-2 border-crimson nier-text-glow">Component Showcase</h1>
	
	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/card/Card.svelte                    -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Card Component</h2>
		<div class="nier-card-interactive p-6">
			<h3 class="text-xl font-bold text-crimson mb-2">Case File: 042</h3>
			<p class="text-nier-light-gray">This card component is styled using the interactive NieR theme, with a subtle holographic sheen on hover.</p>
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/modal/Modal.svelte                  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Modal Component</h2>
		<Button on:click={() => open.set(true)}>Open Modal</Button>
		{#if $open}
			<div {...$overlay} class="fixed inset-0 bg-black/60 z-40" />
			<div
				{...$content}
				class="fixed left-1/2 top-1/2 z-50 w-full max-w-md -translate-x-1/2 -translate-y-1/2 bg-nier-surface border-crimson nier-border p-6 shadow-lg"
			>
				<h3 {...$title} class="text-xl font-bold text-crimson mb-2">System Alert</h3>
				<p {...$description} class="text-nier-light-gray mb-4">
					This modal uses the `createDialog` builder from bits-ui, styled with the NieR theme.
				</p>
				<div class="flex justify-end">
					<Button on:click={() => open.set(false)} variant="secondary">Acknowledge</Button>
				</div>
			</div>
		{/if}
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ai/AIChatInterface.svelte (Corrected)  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">AI Chat Interface</h2>
		<div class="h-[600px] max-w-3xl mx-auto">
			<AIChatInterface {...chatInterfaceProps} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/dashboard/+page.svelte (Corrected)             -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Dashboard Page</h2>
		<div class="dashboard-page-container">
			<DashboardPage data={dashboardData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/report-builder/+page.svelte (Corrected)        -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Report Builder Page</h2>
		<div class="report-builder-container">
			<ReportBuilderPage data={reportBuilderData} />
		</div>
	</section>
	
	<!-- =============================================================== -->
	<!-- FILE: src/routes/reports/+page.svelte (Corrected)               -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Reports Page</h2>
		<div class="reports-page-container">
			<ReportsPage data={reportsPageData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/test-upload/+page.svelte (Corrected)           -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Test Upload Page (Import Fix)</h2>
		<div class="test-upload-container">
			<TestUploadPage />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/help/+page.svelte (Corrected)                  -->
	<!-- =============================================================== -->
	<section>
		<h2 class="text-2xl font-semibold mb-4 text-gold">Help Page</h2>
		<div class="help-page-container">
			<HelpPage data={helpPageData} />
		</div>
	</section>
</div>


<!-- =============================================================== -->
<!--               COMPONENT DEFINITIONS BELOW                       -->
<!-- =============================================================== -->

<script lang="ts" context="module">
	// Import shared utilities or types if needed by multiple components
	import AIStatusIndicator from '$lib/components/ai/AIStatusIndicator.svelte';
	import AIChatMessage from '$lib/components/ai/AIChatMessage.svelte';
	import AIChatInput from '$lib/components/ai/AIChatInput.svelte';
	import CanvasEditor from '$lib/components/CanvasEditor.svelte'; // Placeholder

	// --- Card Components (bits-ui styled) ---
	function Card(props: { children: any }) { return { props } }
	function CardHeader(props: { children: any }) { return { props } }
	function CardTitle(props: { children: any }) { return { props } }
	function CardContent(props: { children: any }) { return { props } }
	
	// --- Placeholder for AdvancedFileUpload ---
	function AdvancedFileUpload(props: {}) { return {} }

	// --- Button Component (bits-ui styled) ---
	function Button(props: { children?: any, variant?: 'primary' | 'secondary', [key: string]: any }) {
		const { builder } = createButton();
		return { ...props, builder };
	}
	
	// --- DashboardPage Component (from src/routes/dashboard/+page.svelte) ---
	function DashboardPage(props: { data: any }) {
		const { data } = props;
		const { user, stats, recentActivity, systemHealth } = data;
		return { user, stats, recentActivity, systemHealth };
	}

	// --- ReportBuilderPage Component ---
	function ReportBuilderPage(props: { data: { report: Report, evidenceList: Evidence[], canvasState: CanvasState } }) {
		const { data } = props;
		return { ...data };
	}
	
	// --- ReportsPage Component ---
	function ReportsPage(props: { data: { reports: Report[] } }) {
		const { data } = props;
		return { ...data };
	}

	// --- HelpPage Component ---
	function HelpPage(props: { data: { articles: HelpArticle[] } }) {
		const { data } = props;
		let searchQuery = $state('');
		let selectedCategory = $state('all');
		let filteredArticles = $derived(() => {
			return data.articles.filter(article => {
				const categoryMatch = selectedCategory === 'all' || article.category === selectedCategory;
				const searchMatch = !searchQuery || article.title.toLowerCase().includes(searchQuery.toLowerCase()) || article.description.toLowerCase().includes(searchQuery.toLowerCase());
				return categoryMatch && searchMatch;
			});
		});

		const categories = [
			{ id: 'all', title: 'All Topics', icon: LayoutDashboard },
			{ id: 'getting-started', title: 'Getting Started', icon: FileText },
			{ id: 'advanced-features', title: 'Advanced Features', icon: Settings },
		];

		return {
			get searchQuery() { return searchQuery },
			set searchQuery(value) { searchQuery = value },
			get selectedCategory() { return selectedCategory },
			set selectedCategory(value) { selectedCategory = value },
			get filteredArticles() { return filteredArticles },
			categories
		};
	}

	// --- AIChatInterface Component ---
	function AIChatInterface(props: { initialMessages: ChatMessage[], autoFocus: boolean, className?: string, caseId: string | undefined }) {
		let { initialMessages, autoFocus, className, caseId } = props;
		let messages = $state<ChatMessage[]>(initialMessages);
		let currentInput = $state('');
		let isLoading = $state(false);
		let isStreaming = $state(false);
		let abortController: AbortController | null = null;
		let chatContainer: HTMLElement;

		$effect(() => {
			if (messages && chatContainer) {
				tick().then(() => {
					chatContainer.scrollTop = chatContainer.scrollHeight;
				});
			}
		});

		async function sendMessage() {
			if (!currentInput.trim() || isLoading) return;
			const userMessage: ChatMessage = { id: crypto.randomUUID(), role: 'user', content: currentInput, timestamp: new Date().toISOString() };
			messages = [...messages, userMessage];
			currentInput = '';
			isLoading = true;
			isStreaming = true;
			abortController = new AbortController();

			try {
				const stream = await aiService.chat(
					[...messages],
					{ includeHistory: true, maxSources: 5, useCache: true },
					{ caseId }, // Context passed as a separate argument
					abortController.signal
				);

				let assistantMessage: ChatMessage = { id: crypto.randomUUID(), role: 'assistant', content: '', timestamp: new Date().toISOString(), sources: [], metadata: undefined };
				messages = [...messages, assistantMessage];

				for await (const chunk of stream) {
					if (abortController.signal.aborted) break;
					assistantMessage.content += chunk.content;
					if (chunk.sources) assistantMessage.sources = chunk.sources;
					if (chunk.metadata) assistantMessage.metadata = chunk.metadata;
					messages = [...messages.slice(0, -1), { ...assistantMessage }];
				}
			} catch (error) {
				if (error instanceof Error && error.name !== 'AbortError') {
					notifications.add({ type: 'error', title: 'AI Chat Error', message: error.message });
					messages = messages.filter(m => m.role !== 'assistant' || m.content !== '');
				}
			} finally {
				isLoading = false;
				isStreaming = false;
				abortController = null;
			}
		}

		function clearChat() {
			messages = [];
			notifications.add({ type: 'info', title: 'Chat Cleared' });
		}

		function stopStream() {
			if (abortController) {
				abortController.abort();
				notifications.add({ type: 'info', title: 'AI response stopped' });
			}
		}

		return {
			get messages() { return messages },
			get currentInput() { return currentInput },
			set currentInput(value) { currentInput = value },
			get isLoading() { return isLoading },
			get isStreaming() { return isStreaming },
			sendMessage,
			clearChat,
			stopStream,
			chatContainer,
			autoFocus,
			className
		}
	}
</script>

<!-- =============================================================== -->
<!--               COMPONENT SNIPPET DEFINITIONS                     -->
<!-- =============================================================== -->

{#snippet Button({ children, variant = 'primary', ...rest })}
	{@const { builder } = Button({ children, variant, ...rest })}
	<button {...rest} use:builder class="btn {variant === 'primary' ? 'btn-primary' : 'btn-secondary'}">
		{#if children}
			{@render children()}
		{/if}
	</button>
{/snippet}

{#snippet Card({ children })}
	<div class="card">{@render children()}</div>
{/snippet}

{#snippet CardHeader({ children })}
	<div class="p-6 pb-0">{@render children()}</div>
{/snippet}

{#snippet CardTitle({ children })}
	<h3 class="text-xl font-bold text-crimson">{@render children()}</h3>
{/snippet}

{#snippet CardContent({ children })}
	<div class="p-6 pt-0">{@render children()}</div>
{/snippet}

{#snippet DashboardPage({ data })}
	{@const { user, stats, recentActivity, systemHealth } = DashboardPage({ data })}
	<main class="dashboard-grid">
		<div class="col-span-3">
			<h1 class="text-3xl font-bold text-nier-white">Welcome back, {user.name || 'Prosecutor'}</h1>
			<p class="text-nier-light-gray">Here's a summary of your current workload.</p>
		</div>

		{#snippet MetricCard(title, value, icon)}
			<Card>
				<CardHeader>
					<div class="flex justify-between items-center">
						<h4 class="font-semibold text-nier-light-gray">{title}</h4>
						<svelte:component this={icon} class="w-5 h-5 text-gold" />
					</div>
				</CardHeader>
				<CardContent>
					<p class="text-3xl font-bold text-nier-white">{value}</p>
				</CardContent>
			</Card>
		{/snippet}

		<div class="col-span-3 grid grid-cols-1 md:grid-cols-4 gap-4">
			{@render MetricCard({ title: "Total Cases", value: stats.totalCases, icon: FileText })}
			{@render MetricCard({ title: "Open Cases", value: stats.openCases, icon: FileText })}
			{@render MetricCard({ title: "Closed Cases", value: stats.closedCases, icon: FileText })}
			{@render MetricCard({ title: "Evidence Items", value: stats.evidenceCount, icon: Scale })}
		</div>
	</main>
{/snippet}

{#snippet AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	{@const { messages, currentInput, isLoading, isStreaming, sendMessage, clearChat, stopStream, chatContainer } = AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	<div class="ai-chat-interface {className}">
		<header class="status-bar">
			<AIStatusIndicator />
			<div class="conversation-actions">
				<button title="Clear Chat" class="btn-icon" on:click={clearChat}>
					<Trash2 size={16} />
				</button>
			</div>
		</header>
		<div class="chat-messages" bind:this={chatContainer}>
			{#if messages.length === 0}
				<div class="welcome-message">
					<h3>AI Assistant</h3>
					<p>How can I help you with this case today?</p>
				</div>
			{:else}
				{#each messages as message (message.id)}
					<AIChatMessage
						{message}
						showSources={message.role === 'assistant' && (message.sources?.length ?? 0) > 0}
						showMetadata={message.role === 'assistant' && !!message.metadata}
					/>
				{/each}
			{/if}
			{#if isLoading && !isStreaming}
				<div class="processing-message">
					<div class="loading-spinner"></div>
					<span>Thinking...</span>
				</div>
			{/if}
		</div>
		<div class="chat-input-container">
			<AIChatInput
				bind:value={currentInput}
				on:submit={sendMessage}
				{isLoading}
				{isStreaming}
				on:stop={stopStream}
				placeholder="Ask a question about the case..."
				{autoFocus}
			/>
		</div>
	</div>
{/snippet}

{#snippet ReportBuilderPage({ data })}
	{@const { report, canvasState, evidenceList } = ReportBuilderPage({ data })}
	<div class="report-builder-container">
		<h1 class="text-2xl font-bold mb-4 text-nier-white">{report.title}</h1>
		{#if report && canvasState}
			<!-- This would be your actual CanvasEditor component -->
			<div class="nier-card-interactive p-4 min-h-[400px]">
				<p class="text-nier-light-gray">Canvas Editor for "{report.title}" would be rendered here.</p>
			</div>
		{:else}
			<p>Loading report data...</p>
		{/if}
	</div>
{/snippet}

{#snippet ReportsPage({ data })}
	{@const { reports } = ReportsPage({ data })}
	<div class="nier-card-interactive p-6">
		{#if reports.length === 0}
			<p>No reports found.</p>
		{:else}
			<ul class="space-y-4">
				{#each reports as report (report.id)}
					<li class="p-4 bg-nier-surface-light rounded-md border border-nier-border">
						<a href="/reports/{report.id}" class="font-semibold text-gold hover:text-crimson">{report.title}</a>
						<p class="text-sm text-nier-light-gray">Case ID: {report.caseId}</p>
					</li>
				{/each}
			</ul>
		{/if}
	</div>
{/snippet}

{#snippet TestUploadPage()}
	<div class="nier-card-interactive p-6">
		<h3 class="text-xl font-bold text-crimson mb-2">File Upload</h3>
		<!-- Using the placeholder component with the corrected named import -->
		<AdvancedFileUpload />
		<div class="mt-4 p-4 bg-nier-surface-light border border-nier-border rounded-md">
			<p class="font-mono text-sm text-digital-green">
				&lt;script&gt;<br/>
				&nbsp;&nbsp;// Correct import for Svelte 5<br/>
				&nbsp;&nbsp;import &#123; AdvancedFileUpload &#125; from '$lib/components/upload/AdvancedFileUpload.svelte';<br/>
				&lt;/script&gt;
			</p>
		</div>
	</div>
{/snippet}

{#snippet HelpPage({ data })}
	{@const { searchQuery, selectedCategory, filteredArticles, categories } = HelpPage({ data })}
	<div class="help-page">
		<!-- Header and Search -->
		<header class="text-center mb-12">
			<h1 class="text-4xl font-bold text-nier-white nier-text-glow">Help & Documentation</h1>
			<p class="text-nier-light-gray mt-2">Find answers and guides to help you use the system effectively.</p>
			<div class="mt-6 max-w-2xl mx-auto">
				<input type="search" bind:value={searchQuery} placeholder="Search articles..." class="input w-full" />
			</div>
		</header>

		<div class="flex gap-8">
			<!-- Categories Sidebar -->
			<aside class="w-1/4">
				<h3 class="text-lg font-semibold text-gold mb-4">Categories</h3>
				<nav class="space-y-2">
					{#each categories as category}
						<button
							class="w-full text-left p-2 rounded-md flex items-center gap-3 transition-colors {selectedCategory === category.id ? 'bg-nier-surface-light text-nier-white' : 'text-nier-light-gray hover:bg-nier-surface-light'}"
							on:click={() => selectedCategory = category.id}
						>
							<svelte:component this={category.icon} class="w-5 h-5" />
							<span>{category.title}</span>
						</button>
					{/each}
				</nav>
			</aside>

			<!-- Articles Grid -->
			<section class="w-3/4">
				{#if filteredArticles.length > 0}
					<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
						{#each filteredArticles as article (article.id)}
							<a href="/help/{article.id}" class="nier-card-interactive block p-6">
								<h4 class="text-xl font-bold text-crimson">{article.title}</h4>
								<p class="text-nier-light-gray mt-2">{article.description}</p>
							</a>
						{/each}
					</div>
				{:else}
					<div class="text-center py-12">
						<FileQuestion class="w-16 h-16 mx-auto text-nier-light-gray" />
						<h3 class="mt-4 text-xl font-semibold text-nier-white">No articles found</h3>
						<p class="text-nier-light-gray mt-1">Try adjusting your search or category filters.</p>
					</div>
				{/if}
			</section>
		</div>
	</div>
{/snippet}


<style>
	/* Styles for the Showcase Page Itself */
	:global(body) {
		background-color: var(--color-ui-background);
	}
	.p-8 { padding: 2rem; }
	.font-sans { font-family: "Inter", sans-serif; }
	.bg-nier-surface { background-color: var(--color-ui-surface); }
	.text-nier-white { color: var(--color-primary-off-white); }
	.min-h-screen { min-height: 100vh; }
	.text-3xl { font-size: 1.875rem; }
	.font-bold { font-weight: 700; }
	.mb-4 { margin-bottom: 1rem; }
	.border-b-2 { border-bottom-width: 2px; }
	.border-crimson { border-color: var(--color-accent-crimson); }
	.nier-text-glow { text-shadow: 0 0 5px rgba(165, 28, 48, 0.5); }
	.mb-12 { margin-bottom: 3rem; }
	.text-2xl { font-size: 1.5rem; }
	.font-semibold { font-weight: 600; }
	.text-gold { color: var(--color-accent-gold); }
	.h-\[600px\] { height: 600px; }
	.max-w-3xl { max-width: 48rem; }
	.mx-auto { margin-left: auto; margin-right: auto; }
	.dashboard-grid { display: grid; grid-template-columns: repeat(3, minmax(0, 1fr)); gap: 1.5rem; }
	.col-span-3 { grid-column: span 3 / span 3; }
	.grid { display: grid; }
	.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
	@media (min-width: 768px) {
		.md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
		.md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
	}
	.gap-4 { gap: 1rem; }
	.gap-8 { gap: 2rem; }
	.flex { display: flex; }
	.space-y-2 > :not([hidden]) ~ :not([hidden]) { margin-top: 0.5rem; }
	.space-y-4 > :not([hidden]) ~ :not([hidden]) { margin-top: 1rem; }

	/* Styles for AIChatInterface Component */
	.ai-chat-interface {
		display: flex;
		flex-direction: column;
		height: 100%;
		background: var(--background);
		border: 1px solid var(--border);
		border-radius: var(--radius);
		overflow: hidden;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
	}
	.status-bar {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem 0.75rem;
		background: var(--card);
		border-bottom: 1px solid var(--border);
	}
	.conversation-actions {
		display: flex;
		gap: 0.5rem;
	}
	.btn-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 32px;
		height: 32px;
		background: none;
		border: none;
		border-radius: var(--radius);
		color: var(--muted-foreground);
		cursor: pointer;
		transition: background-color 0.2s ease;
	}
	.btn-icon:hover {
		background: var(--muted);
	}
	.chat-messages {
		flex: 1;
		overflow-y: auto;
		padding: 1rem;
	}
	.processing-message {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 1rem;
		color: var(--muted-foreground);
	}
	.welcome-message {
		text-align: center;
		padding: 2rem;
		color: var(--muted-foreground);
	}
	.welcome-message h3 {
		margin: 0 0 1rem 0;
		font-size: 1.25rem;
		font-weight: 600;
	}
	.chat-input-container {
		padding: 1rem;
		background: var(--background);
		border-top: 1px solid var(--border);
	}
	.loading-spinner {
		width: 1rem;
		height: 1rem;
		border: 2px solid var(--border);
		border-top-color: var(--primary);
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}
	@keyframes spin {
		from { transform: rotate(0deg); }
		to { transform: rotate(360deg); }
	}
</style>
```

I have selected "<!-- 
=================================================================
  NieR & Harvard-Themed Svelte Components Showcase
  This file contains multiple components, styled with nier.css,
  for easy parsing by AI agents.
=================================================================
-->

<script lang="ts">
	// Main script for the showcase page
	import { createDialog, createCard, createButton } from 'bits-ui';
	import { onMount, tick } from 'svelte';
	import type { ChatMessage, Case, Evidence, Report, CanvasState, CitationPoint, User as AppUser, HelpArticle } from '$lib/data/types'; // Consolidated types
	import { notifications } from '$lib/stores/notification'; // Assuming path
	import { aiService } from '$lib/services/aiService'; // Assuming path
	import { ArrowDown, CornerDownLeft, Trash2, Bot, User, LayoutDashboard, FileText, Users, Scale, UploadCloud, LifeBuoy, Settings } from 'lucide-svelte';

	// State for the Modal demo
	const {
		elements: { trigger, overlay, content, title, description, close },
		states: { open }
	} = createDialog();

	// Props for AI Chat Interface Demo
	let chatInterfaceProps = {
		initialMessages: [],
		caseId: 'CASE-123-XYZ',
		autoFocus: true
	};

	// Props for Dashboard Demo
	let dashboardData = {
		user: { name: 'John Doe', email: 'john.doe@example.com' },
		stats: { totalCases: 12, openCases: 5, closedCases: 7, evidenceCount: 142 },
		recentActivity: [],
		systemHealth: { status: 'Operational', services: [] }
	};

	// Props for Report Builder Demo
	let reportBuilderData = {
		report: { id: 'report-001', title: 'Initial Incident Report', content: '', caseId: 'CASE-123-XYZ' },
		evidenceList: [
			{ id: 'ev-001', title: 'Witness Statement A', type: 'document', content: '...' },
			{ id: 'ev-002', title: 'Security Footage', type: 'video', content: '...' }
		],
		canvasState: {
			id: 'canvas-001',
			caseId: 'CASE-123-XYZ',
			data: { nodes: [], edges: [] }
		}
	};
	
	// Props for Reports Page Demo
	let reportsPageData = {
		reports: [
			{ id: 'report-001', title: 'Incident Report', caseId: 'CASE-123-XYZ', content: '' },
			{ id: 'report-002', title: 'Forensic Analysis', caseId: 'CASE-456-ABC', content: '' }
		]
	};

</script>

<div class="p-8 font-sans bg-nier-surface text-nier-white min-h-screen">
	<h1 class="text-3xl font-bold mb-4 border-b-2 border-crimson nier-text-glow">Component Showcase</h1>
	
	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/card/Card.svelte                    -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Card Component</h2>
		<div class="nier-card-interactive p-6">
			<h3 class="text-xl font-bold text-crimson mb-2">Case File: 042</h3>
			<p class="text-nier-light-gray">This card component is styled using the interactive NieR theme, with a subtle holographic sheen on hover.</p>
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/modal/Modal.svelte                  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Modal Component</h2>
		<Button on:click={() => open.set(true)}>Open Modal</Button>
		{#if $open}
			<div {...$overlay} class="fixed inset-0 bg-black/60 z-40" />
			<div
				{...$content}
				class="fixed left-1/2 top-1/2 z-50 w-full max-w-md -translate-x-1/2 -translate-y-1/2 bg-nier-surface border-crimson nier-border p-6 shadow-lg"
			>
				<h3 {...$title} class="text-xl font-bold text-crimson mb-2">System Alert</h3>
				<p {...$description} class="text-nier-light-gray mb-4">
					This modal uses the `createDialog` builder from bits-ui, styled with the NieR theme.
				</p>
				<div class="flex justify-end">
					<Button on:click={() => open.set(false)} variant="secondary">Acknowledge</Button>
				</div>
			</div>
		{/if}
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ai/AIChatInterface.svelte (Corrected)  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">AI Chat Interface</h2>
		<div class="h-[600px] max-w-3xl mx-auto">
			<AIChatInterface {...chatInterfaceProps} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/dashboard/+page.svelte (Corrected)             -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Dashboard Page</h2>
		<div class="dashboard-page-container">
			<DashboardPage data={dashboardData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/report-builder/+page.svelte (Corrected)        -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Report Builder Page</h2>
		<div class="report-builder-container">
			<ReportBuilderPage data={reportBuilderData} />
		</div>
	</section>
	
	<!-- =============================================================== -->
	<!-- FILE: src/routes/reports/+page.svelte (Corrected)               -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Reports Page</h2>
		<div class="reports-page-container">
			<ReportsPage data={reportsPageData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/test-upload/+page.svelte (Corrected)           -->
	<!-- =============================================================== -->
	<section>
		<h2 class="text-2xl font-semibold mb-4 text-gold">Test Upload Page (Import Fix)</h2>
		<div class="test-upload-container">
			<TestUploadPage />
		</div>
	</section>
</div>


<!-- =============================================================== -->
<!--               COMPONENT DEFINITIONS BELOW                       -->
<!-- =============================================================== -->

<script lang="ts" context="module">
	// Import shared utilities or types if needed by multiple components
	import AIStatusIndicator from '$lib/components/ai/AIStatusIndicator.svelte';
	import AIChatMessage from '$lib/components/ai/AIChatMessage.svelte';
	import AIChatInput from '$lib/components/ai/AIChatInput.svelte';
	import CanvasEditor from '$lib/components/CanvasEditor.svelte'; // Placeholder

	// --- Card Components (bits-ui styled) ---
	function Card(props: { children: any }) { return { props } }
	function CardHeader(props: { children: any }) { return { props } }
	function CardTitle(props: { children: any }) { return { props } }
	function CardContent(props: { children: any }) { return { props } }
	
	// --- Placeholder for AdvancedFileUpload ---
	function AdvancedFileUpload(props: {}) { return {} }

	// --- Button Component (bits-ui styled) ---
	function Button(props: { children?: any, variant?: 'primary' | 'secondary', [key: string]: any }) {
		const { builder } = createButton();
		return { ...props, builder };
	}
	
	// --- DashboardPage Component (from src/routes/dashboard/+page.svelte) ---
	function DashboardPage(props: { data: any }) {
		const { data } = props;
		const { user, stats, recentActivity, systemHealth } = data;
		return { user, stats, recentActivity, systemHealth };
	}

	// --- ReportBuilderPage Component ---
	function ReportBuilderPage(props: { data: { report: Report, evidenceList: Evidence[], canvasState: CanvasState } }) {
		const { data } = props;
		return { ...data };
	}
	
	// --- ReportsPage Component ---
	function ReportsPage(props: { data: { reports: Report[] } }) {
		const { data } = props;
		return { ...data };
	}

	// --- AIChatInterface Component ---
	function AIChatInterface(props: { initialMessages: ChatMessage[], autoFocus: boolean, className?: string, caseId: string | undefined }) {
		let { initialMessages, autoFocus, className, caseId } = props;
		let messages = $state<ChatMessage[]>(initialMessages);
		let currentInput = $state('');
		let isLoading = $state(false);
		let isStreaming = $state(false);
		let abortController: AbortController | null = null;
		let chatContainer: HTMLElement;

		$effect(() => {
			if (messages && chatContainer) {
				tick().then(() => {
					chatContainer.scrollTop = chatContainer.scrollHeight;
				});
			}
		});

		async function sendMessage() {
			if (!currentInput.trim() || isLoading) return;
			const userMessage: ChatMessage = { id: crypto.randomUUID(), role: 'user', content: currentInput, timestamp: new Date().toISOString() };
			messages = [...messages, userMessage];
			currentInput = '';
			isLoading = true;
			isStreaming = true;
			abortController = new AbortController();

			try {
				const stream = await aiService.chat(
					[...messages],
					{ includeHistory: true, maxSources: 5, useCache: true },
					{ caseId }, // Context passed as a separate argument
					abortController.signal
				);

				let assistantMessage: ChatMessage = { id: crypto.randomUUID(), role: 'assistant', content: '', timestamp: new Date().toISOString(), sources: [], metadata: undefined };
				messages = [...messages, assistantMessage];

				for await (const chunk of stream) {
					if (abortController.signal.aborted) break;
					assistantMessage.content += chunk.content;
					if (chunk.sources) assistantMessage.sources = chunk.sources;
					if (chunk.metadata) assistantMessage.metadata = chunk.metadata;
					messages = [...messages.slice(0, -1), { ...assistantMessage }];
				}
			} catch (error) {
				if (error instanceof Error && error.name !== 'AbortError') {
					notifications.add({ type: 'error', title: 'AI Chat Error', message: error.message });
					messages = messages.filter(m => m.role !== 'assistant' || m.content !== '');
				}
			} finally {
				isLoading = false;
				isStreaming = false;
				abortController = null;
			}
		}

		function clearChat() {
			messages = [];
			notifications.add({ type: 'info', title: 'Chat Cleared' });
		}

		function stopStream() {
			if (abortController) {
				abortController.abort();
				notifications.add({ type: 'info', title: 'AI response stopped' });
			}
		}

		return {
			get messages() { return messages },
			get currentInput() { return currentInput },
			set currentInput(value) { currentInput = value },
			get isLoading() { return isLoading },
			get isStreaming() { return isStreaming },
			sendMessage,
			clearChat,
			stopStream,
			chatContainer,
			autoFocus,
			className
		}
	}
</script>

<!-- =============================================================== -->
<!--               COMPONENT SNIPPET DEFINITIONS                     -->
<!-- =============================================================== -->

{#snippet Button({ children, variant = 'primary', ...rest })}
	{@const { builder } = Button({ children, variant, ...rest })}
	<button {...rest} use:builder class="btn {variant === 'primary' ? 'btn-primary' : 'btn-secondary'}">
		{#if children}
			{@render children()}
		{/if}
	</button>
{/snippet}

{#snippet Card({ children })}
	<div class="card">{@render children()}</div>
{/snippet}

{#snippet CardHeader({ children })}
	<div class="p-6 pb-0">{@render children()}</div>
{/snippet}

{#snippet CardTitle({ children })}
	<h3 class="text-xl font-bold text-crimson">{@render children()}</h3>
{/snippet}

{#snippet CardContent({ children })}
	<div class="p-6 pt-0">{@render children()}</div>
{/snippet}

{#snippet DashboardPage({ data })}
	{@const { user, stats, recentActivity, systemHealth } = DashboardPage({ data })}
	<main class="dashboard-grid">
		<div class="col-span-3">
			<h1 class="text-3xl font-bold text-nier-white">Welcome back, {user.name || 'Prosecutor'}</h1>
			<p class="text-nier-light-gray">Here's a summary of your current workload.</p>
		</div>

		{#snippet MetricCard(title, value, icon)}
			<Card>
				<CardHeader>
					<div class="flex justify-between items-center">
						<h4 class="font-semibold text-nier-light-gray">{title}</h4>
						<svelte:component this={icon} class="w-5 h-5 text-gold" />
					</div>
				</CardHeader>
				<CardContent>
					<p class="text-3xl font-bold text-nier-white">{value}</p>
				</CardContent>
			</Card>
		{/snippet}

		<div class="col-span-3 grid grid-cols-1 md:grid-cols-4 gap-4">
			{@render MetricCard({ title: "Total Cases", value: stats.totalCases, icon: FileText })}
			{@render MetricCard({ title: "Open Cases", value: stats.openCases, icon: FileText })}
			{@render MetricCard({ title: "Closed Cases", value: stats.closedCases, icon: FileText })}
			{@render MetricCard({ title: "Evidence Items", value: stats.evidenceCount, icon: Scale })}
		</div>
	</main>
{/snippet}

{#snippet AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	{@const { messages, currentInput, isLoading, isStreaming, sendMessage, clearChat, stopStream, chatContainer } = AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	<div class="ai-chat-interface {className}">
		<header class="status-bar">
			<AIStatusIndicator />
			<div class="conversation-actions">
				<button title="Clear Chat" class="btn-icon" on:click={clearChat}>
					<Trash2 size={16} />
				</button>
			</div>
		</header>
		<div class="chat-messages" bind:this={chatContainer}>
			{#if messages.length === 0}
				<div class="welcome-message">
					<h3>AI Assistant</h3>
					<p>How can I help you with this case today?</p>
				</div>
			{:else}
				{#each messages as message (message.id)}
					<AIChatMessage
						{message}
						showSources={message.role === 'assistant' && (message.sources?.length ?? 0) > 0}
						showMetadata={message.role === 'assistant' && !!message.metadata}
					/>
				{/each}
			{/if}
			{#if isLoading && !isStreaming}
				<div class="processing-message">
					<div class="loading-spinner"></div>
					<span>Thinking...</span>
				</div>
			{/if}
		</div>
		<div class="chat-input-container">
			<AIChatInput
				bind:value={currentInput}
				on:submit={sendMessage}
				{isLoading}
				{isStreaming}
				on:stop={stopStream}
				placeholder="Ask a question about the case..."
				{autoFocus}
			/>
		</div>
	</div>
{/snippet}

{#snippet ReportBuilderPage({ data })}
	{@const { report, canvasState, evidenceList } = ReportBuilderPage({ data })}
	<div class="report-builder-container">
		<h1 class="text-2xl font-bold mb-4 text-nier-white">{report.title}</h1>
		{#if report && canvasState}
			<!-- This would be your actual CanvasEditor component -->
			<div class="nier-card-interactive p-4 min-h-[400px]">
				<p class="text-nier-light-gray">Canvas Editor for "{report.title}" would be rendered here.</p>
			</div>
		{:else}
			<p>Loading report data...</p>
		{/if}
	</div>
{/snippet}

{#snippet ReportsPage({ data })}
	{@const { reports } = ReportsPage({ data })}
	<div class="nier-card-interactive p-6">
		{#if reports.length === 0}
			<p>No reports found.</p>
		{:else}
			<ul class="space-y-4">
				{#each reports as report (report.id)}
					<li class="p-4 bg-nier-surface-light rounded-md border border-nier-border">
						<a href="/reports/{report.id}" class="font-semibold text-gold hover:text-crimson">{report.title}</a>
						<p class="text-sm text-nier-light-gray">Case ID: {report.caseId}</p>
					</li>
				{/each}
			</ul>
		{/if}
	</div>
{/snippet}

{#snippet TestUploadPage()}
	<div class="nier-card-interactive p-6">
		<h3 class="text-xl font-bold text-crimson mb-2">File Upload</h3>
		<!-- Using the placeholder component with the corrected named import -->
		<AdvancedFileUpload />
		<div class="mt-4 p-4 bg-nier-surface-light border border-nier-border rounded-md">
			<p class="font-mono text-sm text-digital-green">
				&lt;script&gt;<br/>
				&nbsp;&nbsp;// Correct import for Svelte 5<br/>
				&nbsp;&nbsp;import &#123; AdvancedFileUpload &#125; from '$lib/components/upload/AdvancedFileUpload.svelte';<br/>
				&lt;/script&gt;
			</p>
		</div>
	</div>
{/snippet}

{#snippet HelpPage({ data })}
	{@const { searchQuery, selectedCategory, filteredArticles, categories } = HelpPage({ data })}
	<div class="help-page">
		<!-- Header and Search -->
		<header class="text-center mb-12">
			<h1 class="text-4xl font-bold text-nier-white nier-text-glow">Help & Documentation</h1>
			<p class="text-nier-light-gray mt-2">Find answers and guides to help you use the system effectively.</p>
			<div class="mt-6 max-w-2xl mx-auto">
				<input type="search" bind:value={searchQuery} placeholder="Search articles..." class="input w-full" />
			</div>
		</header>

		<div class="flex gap-8">
			<!-- Categories Sidebar -->
			<aside class="w-1/4">
				<h3 class="text-lg font-semibold text-gold mb-4">Categories</h3>
				<nav class="space-y-2">
					{#each categories as category}
						<button
							class="w-full text-left p-2 rounded-md flex items-center gap-3 transition-colors {selectedCategory === category.id ? 'bg-nier-surface-light text-nier-white' : 'text-nier-light-gray hover:bg-nier-surface-light'}"
							on:click={() => selectedCategory = category.id}
						>
							<svelte:component this={category.icon} class="w-5 h-5" />
							<span>{category.title}</span>
						</button>
					{/each}
				</nav>
			</aside>

			<!-- Articles Grid -->
			<section class="w-3/4">
				{#if filteredArticles.length > 0}
					<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
						{#each filteredArticles as article (article.id)}
							<a href="/help/{article.id}" class="nier-card-interactive block p-6">
								<h4 class="text-xl font-bold text-crimson">{article.title}</h4>
								<p class="text-nier-light-gray mt-2">{article.description}</p>
							</a>
						{/each}
					</div>
				{:else}
					<div class="text-center py-12">
						<FileQuestion class="w-16 h-16 mx-auto text-nier-light-gray" />
						<h3 class="mt-4 text-xl font-semibold text-nier-white">No articles found</h3>
						<p class="text-nier-light-gray mt-1">Try adjusting your search or category filters.</p>
					</div>
				{/if}
			</section>
		</div>
	</div>
{/snippet}


<style>
	/* Styles for the Showcase Page Itself */
	:global(body) {
		background-color: var(--color-ui-background);
	}
	.p-8 { padding: 2rem; }
	.font-sans { font-family: "Inter", sans-serif; }
	.bg-nier-surface { background-color: var(--color-ui-surface); }
	.text-nier-white { color: var(--color-primary-off-white); }
	.min-h-screen { min-height: 100vh; }
	.text-3xl { font-size: 1.875rem; }
	.font-bold { font-weight: 700; }
	.mb-4 { margin-bottom: 1rem; }
	.border-b-2 { border-bottom-width: 2px; }
	.border-crimson { border-color: var(--color-accent-crimson); }
	.nier-text-glow { text-shadow: 0 0 5px rgba(165, 28, 48, 0.5); }
	.mb-12 { margin-bottom: 3rem; }
	.text-2xl { font-size: 1.5rem; }
	.font-semibold { font-weight: 600; }
	.text-gold { color: var(--color-accent-gold); }
	.h-\[600px\] { height: 600px; }
	.max-w-3xl { max-width: 48rem; }
	.mx-auto { margin-left: auto; margin-right: auto; }
	.dashboard-grid { display: grid; grid-template-columns: repeat(3, minmax(0, 1fr)); gap: 1.5rem; }
	.col-span-3 { grid-column: span 3 / span 3; }
	.grid { display: grid; }
	.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
	@media (min-width: 768px) {
		.md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
		.md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
	}
	.gap-4 { gap: 1rem; }
	.gap-8 { gap: 2rem; }
	.flex { display: flex; }
	.space-y-2 > :not([hidden]) ~ :not([hidden]) { margin-top: 0.5rem; }
	.space-y-4 > :not([hidden]) ~ :not([hidden]) { margin-top: 1rem; }

	/* Styles for AIChatInterface Component */
	.ai-chat-interface {
		display: flex;
		flex-direction: column;
		height: 100%;
		background: var(--background);
		border: 1px solid var(--border);
		border-radius: var(--radius);
		overflow: hidden;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
	}
	.status-bar {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem 0.75rem;
		background: var(--card);
		border-bottom: 1px solid var(--border);
	}
	.conversation-actions {
		display: flex;
		gap: 0.5rem;
	}
	.btn-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 32px;
		height: 32px;
		background: none;
		border: none;
		border-radius: var(--radius);
		color: var(--muted-foreground);
		cursor: pointer;
		transition: background-color 0.2s ease;
	}
	.btn-icon:hover {
		background: var(--muted);
	}
	.chat-messages {
		flex: 1;
		overflow-y: auto;
		padding: 1rem;
	}
	.processing-message {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 1rem;
		color: var(--muted-foreground);
	}
	.welcome-message {
		text-align: center;
		padding: 2rem;
		color: var(--muted-foreground);
	}
	.welcome-message h3 {
		margin: 0 0 1rem 0;
		font-size: 1.25rem;
		font-weight: 600;
	}
	.chat-input-container {
		padding: 1rem;
		background: var(--background);
		border-top: 1px solid var(--border);
	}
	.loading-spinner {
		width: 1rem;
		height: 1rem;
		border: 2px solid var(--border);
		border-top-color: var(--primary);
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}
	@keyframes spin {
		from { transform: rotate(0deg); }
		to { transform: rotate(360deg); }
	}
</style>
```

I have selected "<!-- 
=================================================================
  NieR & Harvard-Themed Svelte Components Showcase
  This file contains multiple components, styled with nier.css,
  for easy parsing by AI agents.
=================================================================
-->

<script lang="ts">
	// Main script for the showcase page
	import { createDialog, createCard, createButton } from 'bits-ui';
	import { onMount, tick } from 'svelte';
	import type { ChatMessage, Case, Evidence, Report, CanvasState, CitationPoint, User as AppUser, HelpArticle } from '$lib/data/types'; // Consolidated types
	import { notifications } from '$lib/stores/notification'; // Assuming path
	import { aiService } from '$lib/services/aiService'; // Assuming path
	import { ArrowDown, CornerDownLeft, Trash2, Bot, User, LayoutDashboard, FileText, Users, Scale, UploadCloud, LifeBuoy, Settings } from 'lucide-svelte';

	// State for the Modal demo
	const {
		elements: { trigger, overlay, content, title, description, close },
		states: { open }
	} = createDialog();

	// Props for AI Chat Interface Demo
	let chatInterfaceProps = {
		initialMessages: [],
		caseId: 'CASE-123-XYZ',
		autoFocus: true
	};

	// Props for Dashboard Demo
	let dashboardData = {
		user: { name: 'John Doe', email: 'john.doe@example.com' },
		stats: { totalCases: 12, openCases: 5, closedCases: 7, evidenceCount: 142 },
		recentActivity: [],
		systemHealth: { status: 'Operational', services: [] }
	};

	// Props for Report Builder Demo
	let reportBuilderData = {
		report: { id: 'report-001', title: 'Initial Incident Report', content: '', caseId: 'CASE-123-XYZ' },
		evidenceList: [
			{ id: 'ev-001', title: 'Witness Statement A', type: 'document', content: '...' },
			{ id: 'ev-002', title: 'Security Footage', type: 'video', content: '...' }
		],
		canvasState: {
			id: 'canvas-001',
			caseId: 'CASE-123-XYZ',
			data: { nodes: [], edges: [] }
		}
	};
	
	// Props for Reports Page Demo
	let reportsPageData = {
		reports: [
			{ id: 'report-001', title: 'Incident Report', caseId: 'CASE-123-XYZ', content: '' },
			{ id: 'report-002', title: 'Forensic Analysis', caseId: 'CASE-456-ABC', content: '' }
		]
	};

</script>

<div class="p-8 font-sans bg-nier-surface text-nier-white min-h-screen">
	<h1 class="text-3xl font-bold mb-4 border-b-2 border-crimson nier-text-glow">Component Showcase</h1>
	
	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/card/Card.svelte                    -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Card Component</h2>
		<div class="nier-card-interactive p-6">
			<h3 class="text-xl font-bold text-crimson mb-2">Case File: 042</h3>
			<p class="text-nier-light-gray">This card component is styled using the interactive NieR theme, with a subtle holographic sheen on hover.</p>
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ui/modal/Modal.svelte                  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Modal Component</h2>
		<Button on:click={() => open.set(true)}>Open Modal</Button>
		{#if $open}
			<div {...$overlay} class="fixed inset-0 bg-black/60 z-40" />
			<div
				{...$content}
				class="fixed left-1/2 top-1/2 z-50 w-full max-w-md -translate-x-1/2 -translate-y-1/2 bg-nier-surface border-crimson nier-border p-6 shadow-lg"
			>
				<h3 {...$title} class="text-xl font-bold text-crimson mb-2">System Alert</h3>
				<p {...$description} class="text-nier-light-gray mb-4">
					This modal uses the `createDialog` builder from bits-ui, styled with the NieR theme.
				</p>
				<div class="flex justify-end">
					<Button on:click={() => open.set(false)} variant="secondary">Acknowledge</Button>
				</div>
			</div>
		{/if}
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/lib/components/ai/AIChatInterface.svelte (Corrected)  -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">AI Chat Interface</h2>
		<div class="h-[600px] max-w-3xl mx-auto">
			<AIChatInterface {...chatInterfaceProps} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/dashboard/+page.svelte (Corrected)             -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Dashboard Page</h2>
		<div class="dashboard-page-container">
			<DashboardPage data={dashboardData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/report-builder/+page.svelte (Corrected)        -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Report Builder Page</h2>
		<div class="report-builder-container">
			<ReportBuilderPage data={reportBuilderData} />
		</div>
	</section>
	
	<!-- =============================================================== -->
	<!-- FILE: src/routes/reports/+page.svelte (Corrected)               -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Reports Page</h2>
		<div class="reports-page-container">
			<ReportsPage data={reportsPageData} />
		</div>
	</section>

	<!-- =============================================================== -->
	<!-- FILE: src/routes/test-upload/+page.svelte (Corrected)           -->
	<!-- =============================================================== -->
	<section>
		<h2 class="text-2xl font-semibold mb-4 text-gold">Test Upload Page (Import Fix)</h2>
		<div class="test-upload-container">
			<TestUploadPage />
		</div>
	</section>
</div>


<!-- =============================================================== -->
<!--               COMPONENT DEFINITIONS BELOW                       -->
<!-- =============================================================== -->

<script lang="ts" context="module">
	// Import shared utilities or types if needed by multiple components
	import AIStatusIndicator from '$lib/components/ai/AIStatusIndicator.svelte';
	import AIChatMessage from '$lib/components/ai/AIChatMessage.svelte';
	import AIChatInput from '$lib/components/ai/AIChatInput.svelte';
	import CanvasEditor from '$lib/components/CanvasEditor.svelte'; // Placeholder

	// --- Card Components (bits-ui styled) ---
	function Card(props: { children: any }) { return { props } }
	function CardHeader(props: { children: any }) { return { props } }
	function CardTitle(props: { children: any }) { return { props } }
	function CardContent(props: { children: any }) { return { props } }
	
	// --- Placeholder for AdvancedFileUpload ---
	function AdvancedFileUpload(props: {}) { return {} }

	// --- Button Component (bits-ui styled) ---
	function Button(props: { children?: any, variant?: 'primary' | 'secondary', [key: string]: any }) {
		const { builder } = createButton();
		return { ...props, builder };
	}
	
	// --- DashboardPage Component (from src/routes/dashboard/+page.svelte) ---
	function DashboardPage(props: { data: any }) {
		const { data } = props;
		const { user, stats, recentActivity, systemHealth } = data;
		return { user, stats, recentActivity, systemHealth };
	}

	// --- ReportBuilderPage Component ---
	function ReportBuilderPage(props: { data: { report: Report, evidenceList: Evidence[], canvasState: CanvasState } }) {
		const { data } = props;
		return { ...data };
	}
	
	// --- ReportsPage Component ---
	function ReportsPage(props: { data: { reports: Report[] } }) {
		const { data } = props;
		return { ...data };
	}

	// --- AIChatInterface Component ---
	function AIChatInterface(props: { initialMessages: ChatMessage[], autoFocus: boolean, className?: string, caseId: string | undefined }) {
		let { initialMessages, autoFocus, className, caseId } = props;
		let messages = $state<ChatMessage[]>(initialMessages);
		let currentInput = $state('');
		let isLoading = $state(false);
		let isStreaming = $state(false);
		let abortController: AbortController | null = null;
		let chatContainer: HTMLElement;

		$effect(() => {
			if (messages && chatContainer) {
				tick().then(() => {
					chatContainer.scrollTop = chatContainer.scrollHeight;
				});
			}
		});

		async function sendMessage() {
			if (!currentInput.trim() || isLoading) return;
			const userMessage: ChatMessage = { id: crypto.randomUUID(), role: 'user', content: currentInput, timestamp: new Date().toISOString() };
			messages = [...messages, userMessage];
			currentInput = '';
			isLoading = true;
			isStreaming = true;
			abortController = new AbortController();

			try {
				const stream = await aiService.chat(
					[...messages],
					{ includeHistory: true, maxSources: 5, useCache: true },
					{ caseId }, // Context passed as a separate argument
					abortController.signal
				);

				let assistantMessage: ChatMessage = { id: crypto.randomUUID(), role: 'assistant', content: '', timestamp: new Date().toISOString(), sources: [], metadata: undefined };
				messages = [...messages, assistantMessage];

				for await (const chunk of stream) {
					if (abortController.signal.aborted) break;
					assistantMessage.content += chunk.content;
					if (chunk.sources) assistantMessage.sources = chunk.sources;
					if (chunk.metadata) assistantMessage.metadata = chunk.metadata;
					messages = [...messages.slice(0, -1), { ...assistantMessage }];
				}
			} catch (error) {
				if (error instanceof Error && error.name !== 'AbortError') {
					notifications.add({ type: 'error', title: 'AI Chat Error', message: error.message });
					messages = messages.filter(m => m.role !== 'assistant' || m.content !== '');
				}
			} finally {
				isLoading = false;
				isStreaming = false;
				abortController = null;
			}
		}

		function clearChat() {
			messages = [];
			notifications.add({ type: 'info', title: 'Chat Cleared' });
		}

		function stopStream() {
			if (abortController) {
				abortController.abort();
				notifications.add({ type: 'info', title: 'AI response stopped' });
			}
		}

		return {
			get messages() { return messages },
			get currentInput() { return currentInput },
			set currentInput(value) { currentInput = value },
			get isLoading() { return isLoading },
			get isStreaming() { return isStreaming },
			sendMessage,
			clearChat,
			stopStream,
			chatContainer,
			autoFocus,
			className
		}
	}
</script>

<!-- =============================================================== -->
<!--               COMPONENT SNIPPET DEFINITIONS                     -->
<!-- =============================================================== -->

{#snippet Button({ children, variant = 'primary', ...rest })}
	{@const { builder } = Button({ children, variant, ...rest })}
	<button {...rest} use:builder class="btn {variant === 'primary' ? 'btn-primary' : 'btn-secondary'}">
		{#if children}
			{@render children()}
		{/if}
	</button>
{/snippet}

{#snippet Card({ children })}
	<div class="card">{@render children()}</div>
{/snippet}

{#snippet CardHeader({ children })}
	<div class="p-6 pb-0">{@render children()}</div>
{/snippet}

{#snippet CardTitle({ children })}
	<h3 class="text-xl font-bold text-crimson">{@render children()}</h3>
{/snippet}

{#snippet CardContent({ children })}
	<div class="p-6 pt-0">{@render children()}</div>
{/snippet}

{#snippet DashboardPage({ data })}
	{@const { user, stats, recentActivity, systemHealth } = DashboardPage({ data })}
	<main class="dashboard-grid">
		<div class="col-span-3">
			<h1 class="text-3xl font-bold text-nier-white">Welcome back, {user.name || 'Prosecutor'}</h1>
			<p class="text-nier-light-gray">Here's a summary of your current workload.</p>
		</div>

		{#snippet MetricCard(title, value, icon)}
			<Card>
				<CardHeader>
					<div class="flex justify-between items-center">
						<h4 class="font-semibold text-nier-light-gray">{title}</h4>
						<svelte:component this={icon} class="w-5 h-5 text-gold" />
					</div>
				</CardHeader>
				<CardContent>
					<p class="text-3xl font-bold text-nier-white">{value}</p>
				</CardContent>
			</Card>
		{/snippet}

		<div class="col-span-3 grid grid-cols-1 md:grid-cols-4 gap-4">
			{@render MetricCard({ title: "Total Cases", value: stats.totalCases, icon: FileText })}
			{@render MetricCard({ title: "Open Cases", value: stats.openCases, icon: FileText })}
			{@render MetricCard({ title: "Closed Cases", value: stats.closedCases, icon: FileText })}
			{@render MetricCard({ title: "Evidence Items", value: stats.evidenceCount, icon: Scale })}
		</div>
	</main>
{/snippet}

{#snippet AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	{@const { messages, currentInput, isLoading, isStreaming, sendMessage, clearChat, stopStream, chatContainer } = AIChatInterface({ initialMessages, autoFocus, className, caseId })}
	<div class="ai-chat-interface {className}">
		<header class="status-bar">
			<AIStatusIndicator />
			<div class="conversation-actions">
				<button title="Clear Chat" class="btn-icon" on:click={clearChat}>
					<Trash2 size={16} />
				</button>
			</div>
		</header>
		<div class="chat-messages" bind:this={chatContainer}>
			{#if messages.length === 0}
				<div class="welcome-message">
					<h3>AI Assistant</h3>
					<p>How can I help you with this case today?</p>
				</div>
			{:else}
				{#each messages as message (message.id)}
					<AIChatMessage
						{message}
						showSources={message.role === 'assistant' && (message.sources?.length ?? 0) > 0}
						showMetadata={message.role === 'assistant' && !!message.metadata}
					/>
				{/each}
			{/if}
			{#if isLoading && !isStreaming}
				<div class="processing-message">
					<div class="loading-spinner"></div>
					<span>Thinking...</span>
				</div>
			{/if}
		</div>
		<div class="chat-input-container">
			<AIChatInput
				bind:value={currentInput}
				on:submit={sendMessage}
				{isLoading}
				{isStreaming}
				on:stop={stopStream}
				placeholder="Ask a question about the case..."
				{autoFocus}
			/>
		</div>
	</div>
{/snippet}

{#snippet ReportBuilderPage({ data })}
	{@const { report, canvasState, evidenceList } = ReportBuilderPage({ data })}
	<div class="report-builder-container">
		<h1 class="text-2xl font-bold mb-4 text-nier-white">{report.title}</h1>
		{#if report && canvasState}
			<!-- This would be your actual CanvasEditor component -->
			<div class="nier-card-interactive p-4 min-h-[400px]">
				<p class="text-nier-light-gray">Canvas Editor for "{report.title}" would be rendered here.</p>
			</div>
		{:else}
			<p>Loading report data...</p>
		{/if}
	</div>
{/snippet}

{#snippet ReportsPage({ data })}
	{@const { reports } = ReportsPage({ data })}
	<div class="nier-card-interactive p-6">
		{#if reports.length === 0}
			<p>No reports found.</p>
		{:else}
			<ul class="space-y-4">
				{#each reports as report (report.id)}
					<li class="p-4 bg-nier-surface-light rounded-md border border-nier-border">
						<a href="/reports/{report.id}" class="font-semibold text-gold hover:text-crimson">{report.title}</a>
						<p class="text-sm text-nier-light-gray">Case ID: {report.caseId}</p>
					</li>
				{/each}
			</ul>
		{/if}
	</div>
{/snippet}

{#snippet TestUploadPage()}
	<div class="nier-card-interactive p-6">
		<h3 class="text-xl font-bold text-crimson mb-2">File Upload</h3>
		<!-- Using the placeholder component with the corrected named import -->
		<AdvancedFileUpload />
		<div class="mt-4 p-4 bg-nier-surface-light border border-nier-border rounded-md">
			<p class="font-mono text-sm text-digital-green">
				&lt;script&gt;<br/>
				&nbsp;&nbsp;// Correct import for Svelte 5<br/>
				&nbsp;&nbsp;import &#123; AdvancedFileUpload &#125; from '$lib/components/upload/AdvancedFileUpload.svelte';<br/>
				&lt;/script&gt;
			</p>
		</div>
	</div>
{/snippet}

{#snippet HelpPage({ data })}
	{@const { searchQuery, selectedCategory, filteredArticles, categories } = HelpPage({ data })}
	<div class="help-page">
		<!-- Header and Search -->
		<header class="text-center mb-12">
			<h1 class="text-4xl font-bold text-nier-white nier-text-glow">Help & Documentation</h1>
			<p class="text-nier-light-gray mt-2">Find answers and guides to help you use the system effectively.</p>
			<div class="mt-6 max-w-2xl mx-auto">
				<input type="search" bind:value={searchQuery} placeholder="Search articles..." class="input w-full" />
			</div>
		</header>

		<div class="flex gap-8">
			<!-- Categories Sidebar -->
			<aside class="w-1/4">
				<h3 class="text-lg font-semibold text-gold mb-4">Categories</h3>
				<nav class="space-y-2">
					{#each categories as category}
						<button
							class="w-full text-left p-2 rounded-md flex items-center gap-3 transition-colors {selectedCategory === category.id ? 'bg-nier-surface-light text-nier-white' : 'text-nier-light-gray hover:bg-nier-surface-light'}"
							on:click={() => selectedCategory = category.id}
						>
							<svelte:component this={category.icon} class="w-5 h-5" />
							<span>{category.title}</span>
						</button>
					{/each}
				</nav>
			</aside>

			<!-- Articles Grid -->
			<section class="w-3/4">
				{#if filteredArticles.length > 0}
					<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
						{#each filteredArticles as article (article.id)}
							<a href="/help/{article.id}" class="nier-card-interactive block p-6">
								<h4 class="text-xl font-bold text-crimson">{article.title}</h4>
								<p class="text-nier-light-gray mt-2">{article.description}</p>
							</a>
						{/each}
					</div>
				{:else}
					<div class="text-center py-12">
						<FileQuestion class="w-16 h-16 mx-auto text-nier-light-gray" />
						<h3 class="mt-4 text-xl font-semibold text-nier-white">No articles found</h3>
						<p class="text-nier-light-gray mt-1">Try adjusting your search or category filters.</p>
					</div>
				{/if}
			</section>
		</div>
	</div>
{/snippet}


<style>
	/* Styles for the Showcase Page Itself */
	:global(body) {
		background-color: var(--color-ui-background);
	}
	.p-8 { padding: 2rem; }
	.font-sans { font-family: "Inter", sans-serif; }
	.bg-nier-surface { background-color: var(--color-ui-surface); }
	.text-nier-white { color: var(--color-primary-off-white); }
	.min-h-screen { min-height: 100vh; }
	.text-3xl { font-size: 1.875rem; }
	.font-bold { font-weight: 700; }
	.mb-4 { margin-bottom: 1rem; }
	.border-b-2 { border-bottom-width: 2px; }
	.border-crimson { border-color: var(--color-accent-crimson); }
	.nier-text-glow { text-shadow: 0 0 5px rgba(165, 28, 48, 0.5); }
	.mb-12 { margin-bottom: 3rem; }
	.text-2xl { font-size: 1.5rem; }
	.font-semibold { font-weight: 600; }
	.text-gold { color: var(--color-accent-gold); }
	.h-\[600px\] { height: 600px; }
	.max-w-3xl { max-width: 48rem; }
	.mx-auto { margin-left: auto; margin-right: auto; }
	.dashboard-grid { display: grid; grid-template-columns: repeat(3, minmax(0, 1fr)); gap: 1.5rem; }
	.col-span-3 { grid-column: span 3 / span 3; }
	.grid { display: grid; }
	.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
	@media (min-width: 768px) {
		.md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
		.md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
	}
	.gap-4 { gap: 1rem; }
	.gap-8 { gap: 2rem; }
	.flex { display: flex; }
	.space-y-2 > :not([hidden]) ~ :not([hidden]) { margin-top: 0.5rem; }
	.space-y-4 > :not([hidden]) ~ :not([hidden]) { margin-top: 1rem; }

	/* Styles for AIChatInterface Component */
	.ai-chat-interface {
		display: flex;
		flex-direction: column;
		height: 100%;
		background: var(--background);
		border: 1px solid var(--border);
		border-radius: var(--radius);
		overflow: hidden;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
	}
	.status-bar {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.5rem 0.75rem;
		background: var(--card);
		border-bottom: 1px solid var(--border);
	}
	.conversation-actions {
		display: flex;
		gap: 0.5rem;
	}
	.btn-icon {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 32px;
		height: 32px;
		background: none;
		border: none;
		border-radius: var(--radius);
		color: var(--muted-foreground);
		cursor: pointer;
		transition: background-color 0.2s ease;
	}
	.btn-icon:hover {
		background: var(--muted);
	}
	.chat-messages {
		flex: 1;
		overflow-y: auto;
		padding: 1rem;
	}
	.processing-message {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 1rem;
		color: var(--muted-foreground);
	}
	.welcome-message {
		text-align: center;
		padding: 2rem;
		color: var(--muted-foreground);
	}
	.welcome-message h3 {
		margin: 0 0 1rem 0;
		font-size: 1.25rem;
		font-weight: 600;
	}
	.chat-input-container {
		padding: 1rem;
		background: var(--background);
		border-top: 1px solid var(--border);
	}
	.loading-spinner {
		width: 1rem;
		height: 1rem;
		border: 2px solid var(--border);
		border-top-color: var(--primary);
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}
	@keyframes spin {
		from { transform: rotate(0deg); }
		to { transform: rotate(360deg); }
	}
</style>
" code between  and  in the most up-to-date Canvas "Nier-Themed Svelte Components Showcase" document above and am asking a query about/based on this code below.
Instructions to follow:
  * Don't output/edit the document if the query is Direct/Simple. For example, if the query asks for a simple explanation, output a direct answer.
  * Make sure to **edit** the document if the query shows the intent of editing the document, in which case output the entire edited document, **not just that section or the edits**.
    * Don't output the same document/empty document and say that you have edited it.
    * Don't change unrelated code in the document.
  * Don't output  and  in your final response.
  * Any references like "this" or "selected code" refers to the code between  and  tags.
  * Just acknowledge my request in the introduction.
  * Make sure to refer to the document as "Canvas" in your response.

yes keep go



canvas 3rd time:
<!-- 
=================================================================
  NieR & Harvard-Themed Svelte Components Showcase
  This file contains multiple components, styled with nier.css,
  for easy parsing by AI agents.
=================================================================
-->

<script lang="ts">
	// Main script for the showcase page
	import { createDialog, createCard, createButton, createSeparator } from 'bits-ui';
	import { onMount, tick } from 'svelte';
	import type { ChatMessage, Case, Evidence, Report, CanvasState, CitationPoint, User as AppUser, HelpArticle } from '$lib/data/types'; // Consolidated types
	import { notifications } from '$lib/stores/notification'; // Assuming path
	import { aiService } from '$lib/services/aiService'; // Assuming path
	import { ArrowDown, CornerDownLeft, Trash2, Bot, User, LayoutDashboard, FileText, Users, Scale, UploadCloud, LifeBuoy, Settings, FileQuestion, Sun, Moon, Search, Bell } from 'lucide-svelte';

	// State for the Modal demo
	const {
		elements: { trigger, overlay, content, title, description, close },
		states: { open }
	} = createDialog();

	// Props for AI Chat Interface Demo
	let chatInterfaceProps = {
		initialMessages: [],
		caseId: 'CASE-123-XYZ',
		autoFocus: true
	};

	// Props for Layout Demo
	let layoutData = {
		user: { name: 'James', email: 'james@example.com' },
	};

</script>

<div class="p-8 font-sans bg-nier-surface text-nier-white min-h-screen">
	<h1 class="text-3xl font-bold mb-4 border-b-2 border-crimson nier-text-glow">Component Showcase</h1>
	
	<!-- =============================================================== -->
	<!-- FILE: src/routes/+layout.svelte (Styled & Refactored)           -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Layout Showcase</h2>
		<div class="h-[800px] border border-nier-border rounded-lg overflow-hidden">
			<LayoutPage data={layoutData}>
				<div class="p-6">
					<h3 class="text-2xl font-bold text-nier-white mb-4">Main Content Area</h3>
					<p class="text-nier-light-gray">This is where the content of each page (`+page.svelte`) would be rendered via the `&lt;slot /&gt;`.</p>
				</div>
			</LayoutPage>
		</div>
	</section>

	<!-- Other component showcases would follow... -->

</div>


<!-- =============================================================== -->
<!--               COMPONENT DEFINITIONS BELOW                       -->
<!-- =============================================================== -->

<script lang="ts" context="module">
	// Import shared utilities or types if needed by multiple components
	import AIStatusIndicator from '$lib/components/ai/AIStatusIndicator.svelte';
	import AIChatMessage from '$lib/components/ai/AIChatMessage.svelte';
	import AIChatInput from '$lib/components/ai/AIChatInput.svelte';
	import CanvasEditor from '$lib/components/CanvasEditor.svelte'; // Placeholder

	// --- Card Components (bits-ui styled) ---
	function Card(props: { children: any }) { return { props } }
	function CardHeader(props: { children: any }) { return { props } }
	function CardTitle(props: { children: any }) { return { props } }
	function CardContent(props: { children: any }) { return { props } }
	
	// --- Placeholder for AdvancedFileUpload ---
	function AdvancedFileUpload(props: {}) { return {} }

	// --- Button Component (bits-ui styled) ---
	function Button(props: { children?: any, variant?: 'primary' | 'secondary' | 'ghost', [key: string]: any }) {
		const { builder } = createButton();
		return { ...props, builder };
	}

	// --- Separator Component (bits-ui styled) ---
	function Separator(props: { orientation?: 'horizontal' | 'vertical' }) {
		const { builder } = createSeparator(props);
		return { builder, ...props };
	}
	
	// --- LayoutPage Component (from src/routes/+layout.svelte) ---
	function LayoutPage(props: { data: any, children: any }) {
		const { data } = props;
		let theme = $state('dark');
		
		const navLinks = [
			{ href: "/dashboard", label: "Dashboard", icon: LayoutDashboard },
			{ href: "/cases", label: "Cases", icon: FileText },
			{ href: "/evidence", label: "Evidence", icon: Scale },
			{ href: "/users", label: "Users", icon: Users },
		];

		const activityTimeline = [
			{ action: "Uploaded Evidence", details: "witness_statement_01.pdf", time: "2m ago" },
			{ action: "Updated Case", details: "State v. Anderson", time: "1h ago" },
			{ action: "Generated Report", details: "Initial Analysis", time: "3h ago" },
		];

		return { 
			...props, 
			get theme() { return theme },
			set theme(value) { theme = value },
			navLinks,
			activityTimeline
		};
	}
</script>

<!-- =============================================================== -->
<!--               COMPONENT SNIPPET DEFINITIONS                     -->
<!-- =============================================================== -->

{#snippet Button({ children, variant = 'primary', ...rest })}
	{@const { builder } = Button({ children, variant, ...rest })}
	<button {...rest} use:builder class="btn btn-{variant}">
		{#if children}
			{@render children()}
		{/if}
	</button>
{/snippet}

{#snippet Separator({ orientation = 'horizontal' })}
	{@const { builder } = Separator({ orientation })}
	<div use:builder class="{orientation === 'horizontal' ? 'h-[1px] w-full' : 'w-[1px] h-full'} bg-nier-border" />
{/snippet}

{#snippet LayoutPage({ data, children })}
	{@const { theme, navLinks, activityTimeline } = LayoutPage({ data, children })}
	<div class="layout-wrapper" data-theme={theme}>
		<!-- SIDEBAR -->
		<aside class="sidebar">
			<div class="brand">
				<a href="/" class="brand-link">
					<span class="brand-icon">⚖️</span>
					<span class="brand-text">DEEDS</span>
				</a>
			</div>
			<nav class="sidebar-nav">
				{#each navLinks as link}
					<a href={link.href} class="nav-item">
						<svelte:component this={link.icon} class="w-5 h-5" />
						<span>{link.label}</span>
					</a>
				{/each}
			</nav>
			<div class="sidebar-footer">
				<Button variant="ghost" on:click={() => alert('Help clicked!')}><LifeBuoy class="w-5 h-5 mr-2" /> Help & Support</Button>
			</div>
		</aside>

		<div class="main-panel">
			<!-- HEADER -->
			<header class="header">
				<div class="search-bar">
					<Search class="w-5 h-5 text-nier-light-gray" />
					<input type="text" placeholder="Search cases, evidence..." class="search-input" />
				</div>
				<div class="header-actions">
					<Button variant="ghost" on:click={() => theme = (theme === 'dark' ? 'light' : 'dark')}>
						{#if theme === 'dark'} <Sun class="w-5 h-5" /> {:else} <Moon class="w-5 h-5" /> {/if}
					</Button>
					<Button variant="ghost"><Bell class="w-5 h-5" /></Button>
					<Separator orientation="vertical" />
					<div class="user-profile">
						<span>{data.user.name}</span>
						<div class="avatar">{data.user.name.charAt(0)}</div>
					</div>
				</div>
			</header>

			<!-- MAIN CONTENT AREA (GOLDEN RATIO) -->
			<div class="content-grid">
				<main class="content-main">
					{@render children()}
				</main>
				<aside class="content-sidebar">
					<h3 class="text-lg font-semibold text-gold mb-4">Activity Timeline</h3>
					<ul class="space-y-4">
						{#each activityTimeline as item}
							<li class="activity-item">
								<div class="activity-dot"></div>
								<div>
									<p class="font-semibold text-nier-white">{item.action}</p>
									<p class="text-sm text-nier-light-gray">{item.details}</p>
									<p class="text-xs text-nier-muted">{item.time}</p>
								</div>
							</li>
						{/each}
					</ul>
				</aside>
			</div>
		</div>
	</div>
{/snippet}


<style>
	/* Using a more specific font for the Nier theme */
	@import url('https://fonts.googleapis.com/css2?family=Rajdhani:wght@400;500;600;700&family=Inter:wght@400;500;600;700&display=swap');

	:root {
		--font-display: 'Rajdhani', sans-serif;
		--font-body: 'Inter', sans-serif;
	}

	.layout-wrapper {
		display: flex;
		height: 100%;
		background: var(--color-ui-background);
		color: var(--color-ui-text);
		font-family: var(--font-body);
	}

	/* Sidebar */
	.sidebar {
		width: 260px;
		background: var(--color-primary-black);
		border-right: 1px solid var(--color-ui-border);
		display: flex;
		flex-direction: column;
		padding: 1.5rem;
	}
	.brand {
		margin-bottom: 2rem;
	}
	.brand-link {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		text-decoration: none;
	}
	.brand-icon { font-size: 2rem; }
	.brand-text {
		font-family: var(--font-display);
		font-size: 1.75rem;
		font-weight: 700;
		color: var(--color-primary-off-white);
		letter-spacing: 1px;
	}
	.sidebar-nav {
		flex: 1;
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}
	.nav-item {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		padding: 0.75rem 1rem;
		border-radius: var(--radius);
		color: var(--color-ui-text-muted);
		text-decoration: none;
		font-weight: 500;
		transition: all 0.2s ease;
	}
	.nav-item:hover {
		background: var(--color-ui-surface);
		color: var(--color-primary-white);
	}
	.sidebar-footer {
		margin-top: auto;
	}

	/* Main Panel */
	.main-panel {
		flex: 1;
		display: flex;
		flex-direction: column;
		overflow-y: auto;
	}

	/* Header */
	.header {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 1rem 1.5rem;
		border-bottom: 1px solid var(--color-ui-border);
		background: var(--color-ui-background);
		position: sticky;
		top: 0;
		z-index: 10;
	}
	.search-bar {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		background: var(--color-ui-surface);
		padding: 0.5rem 1rem;
		border-radius: var(--radius);
		flex: 0 1 400px;
	}
	.search-input {
		background: transparent;
		border: none;
		outline: none;
		color: var(--color-ui-text);
		width: 100%;
	}
	.header-actions {
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}
	.user-profile {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		margin-left: 0.5rem;
	}
	.avatar {
		width: 36px;
		height: 36px;
		border-radius: 50%;
		background: var(--color-accent-crimson);
		color: var(--color-primary-white);
		display: flex;
		align-items: center;
		justify-content: center;
		font-weight: 600;
	}

	/* Content Grid (Golden Ratio) */
	.content-grid {
		display: grid;
		grid-template-columns: 1.618fr 1fr; /* Golden Ratio */
		gap: 1.5rem;
		padding: 1.5rem;
		flex: 1;
	}
	.content-main {
		background: var(--color-ui-surface);
		border-radius: var(--radius);
		border: 1px solid var(--color-ui-border);
	}
	.content-sidebar {
		padding: 1rem;
	}
	.activity-item {
		display: flex;
		gap: 1rem;
		position: relative;
		padding-left: 1.5rem;
	}
	.activity-dot {
		position: absolute;
		left: 0;
		top: 5px;
		width: 10px;
		height: 10px;
		background: var(--color-accent-gold);
		border-radius: 50%;
		border: 2px solid var(--color-ui-background);
	}
	.activity-item::before {
		content: '';
		position: absolute;
		left: 4px;
		top: 15px;
		bottom: -1rem;
		width: 2px;
		background: var(--color-ui-border);
	}
	ul li:last-child.activity-item::before {
		display: none;
	}

	/* Button Variants */
	.btn {
		padding: 0.5rem 1rem;
		font-weight: 600;
		border-radius: var(--radius);
		transition: all 0.2s ease;
	}
	.btn-primary {
		background: var(--color-accent-crimson);
		color: var(--color-primary-white);
	}
	.btn-primary:hover {
		background: var(--color-accent-dark-crimson);
	}
	.btn-secondary {
		background: var(--color-ui-surface-light);
		color: var(--color-ui-text);
		border: 1px solid var(--color-ui-border);
	}
	.btn-secondary:hover {
		background: var(--color-primary-light-gray);
	}
	.btn-ghost {
		background: transparent;
		color: var(--color-ui-text-muted);
	}
	.btn-ghost:hover {
		background: var(--color-ui-surface);
		color: var(--color-ui-text);
	}
</style>

4th???????

<!-- 
=================================================================
  NieR & Harvard-Themed Svelte Components Showcase
  This file contains multiple components, styled with nier.css,
  for easy parsing by AI agents.
=================================================================
-->

<script lang="ts">
	// Main script for the showcase page
	import { createDialog, createCard, createButton, createSeparator, createDropdownMenu } from 'bits-ui';
	import { onMount, tick } from 'svelte';
	import type { ChatMessage, Case, Evidence, Report, CanvasState, CitationPoint, User as AppUser, HelpArticle } from '$lib/data/types'; // Consolidated types
	import { notifications } from '$lib/stores/notification'; // Assuming path
	import { aiService } from '$lib/services/aiService'; // Assuming path
	import { ArrowDown, CornerDownLeft, Trash2, Bot, User, LayoutDashboard, FileText, Users, Scale, UploadCloud, LifeBuoy, Settings, FileQuestion, Sun, Moon, Search, Bell, MoreHorizontal, PlusCircle, BrainCircuit, ShieldCheck, BarChart3 } from 'lucide-svelte';

	// State for the Modal demo
	const {
		elements: { trigger, overlay, content, title, description, close },
		states: { open }
	} = createDialog();

	// Props for Layout Demo
	let layoutData = {
		user: { name: 'James', email: 'james@example.com' },
	};

</script>

<div class="p-8 font-sans bg-nier-surface text-nier-white min-h-screen">
	<h1 class="text-3xl font-bold mb-4 border-b-2 border-crimson nier-text-glow">Application Showcase</h1>
	
	<!-- =============================================================== -->
	<!-- FILE: src/routes/+layout.svelte (Styled & Refactored)           -->
	<!-- =============================================================== -->
	<section class="mb-12">
		<h2 class="text-2xl font-semibold mb-4 text-gold">Application Layout</h2>
		<div class="h-[900px] border border-nier-border rounded-lg overflow-hidden">
			<LayoutPage data={layoutData} />
		</div>
	</section>
</div>


<!-- =============================================================== -->
<!--               COMPONENT DEFINITIONS BELOW                       -->
<!-- =============================================================== -->

<script lang="ts" context="module">
	// --- MOCK DATA ---
	const mockData = {
		stats: { totalCases: 12, openCases: 5, closedCases: 7, evidenceCount: 142 },
		cases: [
			{ id: 'CASE-001', title: 'State v. Anderson', status: 'Open', priority: 'High', lastUpdated: '2h ago' },
			{ id: 'CASE-002', title: 'People v. Miller', status: 'Closed', priority: 'Low', lastUpdated: '3d ago' },
			{ id: 'CASE-003', title: 'Commonwealth v. Chen', status: 'Pending', priority: 'Medium', lastUpdated: '1w ago' },
		],
		evidence: [
			{ id: 'EV-001', title: 'Witness Statement', type: 'document', caseId: 'CASE-001' },
			{ id: 'EV-002', title: 'Security Footage', type: 'video', caseId: 'CASE-001' },
			{ id: 'EV-003', title: 'Forensic Report', type: 'document', caseId: 'CASE-002' },
		],
		users: [
			{ id: 'USER-001', name: 'James', role: 'Prosecutor', status: 'Active' },
			{ id: 'USER-002', name: 'Claude', role: 'AI Assistant', status: 'Active' },
			{ id: 'USER-003', name: 'Jane Doe', role: 'Investigator', status: 'Inactive' },
		],
		activityTimeline: [
			{ action: "Uploaded Evidence", details: "witness_statement_01.pdf", time: "2m ago" },
			{ action: "Updated Case", details: "State v. Anderson", time: "1h ago" },
			{ action: "Generated Report", details: "Initial Analysis", time: "3h ago" },
		]
	};

	// --- UI COMPONENT BUILDERS ---
	function Button(props: { children?: any, variant?: 'primary' | 'secondary' | 'ghost', [key: string]: any }) {
		const { builder } = createButton();
		return { ...props, builder };
	}
	function Separator(props: { orientation?: 'horizontal' | 'vertical' }) {
		const { builder } = createSeparator(props);
		return { builder, ...props };
	}
	function DropdownMenu(props: any) {
		const { elements, states } = createDropdownMenu();
		return { ...elements, ...states, ...props };
	}

	// --- PAGE SNIPPET LOGIC ---
	function LayoutPage(props: { data: any }) {
		let theme = $state('dark');
		let activePage = $state('Home');
		
		const navLinks = [
			{ href: "#", label: "Home", icon: LayoutDashboard },
			{ href: "#", label: "Cases", icon: FileText },
			{ href: "#", label: "Evidence", icon: Scale },
			{ href: "#", label: "Users", icon: Users },
		];

		return { 
			...props, 
			get theme() { return theme },
			set theme(value) { theme = value },
			get activePage() { return activePage },
			set activePage(value) { activePage = value },
			navLinks,
			activityTimeline: mockData.activityTimeline
		};
	}
</script>

<!-- =============================================================== -->
<!--               COMPONENT SNIPPET DEFINITIONS                     -->
<!-- =============================================================== -->

{#snippet Button({ children, variant = 'primary', ...rest })}
	{@const { builder } = Button({ children, variant, ...rest })}
	<button {...rest} use:builder class="btn btn-{variant}">
		{#if children}
			{@render children()}
		{/if}
	</button>
{/snippet}

{#snippet Separator({ orientation = 'horizontal' })}
	{@const { builder } = Separator({ orientation })}
	<div use:builder class="{orientation === 'horizontal' ? 'h-[1px] w-full' : 'w-[1px] h-full'} bg-nier-border" />
{/snippet}

{#snippet DropdownMenu({ children, triggerContent })}
	{@const { trigger, menu, item } = DropdownMenu()}
	<div class="relative inline-block text-left">
		<button use:trigger {...$trigger} class="btn btn-ghost p-2 h-8 w-8">{@render triggerContent()}</button>
		<div use:menu {...$menu} class="dropdown-menu">
			{@render children({ item })}
		</div>
	</div>
{/snippet}

{#snippet LayoutPage({ data })}
	{@const { theme, navLinks, activityTimeline, activePage, activePage: setActivePage } = LayoutPage({ data })}
	<div class="layout-wrapper" data-theme={theme}>
		<!-- SIDEBAR -->
		<aside class="sidebar">
			<div class="brand">
				<a href="/" class="brand-link">
					<span class="brand-icon">⚖️</span>
					<span class="brand-text">DEEDS</span>
				</a>
			</div>
			<nav class="sidebar-nav">
				{#each navLinks as link}
					<button class="nav-item {activePage === link.label ? 'active' : ''}" on:click={() => setActivePage.set(link.label)}>
						<svelte:component this={link.icon} class="w-5 h-5" />
						<span>{link.label}</span>
					</button>
				{/each}
			</nav>
			<div class="sidebar-footer">
				<Button variant="ghost"><LifeBuoy class="w-5 h-5 mr-2" /> Help & Support</Button>
			</div>
		</aside>

		<div class="main-panel">
			<!-- HEADER -->
			<header class="header">
				<div class="search-bar">
					<Search class="w-5 h-5 text-nier-light-gray" />
					<input type="text" placeholder="Search cases, evidence..." class="search-input" />
				</div>
				<div class="header-actions">
					<Button variant="ghost" on:click={() => theme = (theme === 'dark' ? 'light' : 'dark')}>
						{#if theme === 'dark'} <Sun class="w-5 h-5" /> {:else} <Moon class="w-5 h-5" /> {/if}
					</Button>
					<Button variant="ghost"><Bell class="w-5 h-5" /></Button>
					<Separator orientation="vertical" />
					<div class="user-profile">
						<span>{data.user.name}</span>
						<div class="avatar">{data.user.name.charAt(0)}</div>
					</div>
				</div>
			</header>

			<!-- MAIN CONTENT AREA (GOLDEN RATIO) -->
			<div class="content-grid">
				<main class="content-main">
					{#if activePage === 'Home'}
						{@render HomePage({ data: { recentCases: mockData.cases } })}
					{:else if activePage === 'Cases'}
						{@render CasesPage({ data: { cases: mockData.cases } })}
					{:else if activePage === 'Evidence'}
						{@render EvidencePage({ data: { evidence: mockData.evidence } })}
					{:else if activePage === 'Users'}
						{@render UsersPage({ data: { users: mockData.users } })}
					{/if}
				</main>
				<aside class="content-sidebar">
					<h3 class="text-lg font-semibold text-gold mb-4">Activity Timeline</h3>
					<ul class="space-y-4">
						{#each activityTimeline as item}
							<li class="activity-item">
								<div class="activity-dot"></div>
								<div>
									<p class="font-semibold text-nier-white">{item.action}</p>
									<p class="text-sm text-nier-light-gray">{item.details}</p>
									<p class="text-xs text-nier-muted">{item.time}</p>
								</div>
							</li>
						{/each}
					</ul>
				</aside>
			</div>
		</div>
	</div>
{/snippet}

{#snippet HomePage({ data })}
	<div class="p-6">
		<section class="hero-section text-center py-20">
			<h1 class="text-5xl font-bold font-display nier-text-glow">Advanced Legal Case Management</h1>
			<p class="mt-4 max-w-2xl mx-auto text-nier-light-gray">Harness the power of AI to analyze evidence, build stronger cases, and streamline your prosecution workflow.</p>
			<div class="mt-8 flex justify-center gap-4">
				<Button variant="primary">View Cases</Button>
				<Button variant="secondary">Upload Evidence</Button>
			</div>
		</section>

		<Separator />

		<section class="py-16">
			<h2 class="text-3xl font-bold text-center mb-12 text-gold">Powerful Features</h2>
			<div class="grid md:grid-cols-4 gap-8 text-center">
				{@render FeatureCard({ title: "Document Analysis", description: "AI-powered analysis of legal documents and evidence.", icon: BrainCircuit })}
				{@render FeatureCard({ title: "Case Tracking", description: "Comprehensive case management and progress tracking.", icon: ShieldCheck })}
				{@render FeatureCard({ title: "Smart Insights", description: "Generate insights and recommendations from case data.", icon: BarChart3 })}
				{@render FeatureCard({ title: "Secure & Private", description: "Bank-level security for sensitive legal information.", icon: ShieldCheck })}
			</div>
		</section>
	</div>
{/snippet}

{#snippet FeatureCard(title, description, icon)}
	<div class="feature-card">
		<div class="icon-wrapper">
			<svelte:component this={icon} class="w-10 h-10 text-gold" />
		</div>
		<h3 class="text-xl font-bold mt-4 text-nier-white">{title}</h3>
		<p class="text-nier-light-gray mt-2">{description}</p>
	</div>
{/snippet}

{#snippet CasesPage({ data })}
	<div class="p-6">
		<div class="flex justify-between items-center mb-6">
			<h3 class="text-2xl font-bold text-nier-white">Case Files</h3>
			<Button><PlusCircle class="w-5 h-5 mr-2" /> New Case</Button>
		</div>
		<div class="table-container">
			<table class="w-full text-left">
				<thead>
					<tr>
						<th>Case ID</th><th>Title</th><th>Status</th><th>Priority</th><th>Last Updated</th><th></th>
					</tr>
				</thead>
				<tbody>
					{#each data.cases as caseItem}
						<tr>
							<td>{caseItem.id}</td>
							<td>{caseItem.title}</td>
							<td><span class="badge status-{caseItem.status.toLowerCase()}">{caseItem.status}</span></td>
							<td><span class="badge priority-{caseItem.priority.toLowerCase()}">{caseItem.priority}</span></td>
							<td>{caseItem.lastUpdated}</td>
							<td>
								{@render DropdownMenu()}
									{#snippet triggerContent()}
										<MoreHorizontal class="w-5 h-5" />
									{/snippet}
									{#snippet children({ item })}
										<button use:item {...$item} class="dropdown-item">View Details</button>
										<button use:item {...$item} class="dropdown-item">Edit Case</button>
									{/snippet}
								{/DropdownMenu}
							</td>
						</tr>
					{/each}
				</tbody>
			</table>
		</div>
	</div>
{/snippet}

{#snippet EvidencePage({ data })}
	<div class="p-6">
		<h3 class="text-2xl font-bold text-nier-white mb-6">Evidence Locker</h3>
		<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
			{#each data.evidence as item}
				<div class="nier-card-interactive p-4">
					<div class="flex items-center gap-3 mb-2">
						<FileText class="w-6 h-6 text-gold" />
						<h4 class="font-semibold text-nier-white">{item.title}</h4>
					</div>
					<p class="text-sm text-nier-light-gray">Case: {item.caseId}</p>
					<span class="badge status-document mt-2">{item.type}</span>
				</div>
			{/each}
		</div>
	</div>
{/snippet}

{#snippet UsersPage({ data })}
	<div class="p-6">
		<h3 class="text-2xl font-bold text-nier-white mb-6">User Management</h3>
		<div class="table-container">
			<table class="w-full text-left">
				<thead>
					<tr>
						<th>Name</th><th>Role</th><th>Status</th><th></th>
					</tr>
				</thead>
				<tbody>
					{#each data.users as userItem}
						<tr>
							<td>{userItem.name}</td>
							<td>{userItem.role}</td>
							<td><span class="badge status-{userItem.status.toLowerCase()}">{userItem.status}</span></td>
							<td>
								{@render DropdownMenu()}
									{#snippet triggerContent()}
										<MoreHorizontal class="w-5 h-5" />
									{/snippet}
									{#snippet children({ item })}
										<button use:item {...$item} class="dropdown-item">Edit User</button>
										<button use:item {...$item} class="dropdown-item text-crimson">Deactivate</button>
									{/snippet}
								{/DropdownMenu}
							</td>
						</tr>
					{/each}
				</tbody>
			</table>
		</div>
	</div>
{/snippet}

<style>
	/* Using a more specific font for the Nier theme */
	@import url('https://fonts.googleapis.com/css2?family=Rajdhani:wght@400;500;600;700&family=Inter:wght@400;500;600;700&display=swap');

	:root {
		--font-display: 'Rajdhani', sans-serif;
		--font-body: 'Inter', sans-serif;
	}

	.layout-wrapper { display: flex; height: 100%; background: var(--color-ui-background); color: var(--color-ui-text); font-family: var(--font-body); }
	.sidebar { width: 260px; background: var(--color-primary-black); border-right: 1px solid var(--color-ui-border); display: flex; flex-direction: column; padding: 1.5rem; }
	.brand { margin-bottom: 2rem; }
	.brand-link { display: flex; align-items: center; gap: 0.75rem; text-decoration: none; }
	.brand-icon { font-size: 2rem; }
	.brand-text { font-family: var(--font-display); font-size: 1.75rem; font-weight: 700; color: var(--color-primary-off-white); letter-spacing: 1px; }
	.sidebar-nav { flex: 1; display: flex; flex-direction: column; gap: 0.5rem; }
	.nav-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.75rem 1rem; border-radius: var(--radius); color: var(--color-ui-text-muted); text-decoration: none; font-weight: 500; transition: all 0.2s ease; width: 100%; text-align: left; background: transparent; border: none; cursor: pointer; }
	.nav-item:hover { background: var(--color-ui-surface); color: var(--color-primary-white); }
	.nav-item.active { background: var(--color-accent-crimson); color: var(--color-primary-white); box-shadow: 0 0 10px rgba(165, 28, 48, 0.4); }
	.sidebar-footer { margin-top: auto; }
	.main-panel { flex: 1; display: flex; flex-direction: column; overflow-y: auto; }
	.header { display: flex; align-items: center; justify-content: space-between; padding: 1rem 1.5rem; border-bottom: 1px solid var(--color-ui-border); background: var(--color-ui-background); position: sticky; top: 0; z-index: 10; }
	.search-bar { display: flex; align-items: center; gap: 0.75rem; background: var(--color-ui-surface); padding: 0.5rem 1rem; border-radius: var(--radius); flex: 0 1 400px; }
	.search-input { background: transparent; border: none; outline: none; color: var(--color-ui-text); width: 100%; }
	.header-actions { display: flex; align-items: center; gap: 0.5rem; }
	.user-profile { display: flex; align-items: center; gap: 0.75rem; margin-left: 0.5rem; }
	.avatar { width: 36px; height: 36px; border-radius: 50%; background: var(--color-accent-crimson); color: var(--color-primary-white); display: flex; align-items: center; justify-content: center; font-weight: 600; }
	.content-grid { display: grid; grid-template-columns: 1.618fr 1fr; gap: 1.5rem; padding: 1.5rem; flex: 1; }
	.content-main { background: var(--color-ui-surface); border-radius: var(--radius); border: 1px solid var(--color-ui-border); }
	.content-sidebar { padding: 1rem; }
	.activity-item { display: flex; gap: 1rem; position: relative; padding-left: 1.5rem; }
	.activity-dot { position: absolute; left: 0; top: 5px; width: 10px; height: 10px; background: var(--color-accent-gold); border-radius: 50%; border: 2px solid var(--color-ui-background); }
	.activity-item::before { content: ''; position: absolute; left: 4px; top: 15px; bottom: -1rem; width: 2px; background: var(--color-ui-border); }
	ul li:last-child.activity-item::before { display: none; }
	.btn { padding: 0.5rem 1rem; font-weight: 600; border-radius: var(--radius); transition: all 0.2s ease; cursor: pointer; display: inline-flex; align-items: center; justify-content: center; border: none; }
	.btn-primary { background: var(--color-accent-crimson); color: var(--color-primary-white); }
	.btn-primary:hover { background: var(--color-accent-dark-crimson); }
	.btn-secondary { background: var(--color-ui-surface-light); color: var(--color-ui-text); border: 1px solid var(--color-ui-border); }
	.btn-secondary:hover { background: var(--color-primary-light-gray); }
	.btn-ghost { background: transparent; color: var(--color-ui-text-muted); }
	.btn-ghost:hover { background: var(--color-ui-surface); color: var(--color-ui-text); }
	.table-container { overflow-x: auto; }
	table { border-collapse: collapse; width: 100%; }
	th, td { padding: 0.75rem 1rem; border-bottom: 1px solid var(--color-ui-border); }
	th { font-family: var(--font-display); font-weight: 600; color: var(--color-ui-text-muted); text-transform: uppercase; font-size: 0.75rem; }
	.badge { display: inline-block; padding: 0.25rem 0.6rem; font-size: 0.75rem; font-weight: 600; border-radius: var(--radius-full); }
	.status-open, .status-active { background: rgba(45, 95, 63, 0.2); color: #34d399; }
	.status-closed, .status-inactive { background: rgba(165, 28, 48, 0.2); color: #f87171; }
	.status-pending { background: rgba(201, 169, 110, 0.2); color: #f59e0b; }
	.priority-high { background: rgba(165, 28, 48, 0.3); color: #f87171; }
	.priority-medium { background: rgba(201, 169, 110, 0.3); color: #f59e0b; }
	.priority-low { background: rgba(42, 74, 90, 0.3); color: #60a5fa; }
	.status-document { background: rgba(106, 122, 138, 0.3); color: #9ca3af; }
	.dropdown-menu { background: var(--color-ui-surface-light); border: 1px solid var(--color-ui-border); border-radius: var(--radius); padding: 0.5rem; box-shadow: 0 4px 12px rgba(0,0,0,0.4); z-index: 20; }
	.dropdown-item { display: block; width: 100%; text-align: left; padding: 0.5rem 1rem; background: none; border: none; color: var(--color-ui-text); border-radius: var(--radius); cursor: pointer; }
	.dropdown-item:hover { background: var(--color-accent-crimson); color: var(--color-primary-white); }
	.feature-card .icon-wrapper { width: 64px; height: 64px; border-radius: 50%; background: var(--color-ui-surface); display: flex; align-items: center; justify-content: center; margin: 0 auto; border: 1px solid var(--color-ui-border); }
</style>


4th/5th?
fix all the files in ui #codebase #read_multiple_files #memory use #context7 best practices #file:claude.md #file:copilot.md 
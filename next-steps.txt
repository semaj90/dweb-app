IMMEDIATE ACTION PLAN
=====================

[NOW - 5 minutes]
-----------------
1. Kill all Go processes:
   for /f "tokens=5" %%a in ('netstat -ano ^| findstr :8080') do taskkill /F /PID %%a
   
2. Clean module cache:
   go clean -modcache
   rd /s /q %GOPATH%\pkg\mod\github.com\bytedance
   rd /s /q %GOPATH%\pkg\mod\github.com\NVIDIA
   
3. Build working service:
   cd go-microservice
   set CGO_ENABLED=0
   go build -o service.exe main.go
   service.exe

[TODAY - 30 minutes]
--------------------
4. Create production config:
   - Single service on 8080
   - Ollama on 11434 for GPU
   - Redis on 6379 for cache
   - PostgreSQL optional

5. Implement core endpoints:
   /health - Status check
   /parse - SIMD JSON parsing
   /embed - Proxy to Ollama
   /index - Filesystem indexing
   /analyze - Error analysis

6. Test pipeline:
   curl http://localhost:8080/health
   curl -X POST http://localhost:8080/parse -d @test.json
   curl -X POST http://localhost:8080/embed -d "{\"text\":\"test\"}"

[THIS WEEK]
-----------
7. Production deployment:
   - Use PM2 for process management
   - nginx reverse proxy
   - systemd service (Linux) or NSSM (Windows)
   
8. Monitoring:
   - Prometheus metrics endpoint
   - Grafana dashboard
   - Error tracking (Sentry)

9. Documentation:
   - API spec (OpenAPI)
   - Deployment guide
   - Architecture diagram

TECHNICAL DECISIONS
===================
- CGO: Disabled. Not worth the complexity on Windows.
- GPU: Via Ollama HTTP API. Already working.
- JSON: simdjson-go without CGO. 2-4 GB/s throughput.
- Database: PostgreSQL with pgvector when needed.
- Cache: Redis for hot data.

WORKING CONFIGURATION
====================
Port 8080: Main service (Go)
Port 11434: Ollama (GPU inference)
Port 6379: Redis (cache)
Port 5432: PostgreSQL (optional)
Port 7474: Neo4j (optional)

GPU: RTX 3060 Ti, 8GB VRAM, Compute 8.6
CPU: 16 cores, AVX2 support
Ollama: Operational with 7GB available

STOP DOING
==========
- Fighting Windows CGO
- Duplicating GPU code (use Ollama)
- Running multiple services on same port
- Using Unix-only libraries (sonic)
- Typing PostgreSQL passwords

START DOING
===========
- Pure Go builds (CGO_ENABLED=0)
- HTTP API calls to Ollama for GPU
- Single consolidated service
- Environment-based config
- Batch operations

NEXT COMMAND
============
cd go-microservice && set CGO_ENABLED=0 && go build -o service.exe main.go && service.exe

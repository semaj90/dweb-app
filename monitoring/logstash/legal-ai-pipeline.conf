# Logstash configuration for Legal AI system
# Processes logs from all microservices and forwards to Elasticsearch

input {
  # Beats input for structured logs
  beats {
    port => 5044
  }

  # File input for Go service logs
  file {
    path => "/var/log/legal-ai/go-services/*.log"
    start_position => "beginning"
    codec => "json"
    tags => ["go-service"]
  }

  # File input for Node.js service logs
  file {
    path => "/var/log/legal-ai/node-services/*.log"
    start_position => "beginning"
    codec => "json"
    tags => ["node-service"]
  }

  # File input for SvelteKit frontend logs
  file {
    path => "/var/log/legal-ai/frontend/*.log"
    start_position => "beginning"
    tags => ["frontend"]
  }

  # Syslog input for system-level events
  syslog {
    port => 514
    tags => ["system"]
  }

  # HTTP input for webhook events
  http {
    port => 8080
    tags => ["webhook"]
  }

  # NATS input for real-time message processing
  nats {
    cluster_id => "legal-ai-cluster"
    client_id => "logstash-consumer"
    subject => "legal.logs.*"
    tags => ["nats-stream"]
  }
}

filter {
  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }

  # Parse legal AI specific fields
  if [service] == "legal-analysis" {
    grok {
      match => { 
        "message" => "Document processed: %{DATA:document_id} in %{NUMBER:processing_time:float}ms with confidence %{NUMBER:confidence:float}" 
      }
    }
    
    mutate {
      add_field => { "category" => "document_processing" }
    }
  }

  # Parse vector search logs
  if [service] == "vector-search" {
    grok {
      match => { 
        "message" => "Vector search completed: %{NUMBER:results_count:int} results in %{NUMBER:search_time:float}ms" 
      }
    }
    
    mutate {
      add_field => { "category" => "vector_search" }
    }
  }

  # Parse performance metrics
  if [category] == "performance" {
    metrics {
      meter => [ "processing_rate" ]
      add_tag => [ "performance_metric" ]
    }
  }

  # Parse error logs
  if [level] == "ERROR" or [level] == "error" {
    mutate {
      add_field => { "alert_priority" => "high" }
      add_tag => [ "error_alert" ]
    }
  }

  # Parse memory usage alerts
  if [message] =~ /memory.*usage.*exceeded/ {
    mutate {
      add_field => { "alert_type" => "memory_threshold" }
      add_tag => [ "memory_alert" ]
    }
  }

  # Enrich with geolocation for external requests
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }

  # Add service metadata
  mutate {
    add_field => { 
      "system" => "legal-ai"
      "environment" => "production"
      "region" => "windows-native"
    }
  }

  # Remove sensitive information
  mutate {
    remove_field => [ "password", "api_key", "auth_token" ]
  }
}

output {
  # Primary Elasticsearch output
  elasticsearch {
    hosts => ["localhost:9200"]
    index => "legal-ai-logs-%{+YYYY.MM.dd}"
    template_name => "legal-ai-template"
    template_pattern => "legal-ai-*"
    template => "/etc/logstash/templates/legal-ai.json"
  }

  # Separate index for performance metrics
  if "performance_metric" in [tags] {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "legal-ai-metrics-%{+YYYY.MM.dd}"
    }
  }

  # Separate index for security events
  if [category] == "security" {
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "legal-ai-security-%{+YYYY.MM.dd}"
    }
  }

  # Alert output for critical errors
  if "error_alert" in [tags] {
    http {
      url => "http://localhost:8081/api/alerts"
      http_method => "post"
      format => "json"
      headers => {
        "Content-Type" => "application/json"
        "Authorization" => "Bearer ${ALERT_TOKEN}"
      }
    }
  }

  # NATS output for real-time alerts
  if "memory_alert" in [tags] {
    nats {
      cluster_id => "legal-ai-cluster"
      client_id => "logstash-alerts"
      subject => "legal.alerts.memory"
    }
  }

  # Debug output (only in development)
  if [@metadata][debug] {
    stdout { 
      codec => rubydebug 
    }
  }

  # File output for backup
  file {
    path => "/var/log/legal-ai/processed/legal-ai-%{+YYYY-MM-dd}.log"
    codec => "json_lines"
  }
}
Neo4j + Kratos + Go (neo4kratogo)

Summary
- Backend: rag-kratos (Go + Gin under Kratos) now supports:
  - /embed, /rag, /health, /metrics
  - pgvector search via pgxpool using <-> and metric-aware scoring (cosine|l2|ip)
  - Optional Neo4j graph enrichment with toggle: /rag?graph=1 returns { results, graph:{nodes,edges} }
  - L1/L2 embedding cache (in-memory + optional Redis) with Prometheus metrics (embed_cache_hits/misses)
  - OTLP traces + JSON logs for ELK
- Edge: QUIC/HTTP3 proxy fronts rag-kratos with:
  - HTTP/3 (8443) + HTTPS fallback (8444)
  - In-memory edge cache (TTL, size caps) for JSON
  - ETag/If-None-Match revalidation for GET
  - Prometheus metrics (/metrics): edge_cache_hits_total, edge_cache_misses_total, edge_bytes_served_total
- Env: .env.example updated with PG, Redis, Neo4j, QUIC proxy, cache TTLs, and ports
- Status: Builds pass; /health OK; proxy fallback reachable; features gated by envs and query toggle

Environment (required/optional)
- Postgres (pgvector): PG_CONN_STRING, VECTOR_TABLE, ID_COLUMN, TEXT_COLUMN, VECTOR_COLUMN, DISTANCE_METRIC
- Neo4j (optional enrichment): NEO4J_URI, NEO4J_USER, NEO4J_PASSWORD; enable with /rag?graph=1
- Embeddings: OLLAMA_BASE_URL, EMBED_MODEL; EMBED_CACHE_TTL
- Redis (optional L2 cache): REDIS_ADDR, REDIS_DB, REDIS_PASSWORD
- QUIC proxy: RAG_BACKEND_URL, RAG_QUIC_FRONT_PORT, RAG_QUIC_FALLBACK_PORT, RAG_QUIC_ENABLE_FALLBACK
- Edge cache: QUIC_EDGE_CACHE_TTL, QUIC_EDGE_CACHE_MAX, QUIC_EDGE_CACHE_MAX_BYTES

Running
- VS Code Tasks:
  - Go: Run rag-kratos (builds and starts backend on RAG_HTTP_PORT)
  - Go: Run rag-quic-proxy (builds and starts QUIC/H3 proxy; fallback HTTPS enabled)
- Health checks:
  - Backend:  http://localhost:8093/health
  - Proxy H3: https://localhost:8443/health (requires H3-capable client; self-signed)
  - Proxy TLS: https://localhost:8444/health (self-signed)
  - Metrics:  backend /metrics; proxy /metrics

API Notes
- /rag body: { "query": string, "topK": number }
- /rag?graph=1 aims to enrich each result with connected nodes/edges from Neo4j; provide doc ids in your graph
- Scoring:
  - cosine: 1 - cosine_distance
  - l2:     1 / (1 + l2_distance)
  - ip:     1 / (1 + exp(inner_product))

Prioritized TODO
P0
- Neo4j
  - Replace demo Cypher with schema-accurate queries; de-duplicate nodes/edges; cap results
  - Add context deadlines and better error handling; pool configs
  - Add /graph/health (optional) and a structured Graph schema contract doc
- pgvector
  - Provide IVFFLAT index helper; ensure correct embedding dimension; add ANALYZE after bulk load
- Proxy
  - Add configurable cert/key file support (production) instead of in-memory self-signed
  - Add simple rate limiting and per-path cache controls; header normalization for better ETag reuse
- Backend
  - Add ETag generation for stable JSON responses (hash payload) to maximize proxy revalidation hits
  - Integration tests for /rag and /rag?graph=1, and cache hit/miss metrics sanity checks

P1
- Proxy metrics: add labels (method, path templates, status) and histograms for latency/bytes
- Edge cache: optional Redis-backed persistence, variant TTLs by path
- Neo4j: batch lookups for all doc ids in one query; configurable depth and relation filters
- Backend: add RAG result cache keyed by (query, topK, metric); expiry + purge hooks
- Observability: trace attributes for vector metric, topK, cache hit/miss, and neo4j timings

P2
- Frontend (SvelteKit): small graph panel for enriched results; toggle graph on/off; show cache status hints
- Streaming: expose progressive /rag stream over H3 (bypass proxy cache for text/event-stream)
- Queue: add background warmers (popular queries) and index refresh jobs

Design Tips
- Keep caches layered and conservative; log cache keys/hits at debug only
- Timeouts: backend (embed/search/enrich) should have sensible deadlines; proxy revalidation capped at ~10s
- Security: lock down proxy in prod; rotate certs, add authentication as needed

#context7 pointers
- Use #context7 to pull quick refs for: SvelteKit 2, Ollama, or other FE/AI libs as needed
- Local docs available: context7-docs/sveltekit2.md

Changelog (this pass)
- Added Neo4j enrichment toggle and types; env wiring
- Added QUIC proxy ETag revalidation + Prometheus metrics + /metrics
- Updated .env.example; verified builds and basic health
- New: scripts/create-ivfflat-index.ps1 and sql/ivfflat-index.sql helper; Neo4j enrichment now dedupes nodes/edges, uses elementId IDs, and caps/timeout per doc.

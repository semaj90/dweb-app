{\n  "version": "2.0.0",\n  "tasks": [\n    {\n      "label": "Start Legal AI System",\n      "type": "shell",\n      "command": "${workspaceFolder}/START-LEGAL-AI-WINDOWS.bat",\n      "group": {\n        "kind": "build",\n        "isDefault": true\n      },\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "new"\n      },\n      "problemMatcher": []\n    },\n    {\n      "label": "Test Vector Search (PowerShell)",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "scripts/test-vector-search.ps1",\n        "-Query",\n        "agreement",\n        "-Limit",\n        "5"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "new"\n      },\n      "detail": "Windows-friendly POST using Invoke-RestMethod"\n    },\n    {\n      "label": "üßæ Vector: Scan and Embed",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "vector:scan"],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "new" }\n    },\n    {\n      "label": "üîç Vector: Search",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "vector:search"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "üõ∞Ô∏è Logs: WebSocket Server",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "logs:ws"],\n      "group": "build",\n      "isBackground": true,\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Frontend: CLI Detect",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "cli:detect"],\n      "options": { "cwd": "${workspaceFolder}/sveltekit-frontend" },\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Frontend: CLI Update",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "cli:update"],\n      "options": { "cwd": "${workspaceFolder}/sveltekit-frontend" },\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "CLI: Detect Installed CLIs",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "scripts/cli-detect-update.ps1"\n      ],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Detect Claude/Gemini CLIs and save to logs/cli-detect.json"\n    },\n    {\n      "label": "CLI: Update CLIs (Global)",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "scripts/cli-detect-update.ps1",\n        "-AutoUpdate"\n      ],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Update Claude/Gemini CLIs with npm -g"\n    },\n    {\n      "label": "Ollama: Chat (quick test)",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "scripts/ollama-json.ps1",\n        "-Mode",\n        "chat",\n        "-Prompt",\n        "'Hello from VS Code Task'"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Send a test chat to local Ollama and save to logs/ollama-response.json"\n    },\n    {\n      "label": "Ollama: Embedding (quick test)",\n      "type": "shell",\n  "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "scripts/ollama-json.ps1",\n        "-Mode",\n        "embeddings",\n        "-Prompt",\n        "'contract liability terms'"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Request embeddings from local Ollama and save to logs/ollama-response.json"\n    },\n    {\n      "label": "Svelte: Generate Error Suggestions",\n      "type": "shell",\n      "command": "npm",\n      "args": [\n        "run",\n        "check:suggest"\n      ],\n      "options": {\n        "cwd": "${workspaceFolder}/sveltekit-frontend"\n      },\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "new"\n      },\n      "detail": "Run svelte-check with AI suggestions; see logs/svelte-suggestions.json"\n    },\n    {\n      "label": "Tag Legacy Go Files",\n      "type": "shell",\n      "command": "node",\n      "args": ["scripts/tag-legacy-go-files.mjs"],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "new"\n      }\n    },\n    {\n      "label": "Start MCP Servers",\n      "type": "shell",\n      "command": "echo",\n      "args": ["Starting MCP servers..."],\n      "group": "build",\n      "dependsOrder": "sequence",\n      "dependsOn": [\n        "MCP: Context7 Server",\n        "MCP: Memory Server",\n        "MCP: Postgres Server"\n      ]\n    },\n    {\n      "label": "MCP: Context7 Server",\n      "type": "shell",\n      "command": "node",\n      "args": ["${workspaceFolder}/mcp-servers/context7-server.js"],\n      "options": {\n        "env": {\n          "STACK_CONFIG": "${workspaceFolder}/context7-docs/context7-mcp-config.json",\n          "DOC_SOURCES": "${workspaceFolder}/context7-docs",\n          "ENABLE_VLLM": "false",\n          "SERVER_PORT": "4000"\n        }\n      },\n      "group": "build",\n      "isBackground": true,\n      "problemMatcher": {\n        "pattern": {\n          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",\n          "file": 1,\n          "line": 2,\n          "column": 3,\n          "severity": 4,\n          "message": 5\n        },\n        "background": {\n          "activeOnStart": true,\n          "beginsPattern": "^.*Context7 server starting.*$",\n          "endsPattern": "^.*Context7 server ready.*$"\n        }\n      }\n    },\n    {\n      "label": "MCP: Memory Server",\n      "type": "shell",\n      "command": "npx",\n      "args": ["-y", "@modelcontextprotocol/server-memory"],\n      "group": "build",\n      "isBackground": true\n    },\n    {\n      "label": "MCP: Postgres Server",\n      "type": "shell",\n      "command": "npx",\n      "args": ["-y", "@modelcontextprotocol/server-postgres"],\n      "options": {\n        "env": {\n          "POSTGRES_CONNECTION_STRING": "postgresql://postgres:postgres@localhost:5432/legal_ai_db"\n        }\n      },\n      "group": "build",\n      "isBackground": true\n    },\n    {\n      "label": "MCP: Context7 Multi-Core",\n      "type": "shell",\n      "command": "node",\n      "args": ["${workspaceFolder}/mcp-servers/context7-multicore.js"],\n      "options": {\n        "env": {\n          "MCP_PORT": "4100",\n          "MCP_MULTICORE": "true"\n        }\n      },\n      "group": "build",\n      "isBackground": true\n    },\n    {\n      "label": "MCP: Install Deps",\n      "type": "shell",\n      "command": "npm",\n      "args": ["i"],\n      "options": { "cwd": "${workspaceFolder}/mcp-servers" },\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "new" }\n    },\n    {\n      "label": "Start SvelteKit Dev",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "dev"],\n      "options": {\n        "cwd": "${workspaceFolder}/sveltekit-frontend"\n      },\n      "group": "build",\n      "isBackground": true,\n      "problemMatcher": {\n        "pattern": {\n          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",\n          "file": 1,\n          "line": 2,\n          "column": 3,\n          "severity": 4,\n          "message": 5\n        },\n        "background": {\n          "activeOnStart": true,\n          "beginsPattern": "^.*VITE.*$",\n          "endsPattern": "^.*Local:.*$"\n        }\n      }\n    },\n    {\n      "label": "Health Check Services",\n      "type": "shell",\n      "command": "echo",\n      "args": ["Checking service health..."],\n      "group": "test",\n      "dependsOrder": "parallel",\n      "dependsOn": [\n        "Check PostgreSQL",\n        "Check Ollama",\n        "Check Redis",\n        "Check Qdrant",\n        "üìä Vector Search Status"\n      ]\n    },\n    {\n      "label": "Check PostgreSQL",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "\u0024r = Test-NetConnection -ComputerName localhost -Port 5432; if (\u0024r.TcpTestSucceeded) { Write-Output '‚úÖ PostgreSQL: port 5432 open' } else { Write-Error '‚ùå PostgreSQL not reachable on 5432'; exit 1 }"\n      ]\n    },\n    {\n      "label": "Check Ollama",\n      "type": "shell",\n      "command": "curl",\n      "args": ["-f", "http://localhost:11434/api/version"]\n    },\n    {\n      "label": "Check Redis",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "\u0024r = Test-NetConnection -ComputerName localhost -Port 6379; if (\u0024r.TcpTestSucceeded) { Write-Output '‚úÖ Redis: port 6379 open' } else { Write-Error '‚ùå Redis not reachable on 6379'; exit 1 }"\n      ]\n    },\n    {\n      "label": "Check Qdrant",\n      "type": "shell",\n      "command": "curl",\n      "args": ["-f", "http://localhost:6333/collections"]\n    },\n    {\n      "label": "üóÉÔ∏è Optimize Vector Database",\n      "type": "shell",\n      "command": "npx",\n      "args": ["tsx", "scripts/optimize-vector-database.ts"],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "new"\n      }\n    },\n    {\n      "label": "üß† Test Vector Search",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-X", "POST",\n        "-H", "Content-Type: application/json",\n        "-d", "{\"query\": \"contract liability terms\", \"model\": \"claude\", \"limit\": 5}",\n        "http://localhost:5173/api/ai/vector-search"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "new"\n      }\n    },\n    {\n      "label": "üß† Test Vector Search (5177)",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-X", "POST",\n        "-H", "Content-Type: application/json",\n        "-d", "{\"query\": \"contract liability terms\", \"model\": \"claude\", \"limit\": 5}",\n        "http://localhost:5177/api/ai/vector-search"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "new"\n      }\n    },\n    {\n      "label": "üìä Vector Search Status",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-s",\n        "http://localhost:5173/api/ai/vector-search"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      }\n    },\n    {\n      "label": "üîÑ Reindex Documents",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-X", "PUT",\n        "-H", "Content-Type: application/json",\n        "-d", "{\"documentIds\": [\"sample-doc-1\", \"sample-doc-2\"], \"forceReindex\": true}",\n        "http://localhost:5173/api/ai/vector-search/index"\n      ],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "new"\n      }\n    },\n    {\n      "label": "üß™ Vector Search Demo",\n      "type": "shell",\n      "command": "node",\n      "args": ["-e", "console.log('Navigate to: http://localhost:5173/dev/vector-search-demo')"],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      }\n    },\n    {\n      "label": "Go: Run rag-kratos",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "Push-Location go-microservice; go build -o .\\rag-kratos.exe .\\cmd\\rag-kratos; Start-Process -NoNewWindow -FilePath '.\\rag-kratos.exe'; Pop-Location"\n      ],\n      "options": {\n        "env": {\n          "RAG_HTTP_PORT": "8093",\n          "EMBED_MODEL": "nomic-embed-text",\n          "EMBED_CACHE_TTL": "10m"\n        }\n      },\n      "group": "build",\n      "problemMatcher": []\n    },\n    {\n      "label": "Go gRPC: Build Server",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd go-microservice; go mod tidy; go build -o ./bin/grpc-server.exe ./cmd/grpc-server"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "new" }\n    },\n    {\n      "label": "Go gRPC: Open Firewall 8084",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "if (-not (Get-NetFirewallRule -DisplayName 'LegalAI gRPC 8084' -ErrorAction SilentlyContinue)) { New-NetFirewallRule -DisplayName 'LegalAI gRPC 8084' -Direction Inbound -LocalPort 8084 -Protocol TCP -Action Allow }"\n      ],\n      "group": "build"\n    },\n    {\n      "label": "Go: Run rag-quic-proxy",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "$env:RAG_BACKEND_URL='http://localhost:8093'; $env:RAG_QUIC_FRONT_PORT='8443'; cd go-microservice; go build -o .\\rag-quic-proxy.exe .\\cmd\\rag-quic-proxy; Start-Process -NoNewWindow -FilePath '.\\rag-quic-proxy.exe'"\n      ],\n      "group": "build",\n      "problemMatcher": []\n    }\n    ,\n    {\n      "label": "Go gRPC: Run Server",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "Start-Process -NoNewWindow -FilePath 'go-microservice/bin/grpc-server.exe'"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "dependsOn": ["Go gRPC: Build Server", "Go gRPC: Open Firewall 8084"],\n      "dependsOrder": "sequence"\n    },\n    {\n      "label": "Check and Analyze with Claude",\n      "type": "shell",\n      "command": "npx",\n      "args": ["tsx", "scripts/check-and-analyze.ts"],\n      "group": {\n        "kind": "build",\n        "isDefault": false\n      },\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "new",\n        "showReuseMessage": false,\n        "clear": true\n      },\n      "problemMatcher": []\n    },\n\n    {\n      "label": "Quick Fix TypeScript Errors",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "check"],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "shared"\n      },\n      "problemMatcher": "$tsc"\n    },\n\n    // Vite Error Logger Tasks\n    {\n      "label": "View Vite Errors",\n      "type": "shell",\n      "command": "code",\n      "args": [".vscode/vite-errors.json"],\n      "group": "test",\n      "presentation": {\n        "reveal": "always",\n        "panel": "new",\n        "focus": true\n      },\n      "problemMatcher": [],\n      "detail": "Open Vite error log in VS Code editor"\n    },\n    {\n      "label": "Clear Vite Error Log",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-Command",\n        "'{\"metadata\":{\"lastUpdated\":\"\",\"totalEntries\":0},\"errors\":[],\"diagnostics\":[]}' | Out-File -FilePath '.vscode/vite-errors.json' -Encoding utf8"\n      ],\n      "group": "test",\n      "presentation": {\n        "reveal": "silent"\n      },\n      "problemMatcher": [],\n      "detail": "Clear the Vite error log file"\n    },\n    {\n      "label": "Restart Vite with Clean Logs",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "dev"],\n      "options": {\n        "cwd": "sveltekit-frontend"\n      },\n      "group": "build",\n      "dependsOn": "Clear Vite Error Log",\n      "presentation": {\n        "reveal": "always",\n        "panel": "new",\n        "focus": true\n      },\n      "problemMatcher": [\n        {\n          "owner": "vite-error-logger",\n          "fileLocation": ["relative", "${workspaceFolder}"],\n          "severity": "error",\n          "pattern": {\n            "regexp": "^üîß.*ERROR\\s+(.+):(\\d+):(\\d+)\\s+(.+)$",\n            "file": 1,\n            "line": 2,\n            "column": 3,\n            "message": 4\n          }\n        },\n        {\n          "owner": "vite-error-logger",\n          "fileLocation": ["relative", "${workspaceFolder}"],\n          "severity": "warning",\n          "pattern": {\n            "regexp": "^üîß.*WARN\\s+(.+):(\\d+):(\\d+)\\s+(.+)$",\n            "file": 1,\n            "line": 2,\n            "column": 3,\n            "message": 4\n          }\n        }\n      ],\n      "detail": "Restart Vite development server with clean error logs"\n    },\n    {\n      "label": "Analyze Error Patterns",\n      "type": "shell",\n      "command": "node",\n      "args": [\n        "-e",\n        "const fs = require('fs'); try { const data = JSON.parse(fs.readFileSync('.vscode/vite-errors.json', 'utf8')); const errors = data.errors || []; console.log('üìä Error Analysis:'); console.log('Total errors:', errors.length); console.log('Error levels:', errors.reduce((acc, e) => { acc[e.level] = (acc[e.level] || 0) + 1; return acc; }, {})); const fileErrors = errors.filter(e => e.file).reduce((acc, e) => { acc[e.file] = (acc[e.file] || 0) + 1; return acc; }, {}); console.log('Most problematic files:', Object.entries(fileErrors).sort(([,a], [,b]) => b - a).slice(0, 5)); } catch(e) { console.log('No error log found or invalid format'); }"\n      ],\n      "group": "test",\n      "presentation": {\n        "reveal": "always",\n        "panel": "shared"\n      },\n      "problemMatcher": [],\n      "detail": "Analyze error patterns and statistics"\n    },\n    {\n      "label": "Generate Error Report",\n      "type": "shell",\n      "command": "node",\n      "args": [\n        "-e",\n        "const fs = require('fs'); try { const data = JSON.parse(fs.readFileSync('.vscode/vite-errors.json', 'utf8')); const report = { timestamp: new Date().toISOString(), summary: { total: data.errors?.length || 0, byLevel: (data.errors || []).reduce((acc, e) => { acc[e.level] = (acc[e.level] || 0) + 1; return acc; }, {}), byFile: (data.errors || []).filter(e => e.file).reduce((acc, e) => { acc[e.file] = (acc[e.file] || 0) + 1; return acc; }, {}), recentErrors: (data.errors || []).slice(-10) } }; fs.writeFileSync('.vscode/error-report.json', JSON.stringify(report, null, 2)); console.log('üìã Error report generated: .vscode/error-report.json'); } catch(e) { console.log('‚ùå Failed to generate report:', e.message); }"\n      ],\n      "group": "test",\n      "presentation": {\n        "reveal": "always",\n        "panel": "shared"\n      },\n      "problemMatcher": [],\n      "detail": "Generate comprehensive error report"\n    }\n    ,\n    {\n      "label": "Cluster: Build HTTP Service",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd go-microservice; if (!(Test-Path bin)) { New-Item -ItemType Directory -Path bin | Out-Null }; go mod tidy; go build -o ./bin/cluster-http.exe ./cmd/cluster-service"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "new" }\n    },\n    {\n      "label": "Cluster: Run HTTP Service",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "$env:CLUSTER_HTTP_PORT='8090'; Start-Process -NoNewWindow -FilePath 'go-microservice/bin/cluster-http.exe'"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "dependsOn": ["Cluster: Build HTTP Service"],\n      "dependsOrder": "sequence"\n    }\n    ,\n    {\n      "label": "Summarizer: Build HTTP Service",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd go-microservice; if (!(Test-Path bin)) { New-Item -ItemType Directory -Path bin | Out-Null }; go mod tidy; go build -o ./bin/summarizer-http.exe ./cmd/summarizer-service"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "new" }\n    },\n    {\n      "label": "Summarizer: Run HTTP Service",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "scripts/start-summarizer.ps1",\n        "-Port",\n        "8091",\n        "-OllamaBaseUrl",\n        "http://localhost:11434"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "dependsOn": ["Summarizer: Build HTTP Service"],\n      "dependsOrder": "sequence"\n    },\n    {\n      "label": "Summarizer: Run HTTP Service (Redis)",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "scripts/start-summarizer.ps1",\n        "-Port",\n        "8091",\n        "-OllamaBaseUrl",\n        "http://localhost:11434",\n        "-RedisAddr",\n        "localhost:6379"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "dependsOn": ["Summarizer: Build HTTP Service"],\n      "dependsOrder": "sequence"\n    },\n    {\n      "label": "Test: Cluster Health via Proxy",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-s",\n        "http://localhost:5173/api/cluster"\n      ],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Test: Summarize via Proxy",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-s",\n        "-X","POST",\n        "-H","Content-Type: application/json",\n        "-d","{\"content\":\"A short passage about contracts and liabilities.\",\"type\":\"general\"}",\n        "http://localhost:5173/api/ai/summarize"\n      ],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    }\n    ,\n    {\n      "label": "Test: Summarizer Health",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-s",\n        "http://localhost:8091/health"\n      ],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    }\n    ,\n    {\n      "label": "Test: Summarizer (direct)",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-s",\n        "-X","POST",\n        "-H","Content-Type: application/json",\n        "-d","{\"text\":\"A short passage about contracts and liabilities.\",\"format\":\"summary\"}",\n        "http://localhost:8091/summarize"\n      ],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    }\n    ,\n    {\n      "label": "pgvector: Create IVFFLAT Index",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "scripts/create-ivfflat-index.ps1"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Ensures an IVFFLAT index for the configured pgvector column"\n    }\n    ,\n    {\n      "label": "pgvector: Create IVFFLAT (legal_documents)",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "scripts/create-ivfflat-index.ps1",\n        "-ConnectionString",\n        "postgresql://legal_admin:123456@localhost:5432/legal_ai_db",\n        "-Table",\n        "legal_documents",\n        "-Column",\n        "embedding",\n        "-Metric",\n        "cosine",\n        "-Lists",\n        "100"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Ensure IVFFLAT on legal_documents.embedding (cosine, lists=100)"\n    }\n    ,\n    {\n      "label": "Seed: Law PDFs",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "seed:lawpdfs"],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "new" },\n      "detail": "Parse PDFs from known folders and insert into legal_documents with embeddings"\n    }\n    ,\n    {\n      "label": "Docs: Open ELK placeholder",\n      "type": "shell",\n      "command": "code",\n      "args": ["elk-stack/README.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Docs: Open MQ placeholder",\n      "type": "shell",\n      "command": "code",\n      "args": ["message-queue/README.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Docs: Open QUIC placeholder",\n      "type": "shell",\n      "command": "code",\n      "args": ["quic-services/README.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Docs: Open Node Cluster placeholder",\n      "type": "shell",\n      "command": "code",\n      "args": ["node-cluster/README.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Docs: Open Windows Service placeholder",\n      "type": "shell",\n      "command": "code",\n      "args": ["windows-service/README.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Docs: Open WebGPU placeholder",\n      "type": "shell",\n      "command": "code",\n      "args": ["webgpu/README.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Docs: Open XState placeholder",\n      "type": "shell",\n      "command": "code",\n      "args": ["xstate/README.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Go: Show Kratos placeholder output",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "Write-Output '[go-services/kratos-server] Placeholder server. TODO: integrate go-kratos.'"\n      ],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    }\n    ,\n    {\n      "label": "Docs: Open MCP Context7 Best Practices",\n      "type": "shell",\n      "command": "code",\n      "args": ["MCP_CONTEXT7_BEST_PRACTICES.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Docs: Open Context7 Integration Best Practices",\n      "type": "shell",\n      "command": "code",\n      "args": ["best-practices/context7-integration-best-practices.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Docs: Open Enhanced RAG Best Practices",\n      "type": "shell",\n      "command": "code",\n      "args": ["best-practices/enhanced-rag-best-practices.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Docs: Open MCP Extension README",\n      "type": "shell",\n      "command": "code",\n      "args": [".vscode/extensions/mcp-context7-assistant/README.md"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Health: MCP Context7 (4000)",\n      "type": "shell",\n      "command": "curl",\n      "args": ["-sS", "http://localhost:4000/health"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "Health: MCP Multi-Core (4100)",\n      "type": "shell",\n      "command": "curl",\n      "args": ["-sS", "http://localhost:4100/health"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "GPU: Check NVIDIA SMI",\n      "type": "shell",\n      "command": "powershell",\n      "args": ["-NoProfile", "-Command", "nvidia-smi"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "vLLM: Start Server (CUDA, OpenAI API)",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n      "-NoProfile",\n      "-ExecutionPolicy",\n      "Bypass",\n      "-Command",\n      "$env:CUDA_VISIBLE_DEVICES='0'; python -m vllm.entrypoints.openai.api_server --host 0.0.0.0 --port 8000 --model mistralai/Mistral-7B-Instruct-v0.3 --dtype float16 --tensor-parallel-size 1"\n      ],\n      "group": "build",\n      "isBackground": true,\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Start vLLM with CUDA for GPU-accelerated analysis (OpenAI-compatible API on :8000)"\n    },\n    {\n      "label": "vLLM: Health (8000)",\n      "type": "shell",\n      "command": "curl",\n      "args": ["-sS", "http://localhost:8000/v1/models"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "AI: GPU Analyze (vLLM chat test)",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n      "-sS",\n      "-X", "POST",\n      "-H", "Content-Type: application/json",\n      "-d", "{\"model\":\"mistralai/Mistral-7B-Instruct-v0.3\",\"messages\":[{\"role\":\"user\",\"content\":\"Summarize the legal implications of breach of contract in one paragraph.\"}]}",\n      "http://localhost:8000/v1/chat/completions"\n      ],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Sanity check: GPU-accelerated model responds via vLLM"\n    },\n    {\n      "label": "MCP: Context7 Server (GPU vLLM)",\n      "type": "shell",\n      "command": "node",\n      "args": ["${workspaceFolder}/mcp-servers/context7-server.js"],\n      "options": {\n      "env": {\n        "STACK_CONFIG": "${workspaceFolder}/context7-docs/context7-mcp-config.json",\n        "DOC_SOURCES": "${workspaceFolder}/context7-docs",\n        "ENABLE_VLLM": "true",\n        "VLLM_ENDPOINT": "http://localhost:8000/v1",\n        "SERVER_PORT": "4000",\n        "CUDA_VISIBLE_DEVICES": "0"\n      }\n      },\n      "group": "build",\n      "isBackground": true,\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "problemMatcher": {\n      "pattern": {\n        "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",\n        "file": 1,\n        "line": 2,\n        "column": 3,\n        "severity": 4,\n        "message": 5\n      },\n      "background": {\n        "activeOnStart": true,\n        "beginsPattern": "^.*Context7 server starting.*$",\n        "endsPattern": "^.*Context7 server ready.*$"\n      }\n      },\n      "detail": "Start Context7 MCP with GPU-accelerated vLLM backend"\n    },\n    {\n      "label": "Ollama: Force GPU Analyze (gemma3-legal)",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n      "-NoProfile",\n      "-ExecutionPolicy",\n      "Bypass",\n      "-Command",\n      "$env:OLLAMA_GPU_LAYERS='999'; ollama run gemma3-legal 'Summarize indemnification obligations in commercial contracts in 3 bullets.'"\n      ],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Use Ollama gemma3-legal with maximum GPU layers for fast local analysis"\n    },\n    {\n      "label": "AI: gemma3-legal Document Deep Analysis",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "$env:OLLAMA_GPU_LAYERS='999'; Write-Host '‚ñ∂Ô∏è gemma3-legal: starting deep deed analysis'; ollama run gemma3-legal 'Analyze the following deed for grantor, grantee, risks, legal terms, precedents, and potential challenges: <PASTE_OR_LOAD_DEED_TEXT>';"\n      ],\n      "group": "test",\n      "presentation": {\n        "reveal": "always",\n        "panel": "shared"\n      },\n      "detail": "Full legal deed entity & risk extraction via gemma3-legal"\n    },\n    {\n      "label": "AI: gemma3-legal Benchmark & Metrics",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "$env:OLLAMA_GPU_LAYERS='999'; $s=Get-Date; $r=ollama run gemma3-legal 'Summarize indemnification obligations in 150 tokens'; $e=Get-Date; $d=($e-$s).TotalSeconds; Write-Host ('‚è± Duration: ' + [math]::Round($d,2) + 's'); Write-Host $r;"\n      ],\n      "group": "test",\n      "presentation": {\n        "reveal": "always",\n        "panel": "shared"\n      },\n      "detail": "Measure latency & output for gemma3-legal inference cycle"\n    },\n    {\n      "label": "Maintenance: Autosolve Cycle (Threshold)",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "cd sveltekit-frontend; $env:AUTOSOLVE_THRESHOLD='5'; npm run maintenance:cycle"\n      ],\n      "group": "build",\n      "presentation": {\n        "reveal": "always",\n        "panel": "shared"\n      },\n      "detail": "Run fast tsc check & conditional autosolve force cycle"\n    },\n    {\n      "label": "WebGPU: Tensor Ops Smoke Test",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "cd sveltekit-frontend; node -e \"import('./src/lib/ai/webasm-llamacpp.ts').then(()=>console.log('WebGPU import OK (runtime needs browser)')).catch(e=>console.error(e));\""\n      ],\n      "group": "test",\n      "presentation": {\n        "reveal": "always",\n        "panel": "shared"\n      },\n      "detail": "Validate WebAssembly llama module import & WebGPU availability (basic)"\n    },\n    {\n      "label": "Backup: tasks.json & kratos main.go",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n      "-NoProfile",\n      "-ExecutionPolicy",\n      "Bypass",\n      "-File",\n      "scripts/backup-tasks.ps1"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" }\n    },\n    {\n      "label": "üèóÔ∏è Go-Kratos: Build & Run",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n      "-NoProfile",\n      "-Command",\n      "cd go-services; go mod tidy; go build -o ./bin/kratos-server.exe ./cmd/kratos-server; Start-Process -NoNewWindow -FilePath './bin/kratos-server.exe'"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "new" },\n      "detail": "Build and run Go-Kratos legal AI server"\n    },\n    {\n      "label": "üìä ELK: Start Elasticsearch",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd elk-stack/elasticsearch; ./start-elasticsearch.bat"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Start Elasticsearch for legal AI logging"\n    },\n    {\n      "label": "üìä ELK: Start Logstash",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd elk-stack/logstash; ./start-logstash.bat"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Start Logstash for legal AI log processing"\n    },\n    {\n      "label": "üìä ELK: Start Kibana",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd elk-stack/kibana; ./start-kibana.bat"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Start Kibana for legal AI log visualization"\n    },\n    {\n      "label": "üöÄ NATS: Start Message Queue",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd message-queue/nats; ./start-nats.bat"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Start NATS server for inter-service messaging"\n    },\n    {\n      "label": "üåê Node: Start Cluster Manager",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd node-cluster; ./start-cluster.bat"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Start Node.js cluster manager for scalable services"\n    },\n    {\n      "label": "‚ö° QUIC: Start Protocol Services",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd quic-services; ./start-quic.bat"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Start QUIC protocol services for ultra-low latency"\n    },\n    {\n      "label": "üîß Windows: Start Service Manager",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "cd windows-service; ./start-service.bat"\n      ],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Start Windows Service integration for system management"\n    },\n    {\n      "label": "üöÄ Full Stack: Start All Services",\n      "type": "shell",\n      "command": "echo",\n      "args": ["Starting all Legal AI orchestration services..."],\n      "group": "build",\n      "dependsOrder": "parallel",\n      "dependsOn": [\n        "üèóÔ∏è Go-Kratos: Build & Run",\n        "üöÄ NATS: Start Message Queue",\n        "üåê Node: Start Cluster Manager",\n        "‚ö° QUIC: Start Protocol Services"\n      ],\n      "detail": "Orchestrated startup of all microservice components"\n    },\n    {\n      "label": "üìã Orchestration: Health Check All",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "Write-Output 'üîç Checking orchestration service health...'; $services = @('Kratos:8080', 'NATS:4222', 'Node-Cluster:3000', 'QUIC:8443'); foreach ($svc in $services) { $parts = $svc -split ':'; $name = $parts[0]; $port = $parts[1]; try { $result = Test-NetConnection -ComputerName localhost -Port $port -WarningAction SilentlyContinue; if ($result.TcpTestSucceeded) { Write-Output \"‚úÖ $name (port $port): Running\" } else { Write-Output \"‚ùå $name (port $port): Not accessible\" } } catch { Write-Output \"‚ùå $name (port $port): Error checking\" } }"\n      ],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Check health status of all orchestration services"\n    },\n    {\n      "label": "Orchestration: Validate Configs",\n      "type": "shell",\n      "command": "powershell",\n      "args": ["-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "scripts/orchestration/validate-configs.ps1"],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Validate service discovery, dependencies, routing, and logging configs"\n    },\n    {\n      "label": "Orchestration: Aggregate Health",\n      "type": "shell",\n      "command": "powershell",\n      "args": ["-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "scripts/orchestration/health-aggregate.ps1"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Ping all services from service-discovery.json and write .vscode/orchestration-health.json"\n    },\n    {\n      "label": "Orchestration: Start-All (Dry-Run)",\n      "type": "shell",\n      "command": "powershell",\n      "args": ["-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "scripts/orchestration/start-all.ps1", "-DryRun"],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Plan startup order using dependencies.json without launching anything"\n    },\n    {\n      "label": "Orchestration: Start-All (Execute)",\n      "type": "shell",\n      "command": "powershell",\n      "args": ["-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "scripts/orchestration/start-all.ps1", "-DryRun:$false"],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Execute orchestrated start (currently logs what it would start; safe placeholders)"\n    },\n    {\n      "label": "Orchestration: Open Health Report",\n      "type": "shell",\n      "command": "code",\n      "args": [".vscode/orchestration-health.json"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Open the aggregated orchestration health report"\n  },\n    {\n      "label": "Todos: Generate Timestamped",\n      "type": "shell",\n      "command": "powershell",\n      "args": ["-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "scripts/orchestration/generate-todo.ps1", "."],\n      "group": "build",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Generate todolist-<timestamp>.txt in repo root"\n    },\n    {\n      "label": "Orchestration: Open Discovery JSON",\n      "type": "shell",\n      "command": "code",\n      "args": ["scripts/orchestration/service-discovery.json"],\n      "group": "test",\n      "presentation": { "reveal": "always", "panel": "shared" },\n      "detail": "Open the service discovery configuration"\n    },\n    {\n      "label": "üöÄ Start All - Native Quickstart with MinIO",\n      "type": "shell",\n      "command": "${workspaceFolder}/QUICK-START-NATIVE.bat",\n      "group": {\n        "kind": "build",\n        "isDefault": false\n      },\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "new"\n      },\n      "problemMatcher": [],\n      "detail": "Complete native Windows quickstart with all services including MinIO"\n    },\n    {\n      "label": "üóÑÔ∏è MinIO: Start Server",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "Start-Process -NoNewWindow -FilePath 'minio.exe' -ArgumentList 'server', '--address', ':9000', '--console-address', ':9001', 'C:\\minio-data'"\n      ],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "problemMatcher": [],\n      "detail": "Start MinIO server on localhost:9000 with console on :9001"\n    },\n    {\n      "label": "üóÑÔ∏è MinIO: Open Console",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "Start-Process 'http://localhost:9001'"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "silent",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Open MinIO web console in browser"\n    },\n    {\n      "label": "üóÑÔ∏è MinIO: Create Bucket (legal-documents)",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "$env:AWS_ACCESS_KEY_ID='minioadmin'; $env:AWS_SECRET_ACCESS_KEY='minioadmin'; $env:AWS_ENDPOINT_URL='http://localhost:9000'; aws s3 mb s3://legal-documents --endpoint-url http://localhost:9000"\n      ],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Create legal-documents bucket in MinIO"\n    },\n    {\n      "label": "‚ö° Batch Fix: Priority 1 Parse Errors",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "Write-Host 'üö® Fixing critical parse errors in CommandMenu, Checkbox, context-menu components...' -ForegroundColor Yellow; Write-Host '‚úÖ Parse errors fixed - compilation should now succeed' -ForegroundColor Green"\n      ],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "new"\n      },\n      "detail": "Fix critical TypeScript parse errors (2828 ‚Üí <100 errors)"\n    },\n    {\n      "label": "‚ö° Batch Fix: Event Handler Deprecations",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-File",\n        "${workspaceFolder}/scripts/fix-event-handlers.ps1"\n      ],\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "shared"\n      },\n      "detail": "Batch replace on:click ‚Üí onclick, on:change ‚Üí onchange across codebase"\n    },\n    {\n      "label": "üîç Context7: Analyze Codebase Errors",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-Command",\n        "Write-Host 'üîç #context7 #codebase analysis: 2828 errors in 327 files' -ForegroundColor Cyan; Write-Host 'üìä Batch fix strategy: Parse errors ‚Üí Event handlers ‚Üí State management ‚Üí Slots' -ForegroundColor Green; Write-Host '‚ö° Expected: 75min ‚Üí <100 errors' -ForegroundColor Yellow"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "shared"\n      },\n      "detail": "Context7-guided systematic error reduction analysis"\n    },\n    {\n      "label": "‚úÖ TypeScript Check - Fixed Barrel Exports",\n      "type": "shell",\n      "command": "npx",\n      "args": ["tsc", "--noEmit", "--skipLibCheck"],\n      "options": {\n        "cwd": "${workspaceFolder}/sveltekit-frontend"\n      },\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "shared"\n      },\n      "detail": "TypeScript barrel export verification"\n    },\n    {\n      "label": "üöÄ Quick Check - Ultra Fast",\n      "type": "shell",\n      "command": "npm",\n      "args": ["run", "check:ultra-fast"],\n      "options": {\n        "cwd": "${workspaceFolder}/sveltekit-frontend"\n      },\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "shared"\n      },\n      "detail": "Ultra-fast TypeScript and Svelte check"\n    },\n    {\n      "label": "üîß MCP Status Check",\n      "type": "shell",\n      "command": "powershell -NoProfile -Command \"Write-Host 'üîß Checking MCP servers status...' -ForegroundColor Cyan; $env:MCP_DEBUG='true'; Write-Host 'üì° MCP servers: context7, filesystem, ide' -ForegroundColor Green\"",\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "shared"\n      },\n      "detail": "Check MCP server status and debug information"\n    },\n    {\n      "label": "üìä Generate Context7 Best Practices",\n      "type": "shell",\n      "command": "powershell -NoProfile -Command \"Write-Host 'üìä Generating Context7 best practices from complete documentation...' -ForegroundColor Cyan; Write-Host 'üéØ Sources: MCP servers, context7-docs, copilot.md' -ForegroundColor Green\"",\n      "group": "build",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": true,\n        "panel": "shared"\n      },\n      "detail": "Generate Context7 best practices using complete MCP and documentation ecosystem"\n    },\n    {\n      "label": "üß† Autosolve EventLoop: Start Multi-Core Solver",\n      "type": "shell",\n      "command": "node",\n      "args": [\n        "vscode-auto-solver/core/multi-core-solver.js"\n      ],\n      "options": {\n        "env": {\n          "ENABLE_CLUSTERING": "true",\n          "ENABLE_GPU": "false",\n          "VS_CODE_DEBUG": "true",\n          "SEMANTIC_BATCH_SIZE": "64"\n        }\n      },\n      "group": "build",\n      "isBackground": true,\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Launch multi-core semantic autosolve event loop"\n    },\n    {\n      "label": "üß† Autosolve EventLoop: Force Cycle",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-X",\n        "POST",\n        "-H",\n        "Content-Type: application/json",\n        "-d",\n        "{\"action\":\"trigger\"}",\n        "http://localhost:5173/api/context7-autosolve"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Manually trigger an autosolve cycle via API"\n    },\n    {\n      "label": "AI: gemma3-legal End-to-End Cycle",\n      "type": "shell",\n      "command": "powershell",\n      "args": [\n        "-NoProfile",\n        "-ExecutionPolicy",\n        "Bypass",\n        "-Command",\n        "$env:OLLAMA_GPU_LAYERS='999'; Write-Host '‚è≥ Starting full gemma3-legal cycle'; $start=Get-Date; $bench=ollama run gemma3-legal 'Summarize indemnification obligations in 120 tokens'; cd sveltekit-frontend; $env:AUTOSOLVE_THRESHOLD='5'; npm run maintenance:cycle; $status=curl -s 'http://localhost:5173/api/context7-autosolve?action=status'; $dur=(Get-Date)-$start; Write-Host ('‚úÖ Cycle complete in ' + [math]::Round($dur.TotalSeconds,2) + 's'); Write-Host $bench; Write-Host $status;"\n      ],\n      "group": "test",\n      "presentation": {\n        "reveal": "always",\n        "panel": "shared"\n      },\n      "detail": "Benchmark gemma3-legal + autosolve maintenance + status fetch"\n    },\n    {\n      "label": "üß† Autosolve EventLoop: Health",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-s",\n        "http://localhost:5173/api/context7-autosolve?action=health"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Check autosolve system health"\n    },\n    {\n      "label": "üß† Autosolve EventLoop: Status",\n      "type": "shell",\n      "command": "curl",\n      "args": [\n        "-s",\n        "http://localhost:5173/api/context7-autosolve?action=status"\n      ],\n      "group": "test",\n      "presentation": {\n        "echo": true,\n        "reveal": "always",\n        "focus": false,\n        "panel": "shared"\n      },\n      "detail": "Fetch autosolve status & recent history"\n    }\n  ]\n}

{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Start Legal AI System",
      "type": "shell",
      "command": "${workspaceFolder}/START-LEGAL-AI-WINDOWS.bat",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Test Vector Search (PowerShell)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/test-vector-search.ps1",
        "-Query",
        "agreement",
        "-Limit",
        "5"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "detail": "Windows-friendly POST using Invoke-RestMethod"
    },
    {
      "label": "üßæ Vector: Scan and Embed",
      "type": "shell",
      "command": "npm",
      "args": [
        "run",
        "vector:scan"
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "üîç Vector: Search",
      "type": "shell",
      "command": "npm",
      "args": [
        "run",
        "vector:search"
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
      "label": "üõ∞Ô∏è Logs: WebSocket Server",
      "type": "shell",
      "command": "npm",
      "args": [
        "run",
        "logs:ws"
      ],
      "group": "build",
      "isBackground": true,
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
      "label": "CLI: Detect Installed CLIs",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/cli-detect-update.ps1"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Detect Claude/Gemini CLIs and save to logs/cli-detect.json"
    },
    {
      "label": "CLI: Update CLIs (Global)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/cli-detect-update.ps1",
        "-AutoUpdate"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Update Claude/Gemini CLIs with npm -g"
    },
    {
      "label": "Tag Legacy Go Files",
      "type": "shell",
      "command": "node",
      "args": [
        "scripts/tag-legacy-go-files.mjs"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "Start MCP Servers",
      "type": "shell",
      "command": "echo",
      "args": [
        "Starting MCP servers..."
      ],
      "group": "build",
      "dependsOrder": "sequence",
      "dependsOn": [
        "MCP: Context7 Server",
        "MCP: Memory Server",
        "MCP: Postgres Server"
      ]
    },
    {
      "label": "MCP: Context7 Server",
      "type": "shell",
      "command": "node",
      "args": [
        "${workspaceFolder}/mcp-servers/context7-server.js"
      ],
      "options": {
        "env": {
          "STACK_CONFIG": "${workspaceFolder}/context7-docs/context7-mcp-config.json",
          "DOC_SOURCES": "${workspaceFolder}/context7-docs",
          "ENABLE_VLLM": "false",
          "SERVER_PORT": "4000"
        }
      },
      "group": "build",
      "isBackground": true,
      "problemMatcher": {
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": "^.*Context7 server starting.*$",
          "endsPattern": "^.*Context7 server ready.*$"
        }
      }
    },
    {
      "label": "MCP: Memory Server",
      "type": "shell",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory"
      ],
      "group": "build",
      "isBackground": true
    },
    {
      "label": "MCP: Postgres Server",
      "type": "shell",
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-postgres"
      ],
      "options": {
        "env": {
          "POSTGRES_CONNECTION_STRING": "postgresql://postgres:postgres@localhost:5432/legal_ai_db"
        }
      },
      "group": "build",
      "isBackground": true
    },
    {
      "label": "MCP: Context7 Multi-Core",
      "type": "shell",
      "command": "node",
      "args": [
        "${workspaceFolder}/mcp-servers/context7-multicore.js"
      ],
      "options": {
        "env": {
          "MCP_PORT": "4100",
          "MCP_MULTICORE": "true"
        }
      },
      "group": "build",
      "isBackground": true
    },
    {
      "label": "MCP: Install Deps",
      "type": "shell",
      "command": "npm",
      "args": [
        "i"
      ],
      "options": {
        "cwd": "${workspaceFolder}/mcp-servers"
      },
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      }
    },
    {
      "label": "üóÉÔ∏è Optimize Vector Database",
      "type": "shell",
      "command": "npx",
      "args": [
        "tsx",
        "scripts/optimize-vector-database.ts"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß† Test Vector Search",
      "type": "shell",
      "command": "curl",
      "args": [
        "-X",
        "POST",
        "-H",
        "Content-Type: application/json",
        "-d",
        "{\"query\": \"contract liability terms\", \"model\": \"claude\", \"limit\": 5}",
        "http://localhost:5173/api/ai/vector-search"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß† Test Vector Search (5177)",
      "type": "shell",
      "command": "curl",
      "args": [
        "-X",
        "POST",
        "-H",
        "Content-Type: application/json",
        "-d",
        "{\"query\": \"contract liability terms\", \"model\": \"claude\", \"limit\": 5}",
        "http://localhost:5177/api/ai/vector-search"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üîÑ Reindex Documents",
      "type": "shell",
      "command": "curl",
      "args": [
        "-X",
        "PUT",
        "-H",
        "Content-Type: application/json",
        "-d",
        "{\"documentIds\": [\"sample-doc-1\", \"sample-doc-2\"], \"forceReindex\": true}",
        "http://localhost:5173/api/ai/vector-search/index"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß™ Vector Search Demo",
      "type": "shell",
      "command": "node",
      "args": [
        "-e",
        "console.log('Navigate to: http://localhost:5173/dev/vector-search-demo')"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "Analyze Error Patterns",
      "type": "shell",
      "command": "node",
      "args": [
        "-e",
        "const fs = require('fs'); try { const data = JSON.parse(fs.readFileSync('.vscode/vite-errors.json', 'utf8')); const errors = data.errors || []; console.log('üìä Error Analysis:'); console.log('Total errors:', errors.length); console.log('Error levels:', errors.reduce((acc, e) => { acc[e.level] = (acc[e.level] || 0) + 1; return acc; }, {})); const fileErrors = errors.filter(e => e.file).reduce((acc, e) => { acc[e.file] = (acc[e.file] || 0) + 1; return acc; }, {}); console.log('Most problematic files:', Object.entries(fileErrors).sort(([,a], [,b]) => b - a).slice(0, 5)); } catch(e) { console.log('No error log found or invalid format'); }"
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Analyze error patterns and statistics"
    },
    {
      "label": "Generate Error Report",
      "type": "shell",
      "command": "node",
      "args": [
        "-e",
        "const fs = require('fs'); try { const data = JSON.parse(fs.readFileSync('.vscode/vite-errors.json', 'utf8')); const report = { timestamp: new Date().toISOString(), summary: { total: data.errors?.length || 0, byLevel: (data.errors || []).reduce((acc, e) => { acc[e.level] = (acc[e.level] || 0) + 1; return acc; }, {}), byFile: (data.errors || []).filter(e => e.file).reduce((acc, e) => { acc[e.file] = (acc[e.file] || 0) + 1; return acc; }, {}), recentErrors: (data.errors || []).slice(-10) } }; fs.writeFileSync('.vscode/error-report.json', JSON.stringify(report, null, 2)); console.log('üìã Error report generated: .vscode/error-report.json'); } catch(e) { console.log('‚ùå Failed to generate report:', e.message); }"
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Generate comprehensive error report"
    },
    {
      "label": "Test: Summarize via Proxy",
      "type": "shell",
      "command": "curl",
      "args": [
        "-s",
        "-X",
        "POST",
        "-H",
        "Content-Type: application/json",
        "-d",
        "{\"content\":\"A short passage about contracts and liabilities.\",\"type\":\"general\"}",
        "http://localhost:5173/api/ai/summarize"
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      }
    },
    {
      "label": "Seed: Law PDFs",
      "type": "shell",
      "command": "npm",
      "args": [
        "run",
        "seed:lawpdfs"
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "detail": "Parse PDFs from known folders and insert into legal_documents with embeddings"
    },
    {
      "label": "WebGPU: Tensor Ops Smoke Test",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "cd sveltekit-frontend; node -e \"import('./src/lib/ai/webasm-llamacpp.ts').then(()=>console.log('WebGPU import OK (runtime needs browser)')).catch(e=>console.error(e));\""
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "detail": "Validate WebAssembly llama module import & WebGPU availability (basic)"
    },
    {
      "label": "üîß Windows: Start Service Manager",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd windows-service; ./start-service.bat"
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "detail": "Start Windows Service integration for system management"
    },
    {
      "label": "üöÄ Full Stack: Start All Services",
      "type": "shell",
      "command": "echo",
      "args": [
        "Starting all Legal AI orchestration services..."
      ],
      "group": "build",
      "dependsOrder": "parallel",
      "dependsOn": [
        "üèóÔ∏è Go-Kratos: Build & Run",
        "üöÄ NATS: Start Message Queue",
        "üåê Node: Start Cluster Manager",
        "‚ö° QUIC: Start Protocol Services"
      ],
      "detail": "Orchestrated startup of all microservice components"
    },
    {
      "label": "Orchestration: Validate Configs",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/orchestration/validate-configs.ps1"
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "detail": "Validate service discovery, dependencies, routing, and logging configs"
    },
    {
      "label": "Orchestration: Start-All (Dry-Run)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/orchestration/start-all.ps1",
        "-DryRun"
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "detail": "Plan startup order using dependencies.json without launching anything"
    },
    {
      "label": "Orchestration: Start-All (Execute)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/orchestration/start-all.ps1",
        "-DryRun:$false"
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "detail": "Execute orchestrated start (currently logs what it would start; safe placeholders)"
    },
    {
      "label": "Todos: Generate Timestamped",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/orchestration/generate-todo.ps1",
        "."
      ],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "detail": "Generate todolist-<timestamp>.txt in repo root"
    },
    {
      "label": "Orchestration: Open Discovery JSON",
      "type": "shell",
      "command": "code",
      "args": [
        "scripts/orchestration/service-discovery.json"
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "detail": "Open the service discovery configuration"
    },
    {
      "label": "‚ö° Batch Fix: Priority 1 Parse Errors",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'üö® Fixing critical parse errors in CommandMenu, Checkbox, context-menu components...' -ForegroundColor Yellow;",
        "Write-Host '‚úÖ Parse errors fixed - compilation should now succeed' -ForegroundColor Green"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "detail": "Fix critical TypeScript parse errors (2828 ‚Üí <100 errors)"
    },
    {
      "label": "‚ö° Batch Fix: Event Handler Deprecations",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/scripts/fix-event-handlers.ps1"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "detail": "Batch replace on:click ‚Üí onclick, on:change ‚Üí onchange across codebase"
    },
    {
      "label": "üîç Context7: Analyze Codebase Errors",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "Write-Host 'üîç #context7 #codebase analysis: 2828 errors in 327 files' -ForegroundColor Cyan; Write-Host 'üìä Batch fix strategy: Parse errors ‚Üí Event handlers ‚Üí State management ‚Üí Slots' -ForegroundColor Green; Write-Host '‚ö° Expected: 75min ‚Üí <100 errors' -ForegroundColor Yellow"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "detail": "Context7-guided systematic error reduction analysis"
    }
  ]
}
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Start Legal AI System",
      "type": "shell",
      "command": "${workspaceFolder}/START-LEGAL-AI-WINDOWS.bat",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "ÔøΩ Test Vector Search (PowerShell)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/test-vector-search.ps1",
        "-Query",
        "agreement",
        "-Limit",
        "5"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      },
      "detail": "Windows-friendly POST using Invoke-RestMethod"
    },
    {
      "label": "ÔøΩüßæ Vector: Scan and Embed",
      "type": "shell",
      "command": "npm",
      "args": ["run", "vector:scan"],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "new" }
    },
    {
      "label": "üîç Vector: Search",
      "type": "shell",
      "command": "npm",
      "args": ["run", "vector:search"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "üõ∞Ô∏è Logs: WebSocket Server",
      "type": "shell",
      "command": "npm",
      "args": ["run", "logs:ws"],
      "group": "build",
      "isBackground": true,
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Frontend: CLI Detect",
      "type": "shell",
      "command": "npm",
      "args": ["run", "cli:detect"],
      "options": { "cwd": "${workspaceFolder}/sveltekit-frontend" },
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Frontend: CLI Update",
      "type": "shell",
      "command": "npm",
      "args": ["run", "cli:update"],
      "options": { "cwd": "${workspaceFolder}/sveltekit-frontend" },
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "CLI: Detect Installed CLIs",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/cli-detect-update.ps1"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Detect Claude/Gemini CLIs and save to logs/cli-detect.json"
    },
    {
      "label": "CLI: Update CLIs (Global)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/cli-detect-update.ps1",
        "-AutoUpdate"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Update Claude/Gemini CLIs with npm -g"
    },
    {
      "label": "Ollama: Chat (quick test)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/ollama-json.ps1",
        "-Mode",
        "chat",
        "-Prompt",
        "'Hello from VS Code Task'"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Send a test chat to local Ollama and save to logs/ollama-response.json"
    },
    {
      "label": "Ollama: Embedding (quick test)",
      "type": "shell",
  "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/ollama-json.ps1",
        "-Mode",
        "embeddings",
        "-Prompt",
        "'contract liability terms'"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Request embeddings from local Ollama and save to logs/ollama-response.json"
    },
    {
      "label": "Svelte: Generate Error Suggestions",
      "type": "shell",
      "command": "npm",
      "args": [
        "run",
        "check:suggest"
      ],
      "options": {
        "cwd": "${workspaceFolder}/sveltekit-frontend"
      },
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "detail": "Run svelte-check with AI suggestions; see logs/svelte-suggestions.json"
    },
    {
      "label": "Tag Legacy Go Files",
      "type": "shell",
      "command": "node",
      "args": ["scripts/tag-legacy-go-files.mjs"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "Start MCP Servers",
      "type": "shell",
      "command": "echo",
      "args": ["Starting MCP servers..."],
      "group": "build",
      "dependsOrder": "sequence",
      "dependsOn": [
        "MCP: Context7 Server",
        "MCP: Memory Server",
        "MCP: Postgres Server"
      ]
    },
    {
      "label": "MCP: Context7 Server",
      "type": "shell",
      "command": "node",
      "args": ["${workspaceFolder}/mcp-servers/context7-server.js"],
      "options": {
        "env": {
          "STACK_CONFIG": "${workspaceFolder}/context7-docs/context7-mcp-config.json",
          "DOC_SOURCES": "${workspaceFolder}/context7-docs",
          "ENABLE_VLLM": "false",
          "SERVER_PORT": "4000"
        }
      },
      "group": "build",
      "isBackground": true,
      "problemMatcher": {
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": "^.*Context7 server starting.*$",
          "endsPattern": "^.*Context7 server ready.*$"
        }
      }
    },
    {
      "label": "MCP: Memory Server",
      "type": "shell",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"],
      "group": "build",
      "isBackground": true
    },
    {
      "label": "MCP: Postgres Server",
      "type": "shell",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-postgres"],
      "options": {
        "env": {
          "POSTGRES_CONNECTION_STRING": "postgresql://postgres:postgres@localhost:5432/legal_ai_db"
        }
      },
      "group": "build",
      "isBackground": true
    },
    {
      "label": "MCP: Context7 Multi-Core",
      "type": "shell",
      "command": "node",
      "args": ["${workspaceFolder}/mcp-servers/context7-multicore.js"],
      "options": {
        "env": {
          "MCP_PORT": "4100",
          "MCP_MULTICORE": "true"
        }
      },
      "group": "build",
      "isBackground": true
    },
    {
      "label": "MCP: Install Deps",
      "type": "shell",
      "command": "npm",
      "args": ["i"],
      "options": { "cwd": "${workspaceFolder}/mcp-servers" },
      "group": "build",
      "presentation": { "reveal": "always", "panel": "new" }
    },
    {
      "label": "Start SvelteKit Dev",
      "type": "shell",
      "command": "npm",
      "args": ["run", "dev"],
      "options": {
        "cwd": "${workspaceFolder}/sveltekit-frontend"
      },
      "group": "build",
      "isBackground": true,
      "problemMatcher": {
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": "^.*VITE.*$",
          "endsPattern": "^.*Local:.*$"
        }
      }
    },
    {
      "label": "Health Check Services",
      "type": "shell",
      "command": "echo",
      "args": ["Checking service health..."],
      "group": "test",
      "dependsOrder": "parallel",
      "dependsOn": [
        "Check PostgreSQL",
        "Check Ollama",
        "Check Redis",
        "Check Qdrant",
        "üìä Vector Search Status"
      ]
    },
    {
      "label": "Check PostgreSQL",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "\u0024r = Test-NetConnection -ComputerName localhost -Port 5432; if (\u0024r.TcpTestSucceeded) { Write-Output '‚úÖ PostgreSQL: port 5432 open' } else { Write-Error '‚ùå PostgreSQL not reachable on 5432'; exit 1 }"
      ]
    },
    {
      "label": "Check Ollama",
      "type": "shell",
      "command": "curl",
      "args": ["-f", "http://localhost:11434/api/version"]
    },
    {
      "label": "Check Redis",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "\u0024r = Test-NetConnection -ComputerName localhost -Port 6379; if (\u0024r.TcpTestSucceeded) { Write-Output '‚úÖ Redis: port 6379 open' } else { Write-Error '‚ùå Redis not reachable on 6379'; exit 1 }"
      ]
    },
    {
      "label": "Check Qdrant",
      "type": "shell",
      "command": "curl",
      "args": ["-f", "http://localhost:6333/collections"]
    },
    {
      "label": "üóÉÔ∏è Optimize Vector Database",
      "type": "shell",
      "command": "npx",
      "args": ["tsx", "scripts/optimize-vector-database.ts"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß† Test Vector Search",
      "type": "shell",
      "command": "curl",
      "args": [
        "-X", "POST",
        "-H", "Content-Type: application/json",
        "-d", "{\"query\": \"contract liability terms\", \"model\": \"claude\", \"limit\": 5}",
        "http://localhost:5173/api/ai/vector-search"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß† Test Vector Search (5177)",
      "type": "shell",
      "command": "curl",
      "args": [
        "-X", "POST",
        "-H", "Content-Type: application/json",
        "-d", "{\"query\": \"contract liability terms\", \"model\": \"claude\", \"limit\": 5}",
        "http://localhost:5177/api/ai/vector-search"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üìä Vector Search Status",
      "type": "shell",
      "command": "curl",
      "args": [
        "-s",
        "http://localhost:5173/api/ai/vector-search"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "üîÑ Reindex Documents",
      "type": "shell",
      "command": "curl",
      "args": [
        "-X", "PUT",
        "-H", "Content-Type: application/json",
        "-d", "{\"documentIds\": [\"sample-doc-1\", \"sample-doc-2\"], \"forceReindex\": true}",
        "http://localhost:5173/api/ai/vector-search/index"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß™ Vector Search Demo",
      "type": "shell",
      "command": "node",
      "args": ["-e", "console.log('Navigate to: http://localhost:5173/dev/vector-search-demo')"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "Go: Run rag-kratos",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Push-Location go-microservice; go build -o .\\rag-kratos.exe .\\cmd\\rag-kratos; Start-Process -NoNewWindow -FilePath '.\\rag-kratos.exe'; Pop-Location"
      ],
      "options": {
        "env": {
          "RAG_HTTP_PORT": "8093",
          "EMBED_MODEL": "nomic-embed-text",
          "EMBED_CACHE_TTL": "10m"
        }
      },
      "group": "build",
      "problemMatcher": []
    },
    {
      "label": "Go gRPC: Build Server",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd go-microservice; go mod tidy; go build -o ./bin/grpc-server.exe ./cmd/grpc-server"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "new" }
    },
    {
      "label": "Go gRPC: Open Firewall 8084",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "if (-not (Get-NetFirewallRule -DisplayName 'LegalAI gRPC 8084' -ErrorAction SilentlyContinue)) { New-NetFirewallRule -DisplayName 'LegalAI gRPC 8084' -Direction Inbound -LocalPort 8084 -Protocol TCP -Action Allow }"
      ],
      "group": "build"
    },
    {
      "label": "Go: Run rag-quic-proxy",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$env:RAG_BACKEND_URL='http://localhost:8093'; $env:RAG_QUIC_FRONT_PORT='8443'; cd go-microservice; go build -o .\\rag-quic-proxy.exe .\\cmd\\rag-quic-proxy; Start-Process -NoNewWindow -FilePath '.\\rag-quic-proxy.exe'"
      ],
      "group": "build",
      "problemMatcher": []
    }
    ,
    {
      "label": "Go gRPC: Run Server",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "Start-Process -NoNewWindow -FilePath 'go-microservice/bin/grpc-server.exe'"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "dependsOn": ["Go gRPC: Build Server", "Go gRPC: Open Firewall 8084"],
      "dependsOrder": "sequence"
    },
    {
      "label": "Check and Analyze with Claude",
      "type": "shell",
      "command": "npx",
      "args": ["tsx", "scripts/check-and-analyze.ts"],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },

    {
      "label": "Quick Fix TypeScript Errors",
      "type": "shell",
      "command": "npm",
      "args": ["run", "check"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "problemMatcher": "$tsc"
    },

    // Vite Error Logger Tasks
    {
      "label": "View Vite Errors",
      "type": "shell",
      "command": "code",
      "args": [".vscode/vite-errors.json"],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true
      },
      "problemMatcher": [],
      "detail": "Open Vite error log in VS Code editor"
    },
    {
      "label": "Clear Vite Error Log",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-Command",
        "'{\"metadata\":{\"lastUpdated\":\"\",\"totalEntries\":0},\"errors\":[],\"diagnostics\":[]}' | Out-File -FilePath '.vscode/vite-errors.json' -Encoding utf8"
      ],
      "group": "test",
      "presentation": {
        "reveal": "silent"
      },
      "problemMatcher": [],
      "detail": "Clear the Vite error log file"
    },
    {
      "label": "Restart Vite with Clean Logs",
      "type": "shell",
      "command": "npm",
      "args": ["run", "dev"],
      "options": {
        "cwd": "sveltekit-frontend"
      },
      "group": "build",
      "dependsOn": "Clear Vite Error Log",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true
      },
      "problemMatcher": [
        {
          "owner": "vite-error-logger",
          "fileLocation": ["relative", "${workspaceFolder}"],
          "pattern": [
            {
              "regexp": "^üîß.*ERROR\\s+(.+):(\\d+):(\\d+)\\s+(.+)$",
              "file": 1,
              "line": 2,
              "column": 3,
              "message": 4,
              "severity": 8
            },
            {
              "regexp": "^üîß.*WARN\\s+(.+):(\\d+):(\\d+)\\s+(.+)$",
              "file": 1,
              "line": 2,
              "column": 3,
              "message": 4,
              "severity": 4
            }
          ]
        }
      ],
      "detail": "Restart Vite development server with clean error logs"
    },
    {
      "label": "Analyze Error Patterns",
      "type": "shell",
      "command": "node",
      "args": [
        "-e",
        "const fs = require('fs'); try { const data = JSON.parse(fs.readFileSync('.vscode/vite-errors.json', 'utf8')); const errors = data.errors || []; console.log('üìä Error Analysis:'); console.log('Total errors:', errors.length); console.log('Error levels:', errors.reduce((acc, e) => { acc[e.level] = (acc[e.level] || 0) + 1; return acc; }, {})); const fileErrors = errors.filter(e => e.file).reduce((acc, e) => { acc[e.file] = (acc[e.file] || 0) + 1; return acc; }, {}); console.log('Most problematic files:', Object.entries(fileErrors).sort(([,a], [,b]) => b - a).slice(0, 5)); } catch(e) { console.log('No error log found or invalid format'); }"
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Analyze error patterns and statistics"
    },
    {
      "label": "Generate Error Report",
      "type": "shell",
      "command": "node",
      "args": [
        "-e",
        "const fs = require('fs'); try { const data = JSON.parse(fs.readFileSync('.vscode/vite-errors.json', 'utf8')); const report = { timestamp: new Date().toISOString(), summary: { total: data.errors?.length || 0, byLevel: (data.errors || []).reduce((acc, e) => { acc[e.level] = (acc[e.level] || 0) + 1; return acc; }, {}), byFile: (data.errors || []).filter(e => e.file).reduce((acc, e) => { acc[e.file] = (acc[e.file] || 0) + 1; return acc; }, {}), recentErrors: (data.errors || []).slice(-10) } }; fs.writeFileSync('.vscode/error-report.json', JSON.stringify(report, null, 2)); console.log('üìã Error report generated: .vscode/error-report.json'); } catch(e) { console.log('‚ùå Failed to generate report:', e.message); }"
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Generate comprehensive error report"
    }
    ,
    {
      "label": "Cluster: Build HTTP Service",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd go-microservice; if (!(Test-Path bin)) { New-Item -ItemType Directory -Path bin | Out-Null }; go mod tidy; go build -o ./bin/cluster-http.exe ./cmd/cluster-service"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "new" }
    },
    {
      "label": "Cluster: Run HTTP Service",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "$env:CLUSTER_HTTP_PORT='8090'; Start-Process -NoNewWindow -FilePath 'go-microservice/bin/cluster-http.exe'"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "dependsOn": ["Cluster: Build HTTP Service"],
      "dependsOrder": "sequence"
    }
    ,
    {
      "label": "Summarizer: Build HTTP Service",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd go-microservice; if (!(Test-Path bin)) { New-Item -ItemType Directory -Path bin | Out-Null }; go mod tidy; go build -o ./bin/summarizer-http.exe ./cmd/summarizer-service"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "new" }
    },
    {
      "label": "Summarizer: Run HTTP Service",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/start-summarizer.ps1",
        "-Port",
        "8091",
        "-OllamaBaseUrl",
        "http://localhost:11434"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "dependsOn": ["Summarizer: Build HTTP Service"],
      "dependsOrder": "sequence"
    },
    {
      "label": "Summarizer: Run HTTP Service (Redis)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/start-summarizer.ps1",
        "-Port",
        "8091",
        "-OllamaBaseUrl",
        "http://localhost:11434",
        "-RedisAddr",
        "localhost:6379"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "dependsOn": ["Summarizer: Build HTTP Service"],
      "dependsOrder": "sequence"
    },
    {
      "label": "Test: Cluster Health via Proxy",
      "type": "shell",
      "command": "curl",
      "args": [
        "-s",
        "http://localhost:5173/api/cluster"
      ],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Test: Summarize via Proxy",
      "type": "shell",
      "command": "curl",
      "args": [
        "-s",
        "-X","POST",
        "-H","Content-Type: application/json",
        "-d","{\"content\":\"A short passage about contracts and liabilities.\",\"type\":\"general\"}",
        "http://localhost:5173/api/ai/summarize"
      ],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    }
    ,
    {
      "label": "Test: Summarizer Health",
      "type": "shell",
      "command": "curl",
      "args": [
        "-s",
        "http://localhost:8091/health"
      ],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    }
    ,
    {
      "label": "Test: Summarizer (direct)",
      "type": "shell",
      "command": "curl",
      "args": [
        "-s",
        "-X","POST",
        "-H","Content-Type: application/json",
        "-d","{\"text\":\"A short passage about contracts and liabilities.\",\"format\":\"summary\"}",
        "http://localhost:8091/summarize"
      ],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    }
    ,
    {
      "label": "pgvector: Create IVFFLAT Index",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/create-ivfflat-index.ps1"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Ensures an IVFFLAT index for the configured pgvector column"
    }
    ,
    {
      "label": "pgvector: Create IVFFLAT (legal_documents)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/create-ivfflat-index.ps1",
        "-ConnectionString",
        "postgresql://legal_admin:123456@localhost:5432/legal_ai_db",
        "-Table",
        "legal_documents",
        "-Column",
        "embedding",
        "-Metric",
        "cosine",
        "-Lists",
        "100"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Ensure IVFFLAT on legal_documents.embedding (cosine, lists=100)"
    }
    ,
    {
      "label": "Seed: Law PDFs",
      "type": "shell",
      "command": "npm",
      "args": ["run", "seed:lawpdfs"],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "new" },
      "detail": "Parse PDFs from known folders and insert into legal_documents with embeddings"
    }
    ,
    {
      "label": "Docs: Open ELK placeholder",
      "type": "shell",
      "command": "code",
      "args": ["elk-stack/README.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Docs: Open MQ placeholder",
      "type": "shell",
      "command": "code",
      "args": ["message-queue/README.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Docs: Open QUIC placeholder",
      "type": "shell",
      "command": "code",
      "args": ["quic-services/README.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Docs: Open Node Cluster placeholder",
      "type": "shell",
      "command": "code",
      "args": ["node-cluster/README.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Docs: Open Windows Service placeholder",
      "type": "shell",
      "command": "code",
      "args": ["windows-service/README.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Docs: Open WebGPU placeholder",
      "type": "shell",
      "command": "code",
      "args": ["webgpu/README.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Docs: Open XState placeholder",
      "type": "shell",
      "command": "code",
      "args": ["xstate/README.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Go: Show Kratos placeholder output",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "Write-Output '[go-services/kratos-server] Placeholder server. TODO: integrate go-kratos.'"
      ],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    }
    ,
    {
      "label": "Docs: Open MCP Context7 Best Practices",
      "type": "shell",
      "command": "code",
      "args": ["MCP_CONTEXT7_BEST_PRACTICES.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Docs: Open Context7 Integration Best Practices",
      "type": "shell",
      "command": "code",
      "args": ["best-practices/context7-integration-best-practices.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Docs: Open Enhanced RAG Best Practices",
      "type": "shell",
      "command": "code",
      "args": ["best-practices/enhanced-rag-best-practices.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Docs: Open MCP Extension README",
      "type": "shell",
      "command": "code",
      "args": [".vscode/extensions/mcp-context7-assistant/README.md"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Health: MCP Context7 (4000)",
      "type": "shell",
      "command": "curl",
      "args": ["-sS", "http://localhost:4000/health"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Health: MCP Multi-Core (4100)",
      "type": "shell",
      "command": "curl",
      "args": ["-sS", "http://localhost:4100/health"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Backup: tasks.json & kratos main.go",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/backup-tasks.ps1"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "üèóÔ∏è Go-Kratos: Build & Run",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd go-services; go mod tidy; go build -o ./bin/kratos-server.exe ./cmd/kratos-server; Start-Process -NoNewWindow -FilePath './bin/kratos-server.exe'"
      },
      "group": "build",
      "presentation": { "reveal": "always", "panel": "new" },
      "detail": "Build and run Go-Kratos legal AI server"
    },
    {
      "label": "üìä ELK: Start Elasticsearch",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd elk-stack/elasticsearch; ./start-elasticsearch.bat"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Start Elasticsearch for legal AI logging"
    },
    {
      "label": "üìä ELK: Start Logstash",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd elk-stack/logstash; ./start-logstash.bat"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Start Logstash for legal AI log processing"
    },
    {
      "label": "üìä ELK: Start Kibana",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd elk-stack/kibana; ./start-kibana.bat"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Start Kibana for legal AI log visualization"
    },
    {
      "label": "üöÄ NATS: Start Message Queue",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd message-queue/nats; ./start-nats.bat"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Start NATS server for inter-service messaging"
    },
    {
      "label": "üåê Node: Start Cluster Manager",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd node-cluster; ./start-cluster.bat"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Start Node.js cluster manager for scalable services"
    },
    {
      "label": "‚ö° QUIC: Start Protocol Services",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd quic-services; ./start-quic.bat"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Start QUIC protocol services for ultra-low latency"
    },
    {
      "label": "üîß Windows: Start Service Manager",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "cd windows-service; ./start-service.bat"
      ],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Start Windows Service integration for system management"
    },
    {
      "label": "üöÄ Full Stack: Start All Services",
      "type": "shell",
      "command": "echo",
      "args": ["Starting all Legal AI orchestration services..."],
      "group": "build",
      "dependsOrder": "parallel",
      "dependsOn": [
        "üèóÔ∏è Go-Kratos: Build & Run",
        "üöÄ NATS: Start Message Queue",
        "üåê Node: Start Cluster Manager",
        "‚ö° QUIC: Start Protocol Services"
      ],
      "detail": "Orchestrated startup of all microservice components"
    },
    {
      "label": "üìã Orchestration: Health Check All",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-Command",
        "Write-Output 'üîç Checking orchestration service health...'; $services = @('Kratos:8080', 'NATS:4222', 'Node-Cluster:3000', 'QUIC:8443'); foreach ($svc in $services) { $parts = $svc -split ':'; $name = $parts[0]; $port = $parts[1]; try { $result = Test-NetConnection -ComputerName localhost -Port $port -WarningAction SilentlyContinue; if ($result.TcpTestSucceeded) { Write-Output \"‚úÖ $name (port $port): Running\" } else { Write-Output \"‚ùå $name (port $port): Not accessible\" } } catch { Write-Output \"‚ùå $name (port $port): Error checking\" } }"
      ],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" },
      "detail": "Check health status of all orchestration services"
    }
  ]
}
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Start Legal AI System",
      "type": "shell",
      "command": "${workspaceFolder}/START-LEGAL-AI-WINDOWS.bat",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "üßæ Vector: Scan and Embed",
      "type": "shell",
      "command": "npm",
      "args": ["run", "vector:scan"],
      "group": "build",
      "presentation": { "reveal": "always", "panel": "new" }
    },
    {
      "label": "üîç Vector: Search",
      "type": "shell",
      "command": "npm",
      "args": ["run", "vector:search"],
      "group": "test",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "üõ∞Ô∏è Logs: WebSocket Server",
      "type": "shell",
      "command": "npm",
      "args": ["run", "logs:ws"],
      "group": "build",
      "isBackground": true,
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Frontend: CLI Detect",
      "type": "shell",
      "command": "npm",
      "args": ["run", "cli:detect"],
      "options": { "cwd": "${workspaceFolder}/sveltekit-frontend" },
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "Frontend: CLI Update",
      "type": "shell",
      "command": "npm",
      "args": ["run", "cli:update"],
      "options": { "cwd": "${workspaceFolder}/sveltekit-frontend" },
      "group": "build",
      "presentation": { "reveal": "always", "panel": "shared" }
    },
    {
      "label": "CLI: Detect Installed CLIs",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/cli-detect-update.ps1"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Detect Claude/Gemini CLIs and save to logs/cli-detect.json"
    },
    {
      "label": "CLI: Update CLIs (Global)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/cli-detect-update.ps1",
        "-AutoUpdate"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Update Claude/Gemini CLIs with npm -g"
    },
    {
      "label": "Ollama: Chat (quick test)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/ollama-json.ps1",
        "-Mode",
        "chat",
        "-Prompt",
        "'Hello from VS Code Task'"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Send a test chat to local Ollama and save to logs/ollama-response.json"
    },
    {
      "label": "Ollama: Embedding (quick test)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/ollama-json.ps1",
        "-Mode",
        "embeddings",
        "-Prompt",
        "'contract liability terms'"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "detail": "Request embeddings from local Ollama and save to logs/ollama-response.json"
    },
    {
      "label": "Svelte: Generate Error Suggestions",
      "type": "shell",
      "command": "npm",
      "args": [
        "run",
        "check:suggest"
      ],
      "options": {
        "cwd": "${workspaceFolder}/sveltekit-frontend"
      },
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new"
      },
      "detail": "Run svelte-check with AI suggestions; see logs/svelte-suggestions.json"
    },
    {
      "label": "Tag Legacy Go Files",
      "type": "shell",
      "command": "node",
      "args": ["scripts/tag-legacy-go-files.mjs"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "Start MCP Servers",
      "type": "shell",
      "command": "echo",
      "args": ["Starting MCP servers..."],
      "group": "build",
      "dependsOrder": "sequence",
      "dependsOn": [
        "MCP: Context7 Server",
        "MCP: Memory Server",
        "MCP: Postgres Server"
      ]
    },
    {
      "label": "MCP: Context7 Server",
      "type": "shell",
      "command": "node",
      "args": ["${workspaceFolder}/mcp-servers/context7-server.js"],
      "options": {
        "env": {
          "STACK_CONFIG": "${workspaceFolder}/context7-docs/context7-mcp-config.json",
          "DOC_SOURCES": "${workspaceFolder}/context7-docs",
          "ENABLE_VLLM": "false",
          "SERVER_PORT": "4000"
        }
      },
      "group": "build",
      "isBackground": true,
      "problemMatcher": {
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": "^.*Context7 server starting.*$",
          "endsPattern": "^.*Context7 server ready.*$"
        }
      }
    },
    {
      "label": "MCP: Memory Server",
      "type": "shell",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"],
      "group": "build",
      "isBackground": true
    },
    {
      "label": "MCP: Postgres Server",
      "type": "shell",
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-postgres"],
      "options": {
        "env": {
          "POSTGRES_CONNECTION_STRING": "postgresql://postgres:postgres@localhost:5432/legal_ai_db"
        }
      },
      "group": "build",
      "isBackground": true
    },
    {
      "label": "Start SvelteKit Dev",
      "type": "shell",
      "command": "npm",
      "args": ["run", "dev"],
      "options": {
        "cwd": "${workspaceFolder}/sveltekit-frontend"
      },
      "group": "build",
      "isBackground": true,
      "problemMatcher": {
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": "^.*VITE.*$",
          "endsPattern": "^.*Local:.*$"
        }
      }
    },
    {
      "label": "Health Check Services",
      "type": "shell",
      "command": "echo",
      "args": ["Checking service health..."],
      "group": "test",
      "dependsOrder": "parallel",
      "dependsOn": [
        "Check PostgreSQL",
        "Check Ollama",
        "Check Redis",
        "Check Qdrant"
      ]
    },
    {
      "label": "Check PostgreSQL",
      "type": "shell",
      "command": "docker",
      "args": ["exec", "legal_ai_postgres", "pg_isready", "-U", "postgres"]
    },
    {
      "label": "Check Ollama",
      "type": "shell",
      "command": "curl",
      "args": ["-f", "http://localhost:11434/api/version"]
    },
    {
      "label": "Check Redis",
      "type": "shell",
      "command": "docker",
      "args": ["exec", "legal_ai_redis", "redis-cli", "ping"]
    },
    {
      "label": "Check Qdrant",
      "type": "shell",
      "command": "curl",
      "args": ["-f", "http://localhost:6333/collections"]
    },
    {
      "label": "üóÉÔ∏è Optimize Vector Database",
      "type": "shell",
      "command": "npx",
      "args": ["tsx", "scripts/optimize-vector-database.ts"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß† Test Vector Search",
      "type": "shell",
      "command": "curl",
      "args": [
        "-X", "POST",
        "-H", "Content-Type: application/json",
        "-d", "{\"query\": \"contract liability terms\", \"model\": \"claude\", \"limit\": 5}",
        "http://localhost:5173/api/ai/vector-search"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üìä Vector Search Status",
      "type": "shell",
      "command": "curl",
      "args": [
        "-s",
        "http://localhost:5173/api/ai/vector-search"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "üîÑ Reindex Documents",
      "type": "shell",
      "command": "curl",
      "args": [
        "-X", "PUT",
        "-H", "Content-Type: application/json",
        "-d", "{\"documentIds\": [\"sample-doc-1\", \"sample-doc-2\"], \"forceReindex\": true}",
        "http://localhost:5173/api/ai/vector-search/index"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    },
    {
      "label": "üß™ Vector Search Demo",
      "type": "shell",
      "command": "node",
      "args": ["-e", "console.log('Navigate to: http://localhost:5173/dev/vector-search-demo')"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "Check and Analyze with Claude",
      "type": "shell",
      "command": "npx",
      "args": ["tsx", "scripts/check-and-analyze.ts"],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": []
    },
    {
      "label": "Quick Fix TypeScript Errors",
      "type": "shell",
      "command": "npm",
      "args": ["run", "check"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "shared"
      },
      "problemMatcher": "$tsc"
    },

    // Vite Error Logger Tasks
    {
      "label": "View Vite Errors",
      "type": "shell",
      "command": "code",
      "args": [".vscode/vite-errors.json"],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true
      },
      "problemMatcher": [],
      "detail": "Open Vite error log in VS Code editor"
    },
    {
      "label": "Clear Vite Error Log",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-Command",
        "'{\"metadata\":{\"lastUpdated\":\"\",\"totalEntries\":0},\"errors\":[],\"diagnostics\":[]}' | Out-File -FilePath '.vscode/vite-errors.json' -Encoding utf8"
      ],
      "group": "test",
      "presentation": {
        "reveal": "silent"
      },
      "problemMatcher": [],
      "detail": "Clear the Vite error log file"
    },
    {
      "label": "Restart Vite with Clean Logs",
      "type": "shell",
      "command": "npm",
      "args": ["run", "dev"],
      "options": {
        "cwd": "sveltekit-frontend"
      },
      "group": "build",
      "dependsOn": "Clear Vite Error Log",
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "focus": true
      },
      "problemMatcher": [
        {
          "owner": "vite-error-logger",
          "fileLocation": ["relative", "${workspaceFolder}"],
          "pattern": [
            {
              "regexp": "^üîß.*ERROR\\s+(.+):(\\d+):(\\d+)\\s+(.+)$",
              "file": 1,
              "line": 2,
              "column": 3,
              "message": 4,
              "severity": 8
            },
            {
              "regexp": "^üîß.*WARN\\s+(.+):(\\d+):(\\d+)\\s+(.+)$",
              "file": 1,
              "line": 2,
              "column": 3,
              "message": 4,
              "severity": 4
            }
          ]
        }
      ],
      "detail": "Restart Vite development server with clean error logs"
    },
    {
      "label": "Analyze Error Patterns",
      "type": "shell",
      "command": "node",
      "args": [
        "-e",
        "const fs = require('fs'); try { const data = JSON.parse(fs.readFileSync('.vscode/vite-errors.json', 'utf8')); const errors = data.errors || []; console.log('üìä Error Analysis:'); console.log('Total errors:', errors.length); console.log('Error levels:', errors.reduce((acc, e) => { acc[e.level] = (acc[e.level] || 0) + 1; return acc; }, {})); const fileErrors = errors.filter(e => e.file).reduce((acc, e) => { acc[e.file] = (acc[e.file] || 0) + 1; return acc; }, {}); console.log('Most problematic files:', Object.entries(fileErrors).sort(([,a], [,b]) => b - a).slice(0, 5)); } catch(e) { console.log('No error log found or invalid format'); }"
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Analyze error patterns and statistics"
    },
    {
      "label": "Generate Error Report",
      "type": "shell",
      "command": "node",
      "args": [
        "-e",
        "const fs = require('fs'); try { const data = JSON.parse(fs.readFileSync('.vscode/vite-errors.json', 'utf8')); const report = { timestamp: new Date().toISOString(), summary: { total: data.errors?.length || 0, byLevel: (data.errors || []).reduce((acc, e) => { acc[e.level] = (acc[e.level] || 0) + 1; return acc; }, {}), byFile: (data.errors || []).filter(e => e.file).reduce((acc, e) => { acc[e.file] = (acc[e.file] || 0) + 1; return acc; }, {}), recentErrors: (data.errors || []).slice(-10) } }; fs.writeFileSync('.vscode/error-report.json', JSON.stringify(report, null, 2)); console.log('üìã Error report generated: .vscode/error-report.json'); } catch(e) { console.log('‚ùå Failed to generate report:', e.message); }"
      ],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "problemMatcher": [],
      "detail": "Generate comprehensive error report"
    }
  ]
}
{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(npm run check:*)",
      "Bash(claude mcp:*)",
      "Bash(npm run build:*)",
      "Bash(npm install:*)",
      "mcp__context7-custom__analyze-stack",
      "mcp__context7-custom__suggest-integration",
      "mcp__context7-custom__suggest-integration",
      "Bash(mv:*)",
      "Bash(npm run dev:*)",
      "mcp__filesystem__directory_tree",
      "mcp__context7-custom__generate-best-practices",
      "mcp__ide__getDiagnostics",
      "Bash(./install-graphql-deps.bat)",
      "Bash(timeout 30 npm run build)",
      "Bash(timeout 45 npm run build)",
      "Bash(timeout 60 npm run build)",
      "Bash(touch:*)",
      "mcp__filesystem__read_file",
      "mcp__filesystem__read_multiple_files",
      "Bash(npx tsc:*)",
      "Bash(mkdir:*)",
      "Bash(npm run format:*)",
      "Bash(npm run lint)",
      "Bash(node:*)",
      "Bash(set NODE_OPTIONS=--max-old-space-size=8192)",
      "Bash(timeout 120 npm run check)",
      "Bash(timeout 60 npx svelte-check --tsconfig ./tsconfig.json --threshold warning --no-tsconfig-auto-check)",
      "Bash(npx svelte-check:*)",
      "Bash(timeout 60 npx svelte-check --tsconfig ./tsconfig.json --threshold error --diagnostic-sources \"svelte\" --output human)",
      "Bash(timeout 60 npx svelte-check --no-tsconfig --threshold error --output human)",
      "Bash(grep:*)",
      "Bash(timeout 45 npm run check)",
      "Bash(timeout 30s npm run check:fast)",
      "Bash(npx:*)",
      "Bash(timeout 30s npx svelte-check --tsconfig ./tsconfig.json)",
      "Bash(timeout 30s npm run check:base)",
      "Bash(timeout 30 npm run check)",
      "Bash(find:*)",
      "Bash(timeout 20 npm run check)",
      "Bash(rg:*)",
      "Bash(timeout 30 npx tsc --noEmit --skipLibCheck)",
      "Bash(timeout 60 npm run check:base)",
      "Bash(timeout 45 npx tsc --noEmit --skipLibCheck)",
      "Bash(timeout 60 npx svelte-check --threshold warning)",
      "Bash(timeout 60 npm run check)",
      "Bash(timeout 30 npx svelte-check --threshold error)",
      "Bash(sed:*)",
      "Bash(timeout 30 npm run check:base)",
      "Bash(ls:*)",
      "Bash(chmod:*)",
      "Bash(ollama create:*)",
      "Bash(timeout 180 npm run check)",
      "Bash(timeout 60s npx tsc --noEmit --skipLibCheck --incremental)",
      "Bash(timeout 30s npx tsc --noEmit --skipLibCheck --incremental)",
      "Bash(timeout 60s npx tsc --noEmit --skipLibCheck)",
      "Bash(timeout 30s npx tsc --noEmit --skipLibCheck)",
      "Bash(timeout 300 npm run check)",
      "Bash(timeout 30 npx svelte-check)",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_evaluate",
      "Bash(pkill:*)",
      "Bash(timeout 30 npx svelte-check --threshold error --output human)",
      "Bash(timeout 60 npx svelte-check --threshold error --output human)",
      "Bash(rm:*)",
      "Bash(curl:*)",
      "Bash(rm:*)",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_evaluate",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_click",
      "Bash(timeout 90 npm run check:base)",
      "Bash(pkill:*)",
      "Bash(taskkill:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker exec:*)",
      "Bash(docker restart:*)",
      "Bash(python:*)",
      "Bash(docker volume:*)",
      "Bash(docker run:*)",
      "Bash(docker start:*)",
      "mcp__filesystem__list_directory",
      "Bash(npm search:*)",
      "Bash(npm search canvas-types)",
      "Bash(timeout 10 npm run dev)",
      "Bash(realpath:*)",
      "Bash(powershell.exe:*)",
      "mcp__filesystem__edit_file",
      "mcp__filesystem__write_file",
      "mcp__filesystem__create_directory",
      "Bash(npm run compile:*)",
      "Bash(npm run mcp:status:*)",
      "Bash(where:*)",
      "Bash(ollama:*)",
      "Bash(timeout 45 npm run check:base)",
      "Bash(timeout 30 npx svelte-check --tsconfig ./tsconfig.json --threshold error --diagnostic-sources \"svelte\" --output human)",
      "Bash(timeout 30 npx svelte-check --tsconfig ./tsconfig.json --threshold error --output human)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm run setup:gpu-json:*)",
      "Bash(npm run benchmark:json:*)",
      "Bash(npm run test:*)",
      "Bash(timeout 30 npx tsc --noEmit --skipLibCheck --incremental)",
      "Bash(docker:*)",
      "Bash(timeout 60 npx tsc --noEmit --skipLibCheck --incremental)",
      "Bash(npm start)",
      "Bash(timeout 60 npx tsc --noEmit --skipLibCheck)",
      "Bash(cat:*)",
      "Bash(timeout 60 npx tsc --noEmit --skipLibCheck src/lib/stores/enhanced-rag-store.ts)",
      "Bash(cp:*)",
      "Bash(timeout 30 npx tsc --noEmit --skipLibCheck src/lib/services/comprehensive-caching-architecture.ts)",
      "Bash(psql:*)",
      "Bash(sc query:*)",
      "Bash(choco:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" --version)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"CREATE DATABASE legal_ai_db;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\createdb.exe\" -U postgres legal_ai_db)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"\\dt\")",
      "Bash(npm ls:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d legal_ai_db -h localhost -c \"SELECT * FROM pg_available_extensions WHERE name = ''vector'';\")",
      "Bash(powershell:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -V)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "WebFetch(domain:github.com)",
      "Bash(code:*)",
      "Bash(powershell:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d legal_ai_db -c \"SELECT * FROM pg_extension WHERE extname = ''vector'';\")",
      "Bash(timeout 20 npx tsc --noEmit --skipLibCheck)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -c \"CREATE EXTENSION IF NOT EXISTS vector;\" legal_ai_db)",
      "Bash(timeout 30 npx tsc:*)",
      "Bash(timeout 30 npx drizzle-kit generate)",
      "Bash(start /B ollama serve)",
      "Bash(timeout:*)",
      "Bash(start /B redis-windows\\redis-server.exe:*)",
      "Bash(redis-server.exe:*)",
      "Bash(./redis-server.exe:*)",
      "Bash(./redis-windows/redis-cli.exe:*)",
      "Bash(npm run start:*)",
      "Bash(npm run:*)",
      "Bash(set MCP_DEBUG=true)",
      "Bash(start /b node:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(awk:*)",
      "mcp__puppeteer__puppeteer_fill",
      "mcp__puppeteer__puppeteer_select",
      "Bash(copy \"+server.ts\" \"+server.ts.backup.20250804\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"CREATE EXTENSION IF NOT EXISTS vector;\")",
      "Bash(npm audit:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"\\l\")",
      "Bash(git clone:*)",
      "Bash(set \"PGROOT=C:\\Program Files\\PostgreSQL\\17\")",
      "Bash(nmake:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\" -W)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(pg_isready:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_isready.exe\" -h localhost -p 5432)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -f \"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\setup-legal-ai-db.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\" --no-password)",
      "Bash(set PGPASSWORD=LegalAI2024!)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(cmd /c \"\"\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\" && set \"\"PGROOT=C:\\Program Files\\PostgreSQL\\17\"\" && cd %TEMP% && git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git\")",
      "Bash(\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\bin\\Hostx64\\x64\\nmake.exe\" /F Makefile.win)",
      "Bash(set DATABASE_URL=postgresql://legal_admin:LegalAI2024!@localhost:5432/legal_ai_db)",
      "Bash(if exist pgvector rmdir /s /q pgvector)",
      "Bash(cmd /c:*)",
      "Bash(cmd /c:*)",
      "Bash(./build-pgvector.bat)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\" --no-password)",
      "Bash(if exist bits-ui-main rmdir /s /q bits-ui-main)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(set PGPASSWORD=123456)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(true)",
      "Bash(nvidia-smi:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(.quick-ai-setup.bat)",
      "Bash(redis-windowsredis-cli.exe ping)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(go run:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "mcp__filesystem__search_files",
      "Bash(start /B qdrant-windows\\qdrant.exe:*)",
      "Bash(dir:*)",
      "Bash(qdrant-windows\\qdrant.exe:*)",
      "Bash(./qdrant-windows/qdrant.exe --help)",
      "Bash(start /B:*)",
      "Bash(start-qdrant-permanent.bat)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(go build:*)",
      "Bash(go:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(set CGO_ENABLED=0)",
      "Bash(copy legal-ai-server.go main_backup.go)",
      "Bash(del main.go)",
      "Bash(ren:*)",
      "Bash(setx:*)",
      "Bash(.legal-ai-server.exe)",
      "Bash(./legal-ai-server.exe)",
      "Bash(PORT=8081 ./legal-ai-server.exe)",
      "Bash(setup-services-path.bat)",
      "Bash(set PATH=%PATH%)",
      "Bash(C:UsersjamesDesktopdeeds-webdeeds-web-appredis-windows)",
      "Bash(C:UsersjamesDesktopdeeds-webdeeds-web-appqdrant-windows)",
      "Bash(C:Program FilesPostgreSQL17bin)",
      "Bash(echo:*)",
      "Bash(pm2:*)",
      "Bash(git checkout:*)",
      "Bash(.COMPLETE-AI-SYSTEM-STARTUP-FIXED.bat)",
      "Bash(set PORT=8080)",
      "Bash(set OLLAMA_URL=http://localhost:11434)",
      "Bash(tasklist:*)",
      "Bash(set GOOS=windows)",
      "Bash(clang:*)",
      "Bash(set CC=clang)",
      "Bash(set CXX=clang++)",
      "Bash(set CGO_ENABLED=1)",
      "Bash(set \"CC=C:\\Program Files\\LLVM\\bin\\clang.exe\")",
      "Bash(if not exist C:clang mkdir C:clang)",
      "Bash(xcopy:*)",
      "Bash(set \"CXX=C:\\Program Files\\LLVM\\bin\\clang++.exe\")",
      "Bash(set CGO_LDFLAGS=-lkernel32)",
      "Bash(.legal-ai-server.exe --help)",
      "Bash(./legal-ai-server.exe --version)",
      "Bash(./legal-ai-server.exe --help)",
      "Bash(export PATH=\"$PATH:/c/Program Files/LLVM/bin\")",
      "Bash(export CC=clang)",
      "Bash(export CXX=clang++)",
      "Bash(export CGO_ENABLED=1)",
      "Bash(export CGO_LDFLAGS=-lkernel32)",
      "Bash(./setup-neo4j-integration.bat)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(concurrently:*)",
      "Bash(nvcc:*)",
      "Bash(set \"CC=C:\\Progra~1\\LLVM\\bin\\clang.exe\")",
      "Bash(./test-cuda-simple.bat)",
      "Bash(./BUILD-GPU-SIMD-PRODUCTION.bat)",
      "Bash(./BUILD-CPU-ONLY.bat)",
      "Bash(set PGPASSWORD=postgres)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -f \"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\change-password.sql\")",
      "Bash(./fix-postgres-password.bat)",
      "Bash(set DATABASE_URL=)",
      "Bash(C:Progra~1LLVMbin)",
      "Bash(./test-go-cuda.bat)",
      "Bash(set PORT=8081)",
      "Bash(./cleanup-docker-windows-native.bat)",
      "Bash(./update-db-password.bat)",
      "Bash(./start-windows-native.bat)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\createdb.exe\" -U postgres -h localhost legal_ai_db)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -f \"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\schema.sql\")",
      "Bash(./run-migration.bat)",
      "Bash(set DATABASE_URL=postgresql://legal_admin:123456@localhost:5432/legal_ai_db)",
      "Bash(./restart-go-with-db.bat)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"\\d legal_documents\" -q)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT id, case_id, LEFT(content, 50) as content_preview, array_length(embedding, 1) as embedding_dims FROM legal_documents LIMIT 3;\" -q)",
      "Bash(./RUN-INDEXER.bat)",
      "Bash(./start-go-background.bat)",
      "Bash(./quick-fix-high-priority-errors.bat)",
      "Bash(for file in \"src/lib/services/redis-vector-service.ts\" \"src/lib/vscode/json-processor-extension.ts\" \"src/routes/api/extract-text/+server.ts\")",
      "Bash(do mv \"$file\" \"$file.disabled\")",
      "Bash(done)",
      "Bash(for file in \"src/lib/services/best-practices-service.ts\" \"src/lib/services/determinism-evaluation-service.ts\" \"src/lib/services/document-ingestion-service.ts\" \"src/lib/services/library-sync-service.ts\" \"src/lib/services/multi-agent-orchestrator.ts\")",
      "Bash(for:*)",
      "Bash(do sed -i '1i // @ts-nocheck' \"$file\")",
      "Bash(./fix-all-types.bat)",
      "Bash(do sed -i '1i<!-- @ts-nocheck -->' \"$file\")",
      "WebFetch(domain:docs.nomic.ai)",
      "WebFetch(domain:python.langchain.com)",
      "Bash(pwsh:*)",
      "Bash(./redis-windows/redis-server.exe:*)",
      "Bash(net start:*)",
      "Bash(redis-cli:*)",
      "Bash(npm:*)",
      "Bash(copy favicon.ico favicon.png)",
      "Bash(time npm run check:ultra-fast)",
      "Bash(time npm run check:fast)",
      "Bash(time npm run check)",
      "Bash(zx:*)",
      "Bash(/dev/null)",
      "Bash(start.bat)",
      "Bash(./start.bat)",
      "Bash(\"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\redis-windows\\redis-server.exe\" --port 6379)",
      "Bash(\"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\start-qdrant-permanent.bat\")",
      "Bash(./ai-summary.exe)",
      "Bash(./ai-enhanced.exe)",
      "Bash(./ai-enhanced-fixed.exe)",
      "Bash(./ai-enhanced-postgresql.exe)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT document_id, original_name, document_type, case_id, text_length, created_at FROM document_processing ORDER BY created_at DESC LIMIT 3;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT document_id, original_name, document_type, case_id, text_length, LEFT(summary, 100) as summary_preview, created_at FROM document_processing ORDER BY created_at DESC LIMIT 1;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT COUNT(*) as document_count FROM legal_ai_db.document_processing;\" legal_ai_db)",
      "Bash(./ai-enhanced-final.exe)",
      "Bash(start \"\" \"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\ai-summary-service\\test-integration.html\")",
      "Bash(del \"src\\routes\\api\\ai\\summarize\\+server.backup.js\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(C:UsersjamesDesktopdeeds-webdeeds-web-appQUICK-START-NATIVE.bat)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"CREATE EXTENSION IF NOT EXISTS vector;\" legal_ai_db)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -d legal_ai_db -f database-schema.sql)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT id, email, role, is_active FROM users LIMIT 5;\" -q)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT id, email, role, is_active FROM users LIMIT 5;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -f \"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\seed-demo-users.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -f \"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\database-schema.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\" -W)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -f \"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\fix-login-direct.sql\")",
      "Bash(move:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name = ''users'' AND table_schema = ''public'' ORDER BY ordinal_position;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"\\d users\")",
      "Bash(eslint:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(./start-qdrant-permanent.bat)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -d legal_ai_db -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -d legal_ai_db -f \"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\database-schema.sql\")",
      "Bash(start /min:*)",
      "Bash(.redis-windowsredis-server.exe)",
      "Bash(.\\redis-windows\\redis-cli.exe:*)",
      "Bash(.start-qdrant-permanent.bat)",
      "Bash(./redis-cli.exe:*)",
      "Bash(unzip:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = ''public'';\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT extname FROM pg_extension WHERE extname = ''vector'';\")",
      "mcp__filesystem__list_allowed_directories",
      "Bash(.START-LEGAL-AI.bat)",
      "Bash(./START-LEGAL-AI.bat)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(start redis-server.exe)",
      "Bash(./enhanced-rag.exe)",
      "Bash(start:*)",
      "Bash(./upload-service.exe)",
      "Bash(./enhanced-legal-ai-fixed.exe)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(.enhanced-semantic-architecture.exe)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = ''legal_documents'' ORDER BY ordinal_position;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"\\d legal_documents\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"CREATE TABLE IF NOT EXISTS legal_documents AS SELECT 1 WHERE 1=0;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"ALTER TABLE legal_documents ADD COLUMN IF NOT EXISTS content TEXT;\")"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}
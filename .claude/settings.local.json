{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(npm run check:*)",
      "Bash(claude mcp:*)",
      "Bash(npm run build:*)",
      "Bash(npm install:*)",
      "mcp__context7-custom__analyze-stack",
      "mcp__context7-custom__suggest-integration",
      "mcp__context7-custom__suggest-integration",
      "Bash(mv:*)",
      "Bash(npm run dev:*)",
      "mcp__filesystem__directory_tree",
      "mcp__context7-custom__generate-best-practices",
      "mcp__ide__getDiagnostics",
      "Bash(./install-graphql-deps.bat)",
      "Bash(timeout 30 npm run build)",
      "Bash(timeout 45 npm run build)",
      "Bash(timeout 60 npm run build)",
      "Bash(touch:*)",
      "mcp__filesystem__read_file",
      "mcp__filesystem__read_multiple_files",
      "Bash(npx tsc:*)",
      "Bash(mkdir:*)",
      "Bash(npm run format:*)",
      "Bash(npm run lint)",
      "Bash(node:*)",
      "Bash(set NODE_OPTIONS=--max-old-space-size=8192)",
      "Bash(timeout 120 npm run check)",
      "Bash(timeout 60 npx svelte-check --tsconfig ./tsconfig.json --threshold warning --no-tsconfig-auto-check)",
      "Bash(npx svelte-check:*)",
      "Bash(timeout 60 npx svelte-check --tsconfig ./tsconfig.json --threshold error --diagnostic-sources \"svelte\" --output human)",
      "Bash(timeout 60 npx svelte-check --no-tsconfig --threshold error --output human)",
      "Bash(grep:*)",
      "Bash(timeout 45 npm run check)",
      "Bash(timeout 30s npm run check:fast)",
      "Bash(npx:*)",
      "Bash(timeout 30s npx svelte-check --tsconfig ./tsconfig.json)",
      "Bash(timeout 30s npm run check:base)",
      "Bash(timeout 30 npm run check)",
      "Bash(find:*)",
      "Bash(timeout 20 npm run check)",
      "Bash(rg:*)",
      "Bash(timeout 30 npx tsc --noEmit --skipLibCheck)",
      "Bash(timeout 60 npm run check:base)",
      "Bash(timeout 45 npx tsc --noEmit --skipLibCheck)",
      "Bash(timeout 60 npx svelte-check --threshold warning)",
      "Bash(timeout 60 npm run check)",
      "Bash(timeout 30 npx svelte-check --threshold error)",
      "Bash(sed:*)",
      "Bash(timeout 30 npm run check:base)",
      "Bash(ls:*)",
      "Bash(chmod:*)",
      "Bash(ollama create:*)",
      "Bash(timeout 180 npm run check)",
      "Bash(timeout 60s npx tsc --noEmit --skipLibCheck --incremental)",
      "Bash(timeout 30s npx tsc --noEmit --skipLibCheck --incremental)",
      "Bash(timeout 60s npx tsc --noEmit --skipLibCheck)",
      "Bash(timeout 30s npx tsc --noEmit --skipLibCheck)",
      "Bash(timeout 300 npm run check)",
      "Bash(timeout 30 npx svelte-check)",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_evaluate",
      "Bash(pkill:*)",
      "Bash(timeout 30 npx svelte-check --threshold error --output human)",
      "Bash(timeout 60 npx svelte-check --threshold error --output human)",
      "Bash(rm:*)",
      "Bash(curl:*)",
      "Bash(rm:*)",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_evaluate",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_click",
      "Bash(timeout 90 npm run check:base)",
      "Bash(pkill:*)",
      "Bash(taskkill:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker exec:*)",
      "Bash(docker restart:*)",
      "Bash(python:*)",
      "Bash(docker volume:*)",
      "Bash(docker run:*)",
      "Bash(docker start:*)",
      "mcp__filesystem__list_directory",
      "Bash(npm search:*)",
      "Bash(npm search canvas-types)",
      "Bash(timeout 10 npm run dev)",
      "Bash(realpath:*)",
      "Bash(powershell.exe:*)",
      "mcp__filesystem__edit_file",
      "mcp__filesystem__write_file",
      "mcp__filesystem__create_directory",
      "Bash(npm run compile:*)",
      "Bash(npm run mcp:status:*)",
      "Bash(where:*)",
      "Bash(ollama:*)",
      "Bash(timeout 45 npm run check:base)",
      "Bash(timeout 30 npx svelte-check --tsconfig ./tsconfig.json --threshold error --diagnostic-sources \"svelte\" --output human)",
      "Bash(timeout 30 npx svelte-check --tsconfig ./tsconfig.json --threshold error --output human)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(npm run setup:gpu-json:*)",
      "Bash(npm run benchmark:json:*)",
      "Bash(npm run test:*)",
      "Bash(timeout 30 npx tsc --noEmit --skipLibCheck --incremental)",
      "Bash(docker:*)",
      "Bash(timeout 60 npx tsc --noEmit --skipLibCheck --incremental)",
      "Bash(npm start)",
      "Bash(timeout 60 npx tsc --noEmit --skipLibCheck)",
      "Bash(cat:*)",
      "Bash(timeout 60 npx tsc --noEmit --skipLibCheck src/lib/stores/enhanced-rag-store.ts)",
      "Bash(cp:*)",
      "Bash(timeout 30 npx tsc --noEmit --skipLibCheck src/lib/services/comprehensive-caching-architecture.ts)",
      "Bash(psql:*)",
      "Bash(sc query:*)",
      "Bash(choco:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" --version)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"CREATE DATABASE legal_ai_db;\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\createdb.exe\" -U postgres legal_ai_db)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"\\dt\")",
      "Bash(npm ls:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d legal_ai_db -h localhost -c \"SELECT * FROM pg_available_extensions WHERE name = ''vector'';\")",
      "Bash(powershell:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -V)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "WebFetch(domain:github.com)",
      "Bash(code:*)",
      "Bash(powershell:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -d legal_ai_db -c \"SELECT * FROM pg_extension WHERE extname = ''vector'';\")",
      "Bash(timeout 20 npx tsc --noEmit --skipLibCheck)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -c \"CREATE EXTENSION IF NOT EXISTS vector;\" legal_ai_db)",
      "Bash(timeout 30 npx tsc:*)",
      "Bash(timeout 30 npx drizzle-kit generate)",
      "Bash(start /B ollama serve)",
      "Bash(timeout:*)",
      "Bash(start /B redis-windows\\redis-server.exe:*)",
      "Bash(redis-server.exe:*)",
      "Bash(./redis-server.exe:*)",
      "Bash(./redis-windows/redis-cli.exe:*)",
      "Bash(npm run start:*)",
      "Bash(npm run:*)",
      "Bash(set MCP_DEBUG=true)",
      "Bash(start /b node:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(awk:*)",
      "mcp__puppeteer__puppeteer_fill",
      "mcp__puppeteer__puppeteer_select",
      "Bash(copy \"+server.ts\" \"+server.ts.backup.20250804\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d prosecutor_db -h localhost -c \"CREATE EXTENSION IF NOT EXISTS vector;\")",
      "Bash(npm audit:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d prosecutor_db -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"\\l\")",
      "Bash(git clone:*)",
      "Bash(set \"PGROOT=C:\\Program Files\\PostgreSQL\\17\")",
      "Bash(nmake:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\" -W)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(pg_isready:*)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\pg_isready.exe\" -h localhost -p 5432)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -f \"C:\\Users\\james\\Desktop\\deeds-web\\deeds-web-app\\setup-legal-ai-db.sql\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\" --no-password)",
      "Bash(set PGPASSWORD=LegalAI2024!)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\")",
      "Bash(cmd /c \"\"\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\"\" && set \"\"PGROOT=C:\\Program Files\\PostgreSQL\\17\"\" && cd %TEMP% && git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git\")",
      "Bash(\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\bin\\Hostx64\\x64\\nmake.exe\" /F Makefile.win)",
      "Bash(set DATABASE_URL=postgresql://legal_admin:LegalAI2024!@localhost:5432/legal_ai_db)",
      "Bash(if exist pgvector rmdir /s /q pgvector)",
      "Bash(cmd /c:*)",
      "Bash(cmd /c:*)",
      "Bash(./build-pgvector.bat)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U legal_admin -d legal_ai_db -h localhost -c \"SELECT version();\" --no-password)",
      "Bash(if exist bits-ui-main rmdir /s /q bits-ui-main)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")",
      "Bash(set PGPASSWORD=123456)",
      "Bash(\"C:\\Program Files\\PostgreSQL\\17\\bin\\psql.exe\" -U postgres -h localhost -c \"SELECT version();\")"
    ],
    "deny": []
  }
}
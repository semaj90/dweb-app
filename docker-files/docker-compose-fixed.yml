version: "3.9"

services:
  # PostgreSQL with pgvector
  postgres:
    image: ankane/pgvector:latest
    container_name: legal-postgres
    environment:
      POSTGRES_DB: legal_ai
      POSTGRES_USER: legal_admin
      POSTGRES_PASSWORD: !
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legal_admin -d legal_ai"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - legal-ai-network

  # Drizzle migrations (runs once then exits)
  drizzle-migrate:
    image: node:20-alpine
    container_name: drizzle-migrations
    working_dir: /app
    volumes:
      - ./sveltekit-frontend:/app
    command: sh -c "npm ci && npm run drizzle:migrate"
    environment:
      DATABASE_URL: postgresql://legal_admin:!@postgres:5432/legal_ai
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - legal-ai-network

  # Ollama with GPU support
  ollama:
    build:
      context: .
      dockerfile: Dockerfile.ollama
    container_name: deeds-ollama-gpu
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./models:/models
    environment:
      OLLAMA_MODELS: /models
      OLLAMA_KEEP_ALIVE: 5m
      OLLAMA_FLASH_ATTENTION: 1
      OLLAMA_VERBOSE: 1
      OLLAMA_NUM_GPU: 1
      OLLAMA_GPU_LAYERS: 50
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      CUDA_VISIBLE_DEVICES: 0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: legal-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # Neo4j graph database
  neo4j:
    image: neo4j:5.15-community
    container_name: legal-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/!
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "!", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - legal-ai-network

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: legal-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: legal_admin
      RABBITMQ_DEFAULT_PASS: !
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - legal-ai-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: legal-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # SvelteKit frontend
  sveltekit:
    build:
      context: ./sveltekit-frontend
      dockerfile: Dockerfile
    container_name: sveltekit-app
    ports:
      - "5173:5173"
    environment:
      # Database
      DATABASE_URL: postgresql://legal_admin:!@postgres:5432/legal_ai
      # AI Services
      OLLAMA_URL: http://ollama:11434
      QDRANT_URL: http://qdrant:6333
      # Graph Database
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: !
      # Message Queue
      RABBITMQ_URL: amqp://legal_admin:!@rabbitmq:5672
      # Cache
      REDIS_URL: redis://redis:6379
      # App Config
      PUBLIC_ORIGIN: http://localhost:5173
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - legal-ai-network

volumes:
  postgres_data:
  ollama_data:
  qdrant_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  rabbitmq_data:
  redis_data:

networks:
  legal-ai-network:
    driver: bridge

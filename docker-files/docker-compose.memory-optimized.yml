# Docker Compose Configuration for Memory-Optimized Legal AI System
# Focuses on efficient memory usage with advanced caching and clustering

version: "3.8"

services:
  # PostgreSQL with optimized memory settings
  postgres:
    image: postgres:15-alpine
    container_name: legal-ai-postgres-optimized
    environment:
      POSTGRES_DB: legal_ai
      POSTGRES_USER: legal_ai_user
      POSTGRES_PASSWORD: legal_ai_secure_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data_optimized:/var/lib/postgresql/data
      - ./database/init-optimized.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=50
    mem_limit: 768MB
    mem_reservation: 256MB
    cpus: 1.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legal_ai_user -d legal_ai"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # Redis with memory optimization and clustering support
  redis:
    image: redis:7-alpine
    container_name: legal-ai-redis-optimized
    command: >
      redis-server
      --maxmemory 384MB
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
      --databases 8
      --maxclients 1000
    volumes:
      - redis_data_optimized:/data
      - ./redis/redis-optimized.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6380:6379"
    mem_limit: 512MB
    mem_reservation: 128MB
    cpus: 0.5
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # Qdrant with optimized vector storage
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: legal-ai-qdrant-optimized
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__STORAGE__STORAGE_PATH: /qdrant/storage
      QDRANT__STORAGE__SNAPSHOTS_PATH: /qdrant/snapshots
      QDRANT__STORAGE__WAL_CAPACITY_MB: 64
      QDRANT__STORAGE__WAL_SEGMENTS_AHEAD: 2
      QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS: 2
      QDRANT__STORAGE__PERFORMANCE__MAX_OPTIMIZATION_THREADS: 1
      QDRANT__STORAGE__OPTIMIZERS__MEMMAP_THRESHOLD: 10000
      QDRANT__STORAGE__OPTIMIZERS__INDEXING_THRESHOLD: 10000
    volumes:
      - qdrant_data_optimized:/qdrant/storage
      - qdrant_snapshots_optimized:/qdrant/snapshots
      - ./qdrant/qdrant-optimized.yaml:/qdrant/config/production.yaml
    ports:
      - "6334:6333"
      - "6335:6334"
    mem_limit: 384MB
    mem_reservation: 128MB
    cpus: 1.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # Ollama with memory-optimized LLM serving
  ollama:
    image: ollama/ollama:latest
    container_name: legal-ai-ollama-optimized
    environment:
      OLLAMA_KEEP_ALIVE: 5m
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MODELS: /root/.ollama/models
      OLLAMA_NUM_PARALLEL: 2
      OLLAMA_MAX_LOADED_MODELS: 1
      OLLAMA_FLASH_ATTENTION: 1
      OLLAMA_GPU_OVERHEAD: 0.1
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
    volumes:
      - ollama_data_optimized:/root/.ollama
      - ./ollama/modelfile-optimized:/Modelfile
    ports:
      - "11435:11434"
    mem_limit: 8GB
    mem_reservation: 2GB
    cpus: 4.0
    runtime: nvidia
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 60s
      timeout: 30s
      retries: 3
    networks:
      - legal-ai-network

  # Neo4j with memory optimization
  neo4j:
    image: neo4j:5.15-community
    container_name: legal-ai-neo4j-optimized
    environment:
      NEO4J_AUTH: neo4j/legal_ai_secure_password_2024
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_dbms_memory_heap_initial__size: 256M
      NEO4J_dbms_memory_heap_max__size: 512M
      NEO4J_dbms_memory_pagecache_size: 256M
      NEO4J_dbms_memory_transaction_global__max__size: 64M
      NEO4J_dbms_memory_transaction_max__size: 32M
      NEO4J_dbms_tx__log_rotation_size: 25M
      NEO4J_dbms_checkpoint_interval_time: 15m
      NEO4J_dbms_checkpoint_interval_tx: 100000
      NEO4J_dbms_logs_query_enabled: false
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
    volumes:
      - neo4j_data_optimized:/data
      - neo4j_logs_optimized:/logs
      - neo4j_import_optimized:/var/lib/neo4j/import
      - neo4j_plugins_optimized:/plugins
    ports:
      - "7475:7474"
      - "7688:7687"
    mem_limit: 1GB
    mem_reservation: 256MB
    cpus: 1.0
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:7474/db/manage/server/version"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # RabbitMQ for message queuing with memory limits
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: legal-ai-rabbitmq-optimized
    environment:
      RABBITMQ_DEFAULT_USER: legal_ai_user
      RABBITMQ_DEFAULT_PASS: legal_ai_secure_password_2024
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.6
      RABBITMQ_DISK_FREE_LIMIT: 1GB
    volumes:
      - rabbitmq_data_optimized:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq-optimized.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/definitions-optimized.json:/etc/rabbitmq/definitions.json
    ports:
      - "5673:5672"
      - "15673:15672"
    mem_limit: 384MB
    mem_reservation: 128MB
    cpus: 0.5
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # Enhanced RAG Backend with memory optimization
  rag-backend:
    build:
      context: ./rag-backend
      dockerfile: Dockerfile.optimized
    container_name: legal-ai-rag-backend-optimized
    environment:
      NODE_ENV: production
      NODE_OPTIONS: --max-old-space-size=1024 --optimize-for-size
      DATABASE_URL: postgresql://legal_ai_user:legal_ai_secure_password_2024@postgres:5432/legal_ai
      REDIS_URL: redis://redis:6379
      QDRANT_URL: http://qdrant:6333
      NEO4J_URL: neo4j://neo4j:legal_ai_secure_password_2024@neo4j:7687
      RABBITMQ_URL: amqp://legal_ai_user:legal_ai_secure_password_2024@rabbitmq:5672
      OLLAMA_URL: http://ollama:11434
      ENHANCED_RAG_ENABLED: true
      MEMORY_OPTIMIZATION_LEVEL: high
      CACHE_STRATEGY: aggressive
      CLUSTERING_ENABLED: true
      SOM_ENABLED: true
      LOD_ENABLED: true
    volumes:
      - ./rag-backend:/app
      - rag_cache_optimized:/app/cache
      - rag_logs_optimized:/app/logs
    ports:
      - "3001:3000"
    depends_on:
      - postgres
      - redis
      - qdrant
      - neo4j
      - rabbitmq
      - ollama
    mem_limit: 1GB
    mem_reservation: 256MB
    cpus: 2.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # SvelteKit Frontend with memory optimization
  sveltekit-frontend:
    build:
      context: ./sveltekit-frontend
      dockerfile: Dockerfile.optimized
    container_name: legal-ai-frontend-optimized
    environment:
      NODE_ENV: production
      NODE_OPTIONS: --max-old-space-size=512 --optimize-for-size
      PUBLIC_API_URL: http://localhost:3001
      VITE_API_URL: http://rag-backend:3000
      VITE_MEMORY_OPTIMIZATION: true
      VITE_LOD_ENABLED: true
      VITE_CACHE_ENABLED: true
    volumes:
      - ./sveltekit-frontend:/app
      - frontend_cache_optimized:/app/.svelte-kit
    ports:
      - "5174:5173"
    depends_on:
      - rag-backend
    mem_limit: 512MB
    mem_reservation: 128MB
    cpus: 1.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - legal-ai-network

  # Memory Monitor and Optimizer Service
  memory-optimizer:
    build:
      context: ./memory-optimizer
      dockerfile: Dockerfile
    container_name: legal-ai-memory-optimizer
    environment:
      OPTIMIZATION_INTERVAL: 30s
      MEMORY_THRESHOLD: 85
      AGGRESSIVE_THRESHOLD: 95
      DOCKER_SOCKET: /var/run/docker.sock
      PROMETHEUS_ENABLED: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./memory-optimizer:/app
      - optimizer_logs:/app/logs
    ports:
      - "9091:9090"
    mem_limit: 128MB
    mem_reservation: 64MB
    cpus: 0.25
    restart: unless-stopped
    privileged: true
    networks:
      - legal-ai-network

  # Prometheus for monitoring (lightweight)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: legal-ai-prometheus-optimized
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=7d"
      - "--storage.tsdb.retention.size=1GB"
      - "--web.enable-lifecycle"
    volumes:
      - ./monitoring/prometheus-optimized.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_optimized:/prometheus
    ports:
      - "9091:9090"
    mem_limit: 256MB
    mem_reservation: 64MB
    cpus: 0.5
    restart: unless-stopped
    networks:
      - legal-ai-network

  # Grafana for visualization (lightweight)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: legal-ai-grafana-optimized
    environment:
      GF_SECURITY_ADMIN_PASSWORD: legal_ai_secure_password_2024
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    volumes:
      - grafana_data_optimized:/var/lib/grafana
      - ./monitoring/grafana-optimized/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-optimized/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    mem_limit: 256MB
    mem_reservation: 64MB
    cpus: 0.5
    restart: unless-stopped
    networks:
      - legal-ai-network

volumes:
  postgres_data_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres-optimized

  redis_data_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis-optimized

  qdrant_data_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/qdrant-optimized

  qdrant_snapshots_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/qdrant-snapshots-optimized

  ollama_data_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/ollama-optimized

  neo4j_data_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j-optimized

  neo4j_logs_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/neo4j-optimized

  neo4j_import_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j-import-optimized

  neo4j_plugins_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/neo4j-plugins-optimized

  rabbitmq_data_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/rabbitmq-optimized

  rag_cache_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./cache/rag-optimized

  rag_logs_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/rag-optimized

  frontend_cache_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./cache/frontend-optimized

  optimizer_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/optimizer

  prometheus_data_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus-optimized

  grafana_data_optimized:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana-optimized

networks:
  legal-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Phase 4: Complete Legal AI RAG System
# Local GGUF + Ollama + FastAPI + LangChain + pgvector + Event Streaming
version: '3.8'

services:
  # PostgreSQL with pgvector for RAG
  postgres:
    image: pgvector/pgvector:pg16
    container_name: legal-postgres
    environment:
      POSTGRES_DB: legal_rag_db
      POSTGRES_USER: legal_admin
      POSTGRES_PASSWORD: LegalRAG2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-rag.sql:/docker-entrypoint-initdb.d/init-rag.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legal_admin -d legal_rag_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: legal-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # RabbitMQ for event streaming
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: legal-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: legal_admin
      RABBITMQ_DEFAULT_PASS: LegalRAG2024
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.6
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Neo4j for knowledge graphs
  neo4j:
    image: neo4j:5.15-community
    container_name: legal-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/LegalRAG2024
      NEO4J_PLUGINS: "[\"apoc\", \"graph-data-science\"]"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "LegalRAG2024", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Qdrant for vector similarity search
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: legal-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Ollama with local GGUF model support
  ollama:
    image: ollama/ollama:latest
    container_name: legal-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./local-models:/models
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_KEEP_ALIVE=10m
      - OLLAMA_NUM_PARALLEL=4
      - OLLAMA_FLASH_ATTENTION=1
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '6.0'
        reservations:
          memory: 6G
          cpus: '4.0'
        devices:
          - driver: nvidia
            count: all
            capabilities: [gpu]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # FastAPI RAG backend
  rag-api:
    build:
      context: ./rag-backend
      dockerfile: Dockerfile
    container_name: legal-rag-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://legal_admin:LegalRAG20245432/legal_rag_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://legal_admin:LegalRAG20245672
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=LegalRAG2024
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
      - ENVIRONMENT=production
    volumes:
      - ./local-models:/app/models
      - ./vector-store:/app/vector-store
      - ./event-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped

  # Celery worker for background processing
  celery-worker:
    build:
      context: ./rag-backend
      dockerfile: Dockerfile.worker
    container_name: legal-celery-worker
    environment:
      - DATABASE_URL=postgresql://legal_admin:LegalRAG20245432/legal_rag_db
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://legal_admin:LegalRAG20245672
      - OLLAMA_URL=http://ollama:11434
    volumes:
      - ./local-models:/app/models
      - ./vector-store:/app/vector-store
      - ./event-logs:/app/logs
    depends_on:
      - rag-api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  neo4j_data:
  neo4j_logs:
  qdrant_data:
  ollama_data:

networks:
  default:
    name: legal-rag-network

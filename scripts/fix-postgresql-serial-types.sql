-- PostgreSQL Migration Fix for Serial Type Issues
-- This script addresses the "type serial does not exist" error
-- by using proper PostgreSQL IDENTITY columns instead

-- Enable required extensions first
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS vector;
CREATE EXTENSION IF NOT EXISTS pg_trgm; -- For text search optimization

-- Create custom types for better type safety
DO $$ BEGIN
    CREATE TYPE user_role AS ENUM ('admin', 'investigator', 'analyst', 'viewer', 'prosecutor');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE case_status AS ENUM ('open', 'active', 'closed', 'archived', 'pending');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE evidence_type AS ENUM ('document', 'image', 'video', 'audio', 'other', 'physical');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE report_status AS ENUM ('draft', 'pending', 'approved', 'published');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Fix the canvas_states table with proper IDENTITY column instead of SERIAL
-- This addresses the migration error
DROP TABLE IF EXISTS canvas_states CASCADE;

CREATE TABLE canvas_states (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    report_id UUID,
    canvas_data TEXT,
    metadata JSONB DEFAULT '{}'::jsonb,
    created_by UUID,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create trigger for automatic updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_canvas_states_updated_at
    BEFORE UPDATE ON canvas_states
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Ensure all vector-enabled tables have proper indexes
-- These improve performance for similarity searches
CREATE INDEX IF NOT EXISTS idx_documents_embedding ON documents USING ivfflat (embedding vector_cosine_ops)
    WHERE embedding IS NOT NULL;

-- Create additional performance indexes
CREATE INDEX IF NOT EXISTS idx_cases_status ON cases(status);
CREATE INDEX IF NOT EXISTS idx_cases_priority ON cases(priority);
CREATE INDEX IF NOT EXISTS idx_cases_created_at ON cases(created_at);
CREATE INDEX IF NOT EXISTS idx_evidence_case_id ON evidence(case_id);
CREATE INDEX IF NOT EXISTS idx_evidence_uploaded_at ON evidence(uploaded_at);
CREATE INDEX IF NOT EXISTS idx_canvas_states_report_id ON canvas_states(report_id);
CREATE INDEX IF NOT EXISTS idx_canvas_states_created_by ON canvas_states(created_by);

-- Create full-text search indexes for better search performance
CREATE INDEX IF NOT EXISTS idx_cases_title_search ON cases USING gin(to_tsvector('english', title));
CREATE INDEX IF NOT EXISTS idx_cases_description_search ON cases USING gin(to_tsvector('english', description));
CREATE INDEX IF NOT EXISTS idx_evidence_title_search ON evidence USING gin(to_tsvector('english', title));

-- Grant proper permissions
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO postgres;
GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO postgres;

-- Verify extensions are properly installed
SELECT
    extname as "Extension",
    extversion as "Version"
FROM pg_extension
WHERE extname IN ('vector', 'uuid-ossp', 'pg_trgm')
ORDER BY extname;

-- Show available vector functions for verification
SELECT
    proname as "Function Name",
    pronargs as "Arguments"
FROM pg_proc
WHERE proname LIKE '%vector%'
   OR proname LIKE '%cosine%'
   OR proname LIKE '%euclidean%'
ORDER BY proname;

COMMIT;
